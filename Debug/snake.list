
snake.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004564  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08004624  08004624  00014624  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004690  08004690  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08004690  08004690  00014690  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004698  08004698  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004698  08004698  00014698  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800469c  0800469c  0001469c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080046a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000180  20000078  08004718  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001f8  08004718  000201f8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e880  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002425  00000000  00000000  0002e920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e90  00000000  00000000  00030d48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000da8  00000000  00000000  00031bd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001445f  00000000  00000000  00032980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f697  00000000  00000000  00046ddf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007f08a  00000000  00000000  00056476  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d5500  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000364c  00000000  00000000  000d5554  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000078 	.word	0x20000078
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800460c 	.word	0x0800460c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000007c 	.word	0x2000007c
 8000104:	0800460c 	.word	0x0800460c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	1c08      	adds	r0, r1, #0
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f82e 	bl	80002b0 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	0415      	lsls	r5, r2, #16
 8000264:	0c2d      	lsrs	r5, r5, #16
 8000266:	000f      	movs	r7, r1
 8000268:	0001      	movs	r1, r0
 800026a:	002e      	movs	r6, r5
 800026c:	46c6      	mov	lr, r8
 800026e:	4684      	mov	ip, r0
 8000270:	0400      	lsls	r0, r0, #16
 8000272:	0c14      	lsrs	r4, r2, #16
 8000274:	0c00      	lsrs	r0, r0, #16
 8000276:	0c09      	lsrs	r1, r1, #16
 8000278:	4346      	muls	r6, r0
 800027a:	434d      	muls	r5, r1
 800027c:	4360      	muls	r0, r4
 800027e:	4361      	muls	r1, r4
 8000280:	1940      	adds	r0, r0, r5
 8000282:	0c34      	lsrs	r4, r6, #16
 8000284:	1824      	adds	r4, r4, r0
 8000286:	b500      	push	{lr}
 8000288:	42a5      	cmp	r5, r4
 800028a:	d903      	bls.n	8000294 <__aeabi_lmul+0x34>
 800028c:	2080      	movs	r0, #128	; 0x80
 800028e:	0240      	lsls	r0, r0, #9
 8000290:	4680      	mov	r8, r0
 8000292:	4441      	add	r1, r8
 8000294:	0c25      	lsrs	r5, r4, #16
 8000296:	186d      	adds	r5, r5, r1
 8000298:	4661      	mov	r1, ip
 800029a:	4359      	muls	r1, r3
 800029c:	437a      	muls	r2, r7
 800029e:	0430      	lsls	r0, r6, #16
 80002a0:	1949      	adds	r1, r1, r5
 80002a2:	0424      	lsls	r4, r4, #16
 80002a4:	0c00      	lsrs	r0, r0, #16
 80002a6:	1820      	adds	r0, r4, r0
 80002a8:	1889      	adds	r1, r1, r2
 80002aa:	bc80      	pop	{r7}
 80002ac:	46b8      	mov	r8, r7
 80002ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080002b0 <__udivmoddi4>:
 80002b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002b2:	4657      	mov	r7, sl
 80002b4:	464e      	mov	r6, r9
 80002b6:	4645      	mov	r5, r8
 80002b8:	46de      	mov	lr, fp
 80002ba:	b5e0      	push	{r5, r6, r7, lr}
 80002bc:	0004      	movs	r4, r0
 80002be:	000d      	movs	r5, r1
 80002c0:	4692      	mov	sl, r2
 80002c2:	4699      	mov	r9, r3
 80002c4:	b083      	sub	sp, #12
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d830      	bhi.n	800032c <__udivmoddi4+0x7c>
 80002ca:	d02d      	beq.n	8000328 <__udivmoddi4+0x78>
 80002cc:	4649      	mov	r1, r9
 80002ce:	4650      	mov	r0, sl
 80002d0:	f000 f8ba 	bl	8000448 <__clzdi2>
 80002d4:	0029      	movs	r1, r5
 80002d6:	0006      	movs	r6, r0
 80002d8:	0020      	movs	r0, r4
 80002da:	f000 f8b5 	bl	8000448 <__clzdi2>
 80002de:	1a33      	subs	r3, r6, r0
 80002e0:	4698      	mov	r8, r3
 80002e2:	3b20      	subs	r3, #32
 80002e4:	469b      	mov	fp, r3
 80002e6:	d433      	bmi.n	8000350 <__udivmoddi4+0xa0>
 80002e8:	465a      	mov	r2, fp
 80002ea:	4653      	mov	r3, sl
 80002ec:	4093      	lsls	r3, r2
 80002ee:	4642      	mov	r2, r8
 80002f0:	001f      	movs	r7, r3
 80002f2:	4653      	mov	r3, sl
 80002f4:	4093      	lsls	r3, r2
 80002f6:	001e      	movs	r6, r3
 80002f8:	42af      	cmp	r7, r5
 80002fa:	d83a      	bhi.n	8000372 <__udivmoddi4+0xc2>
 80002fc:	42af      	cmp	r7, r5
 80002fe:	d100      	bne.n	8000302 <__udivmoddi4+0x52>
 8000300:	e078      	b.n	80003f4 <__udivmoddi4+0x144>
 8000302:	465b      	mov	r3, fp
 8000304:	1ba4      	subs	r4, r4, r6
 8000306:	41bd      	sbcs	r5, r7
 8000308:	2b00      	cmp	r3, #0
 800030a:	da00      	bge.n	800030e <__udivmoddi4+0x5e>
 800030c:	e075      	b.n	80003fa <__udivmoddi4+0x14a>
 800030e:	2200      	movs	r2, #0
 8000310:	2300      	movs	r3, #0
 8000312:	9200      	str	r2, [sp, #0]
 8000314:	9301      	str	r3, [sp, #4]
 8000316:	2301      	movs	r3, #1
 8000318:	465a      	mov	r2, fp
 800031a:	4093      	lsls	r3, r2
 800031c:	9301      	str	r3, [sp, #4]
 800031e:	2301      	movs	r3, #1
 8000320:	4642      	mov	r2, r8
 8000322:	4093      	lsls	r3, r2
 8000324:	9300      	str	r3, [sp, #0]
 8000326:	e028      	b.n	800037a <__udivmoddi4+0xca>
 8000328:	4282      	cmp	r2, r0
 800032a:	d9cf      	bls.n	80002cc <__udivmoddi4+0x1c>
 800032c:	2200      	movs	r2, #0
 800032e:	2300      	movs	r3, #0
 8000330:	9200      	str	r2, [sp, #0]
 8000332:	9301      	str	r3, [sp, #4]
 8000334:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <__udivmoddi4+0x8e>
 800033a:	601c      	str	r4, [r3, #0]
 800033c:	605d      	str	r5, [r3, #4]
 800033e:	9800      	ldr	r0, [sp, #0]
 8000340:	9901      	ldr	r1, [sp, #4]
 8000342:	b003      	add	sp, #12
 8000344:	bcf0      	pop	{r4, r5, r6, r7}
 8000346:	46bb      	mov	fp, r7
 8000348:	46b2      	mov	sl, r6
 800034a:	46a9      	mov	r9, r5
 800034c:	46a0      	mov	r8, r4
 800034e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000350:	4642      	mov	r2, r8
 8000352:	2320      	movs	r3, #32
 8000354:	1a9b      	subs	r3, r3, r2
 8000356:	4652      	mov	r2, sl
 8000358:	40da      	lsrs	r2, r3
 800035a:	4641      	mov	r1, r8
 800035c:	0013      	movs	r3, r2
 800035e:	464a      	mov	r2, r9
 8000360:	408a      	lsls	r2, r1
 8000362:	0017      	movs	r7, r2
 8000364:	4642      	mov	r2, r8
 8000366:	431f      	orrs	r7, r3
 8000368:	4653      	mov	r3, sl
 800036a:	4093      	lsls	r3, r2
 800036c:	001e      	movs	r6, r3
 800036e:	42af      	cmp	r7, r5
 8000370:	d9c4      	bls.n	80002fc <__udivmoddi4+0x4c>
 8000372:	2200      	movs	r2, #0
 8000374:	2300      	movs	r3, #0
 8000376:	9200      	str	r2, [sp, #0]
 8000378:	9301      	str	r3, [sp, #4]
 800037a:	4643      	mov	r3, r8
 800037c:	2b00      	cmp	r3, #0
 800037e:	d0d9      	beq.n	8000334 <__udivmoddi4+0x84>
 8000380:	07fb      	lsls	r3, r7, #31
 8000382:	0872      	lsrs	r2, r6, #1
 8000384:	431a      	orrs	r2, r3
 8000386:	4646      	mov	r6, r8
 8000388:	087b      	lsrs	r3, r7, #1
 800038a:	e00e      	b.n	80003aa <__udivmoddi4+0xfa>
 800038c:	42ab      	cmp	r3, r5
 800038e:	d101      	bne.n	8000394 <__udivmoddi4+0xe4>
 8000390:	42a2      	cmp	r2, r4
 8000392:	d80c      	bhi.n	80003ae <__udivmoddi4+0xfe>
 8000394:	1aa4      	subs	r4, r4, r2
 8000396:	419d      	sbcs	r5, r3
 8000398:	2001      	movs	r0, #1
 800039a:	1924      	adds	r4, r4, r4
 800039c:	416d      	adcs	r5, r5
 800039e:	2100      	movs	r1, #0
 80003a0:	3e01      	subs	r6, #1
 80003a2:	1824      	adds	r4, r4, r0
 80003a4:	414d      	adcs	r5, r1
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d006      	beq.n	80003b8 <__udivmoddi4+0x108>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	d9ee      	bls.n	800038c <__udivmoddi4+0xdc>
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1924      	adds	r4, r4, r4
 80003b2:	416d      	adcs	r5, r5
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d1f8      	bne.n	80003aa <__udivmoddi4+0xfa>
 80003b8:	9800      	ldr	r0, [sp, #0]
 80003ba:	9901      	ldr	r1, [sp, #4]
 80003bc:	465b      	mov	r3, fp
 80003be:	1900      	adds	r0, r0, r4
 80003c0:	4169      	adcs	r1, r5
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	db24      	blt.n	8000410 <__udivmoddi4+0x160>
 80003c6:	002b      	movs	r3, r5
 80003c8:	465a      	mov	r2, fp
 80003ca:	4644      	mov	r4, r8
 80003cc:	40d3      	lsrs	r3, r2
 80003ce:	002a      	movs	r2, r5
 80003d0:	40e2      	lsrs	r2, r4
 80003d2:	001c      	movs	r4, r3
 80003d4:	465b      	mov	r3, fp
 80003d6:	0015      	movs	r5, r2
 80003d8:	2b00      	cmp	r3, #0
 80003da:	db2a      	blt.n	8000432 <__udivmoddi4+0x182>
 80003dc:	0026      	movs	r6, r4
 80003de:	409e      	lsls	r6, r3
 80003e0:	0033      	movs	r3, r6
 80003e2:	0026      	movs	r6, r4
 80003e4:	4647      	mov	r7, r8
 80003e6:	40be      	lsls	r6, r7
 80003e8:	0032      	movs	r2, r6
 80003ea:	1a80      	subs	r0, r0, r2
 80003ec:	4199      	sbcs	r1, r3
 80003ee:	9000      	str	r0, [sp, #0]
 80003f0:	9101      	str	r1, [sp, #4]
 80003f2:	e79f      	b.n	8000334 <__udivmoddi4+0x84>
 80003f4:	42a3      	cmp	r3, r4
 80003f6:	d8bc      	bhi.n	8000372 <__udivmoddi4+0xc2>
 80003f8:	e783      	b.n	8000302 <__udivmoddi4+0x52>
 80003fa:	4642      	mov	r2, r8
 80003fc:	2320      	movs	r3, #32
 80003fe:	2100      	movs	r1, #0
 8000400:	1a9b      	subs	r3, r3, r2
 8000402:	2200      	movs	r2, #0
 8000404:	9100      	str	r1, [sp, #0]
 8000406:	9201      	str	r2, [sp, #4]
 8000408:	2201      	movs	r2, #1
 800040a:	40da      	lsrs	r2, r3
 800040c:	9201      	str	r2, [sp, #4]
 800040e:	e786      	b.n	800031e <__udivmoddi4+0x6e>
 8000410:	4642      	mov	r2, r8
 8000412:	2320      	movs	r3, #32
 8000414:	1a9b      	subs	r3, r3, r2
 8000416:	002a      	movs	r2, r5
 8000418:	4646      	mov	r6, r8
 800041a:	409a      	lsls	r2, r3
 800041c:	0023      	movs	r3, r4
 800041e:	40f3      	lsrs	r3, r6
 8000420:	4644      	mov	r4, r8
 8000422:	4313      	orrs	r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	40e2      	lsrs	r2, r4
 8000428:	001c      	movs	r4, r3
 800042a:	465b      	mov	r3, fp
 800042c:	0015      	movs	r5, r2
 800042e:	2b00      	cmp	r3, #0
 8000430:	dad4      	bge.n	80003dc <__udivmoddi4+0x12c>
 8000432:	4642      	mov	r2, r8
 8000434:	002f      	movs	r7, r5
 8000436:	2320      	movs	r3, #32
 8000438:	0026      	movs	r6, r4
 800043a:	4097      	lsls	r7, r2
 800043c:	1a9b      	subs	r3, r3, r2
 800043e:	40de      	lsrs	r6, r3
 8000440:	003b      	movs	r3, r7
 8000442:	4333      	orrs	r3, r6
 8000444:	e7cd      	b.n	80003e2 <__udivmoddi4+0x132>
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__clzdi2>:
 8000448:	b510      	push	{r4, lr}
 800044a:	2900      	cmp	r1, #0
 800044c:	d103      	bne.n	8000456 <__clzdi2+0xe>
 800044e:	f000 f807 	bl	8000460 <__clzsi2>
 8000452:	3020      	adds	r0, #32
 8000454:	e002      	b.n	800045c <__clzdi2+0x14>
 8000456:	1c08      	adds	r0, r1, #0
 8000458:	f000 f802 	bl	8000460 <__clzsi2>
 800045c:	bd10      	pop	{r4, pc}
 800045e:	46c0      	nop			; (mov r8, r8)

08000460 <__clzsi2>:
 8000460:	211c      	movs	r1, #28
 8000462:	2301      	movs	r3, #1
 8000464:	041b      	lsls	r3, r3, #16
 8000466:	4298      	cmp	r0, r3
 8000468:	d301      	bcc.n	800046e <__clzsi2+0xe>
 800046a:	0c00      	lsrs	r0, r0, #16
 800046c:	3910      	subs	r1, #16
 800046e:	0a1b      	lsrs	r3, r3, #8
 8000470:	4298      	cmp	r0, r3
 8000472:	d301      	bcc.n	8000478 <__clzsi2+0x18>
 8000474:	0a00      	lsrs	r0, r0, #8
 8000476:	3908      	subs	r1, #8
 8000478:	091b      	lsrs	r3, r3, #4
 800047a:	4298      	cmp	r0, r3
 800047c:	d301      	bcc.n	8000482 <__clzsi2+0x22>
 800047e:	0900      	lsrs	r0, r0, #4
 8000480:	3904      	subs	r1, #4
 8000482:	a202      	add	r2, pc, #8	; (adr r2, 800048c <__clzsi2+0x2c>)
 8000484:	5c10      	ldrb	r0, [r2, r0]
 8000486:	1840      	adds	r0, r0, r1
 8000488:	4770      	bx	lr
 800048a:	46c0      	nop			; (mov r8, r8)
 800048c:	02020304 	.word	0x02020304
 8000490:	01010101 	.word	0x01010101
	...

0800049c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b084      	sub	sp, #16
 80004a0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004a2:	f000 fd61 	bl	8000f68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004a6:	f000 f86b 	bl	8000580 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004aa:	f000 f9af 	bl	800080c <MX_GPIO_Init>
  MX_SPI1_Init();
 80004ae:	f000 f8f1 	bl	8000694 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 80004b2:	f000 f97b 	bl	80007ac <MX_USART2_UART_Init>
  MX_RNG_Init();
 80004b6:	f000 f8d9 	bl	800066c <MX_RNG_Init>
  MX_TIM2_Init();
 80004ba:	f000 f923 	bl	8000704 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  max7219(Shutdown, 0);
 80004be:	2100      	movs	r1, #0
 80004c0:	200c      	movs	r0, #12
 80004c2:	f000 f9e7 	bl	8000894 <max7219>
  max7219(Test, 0);
 80004c6:	2100      	movs	r1, #0
 80004c8:	200f      	movs	r0, #15
 80004ca:	f000 f9e3 	bl	8000894 <max7219>
  max7219(Decode, 0);
 80004ce:	2100      	movs	r1, #0
 80004d0:	2009      	movs	r0, #9
 80004d2:	f000 f9df 	bl	8000894 <max7219>
  max7219(Intensity, 0xF);
 80004d6:	210f      	movs	r1, #15
 80004d8:	200a      	movs	r0, #10
 80004da:	f000 f9db 	bl	8000894 <max7219>
  max7219(Scan, 7);
 80004de:	2107      	movs	r1, #7
 80004e0:	200b      	movs	r0, #11
 80004e2:	f000 f9d7 	bl	8000894 <max7219>
  max7219(Shutdown, 1);
 80004e6:	2101      	movs	r1, #1
 80004e8:	200c      	movs	r0, #12
 80004ea:	f000 f9d3 	bl	8000894 <max7219>

  dot_t *self = ptr;
 80004ee:	4b1f      	ldr	r3, [pc, #124]	; (800056c <main+0xd0>)
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	60fb      	str	r3, [r7, #12]
  snake.x = 1, snake.y = 1;
 80004f4:	4b1e      	ldr	r3, [pc, #120]	; (8000570 <main+0xd4>)
 80004f6:	2201      	movs	r2, #1
 80004f8:	701a      	strb	r2, [r3, #0]
 80004fa:	4b1d      	ldr	r3, [pc, #116]	; (8000570 <main+0xd4>)
 80004fc:	2201      	movs	r2, #1
 80004fe:	705a      	strb	r2, [r3, #1]
  for (uint8_t i = 0; i < 3; i++) {
 8000500:	230b      	movs	r3, #11
 8000502:	18fb      	adds	r3, r7, r3
 8000504:	2200      	movs	r2, #0
 8000506:	701a      	strb	r2, [r3, #0]
 8000508:	e01a      	b.n	8000540 <main+0xa4>
    dot_t *node = make_dot();
 800050a:	f000 fb4c 	bl	8000ba6 <make_dot>
 800050e:	0003      	movs	r3, r0
 8000510:	607b      	str	r3, [r7, #4]
    self->next = node;
 8000512:	68fb      	ldr	r3, [r7, #12]
 8000514:	687a      	ldr	r2, [r7, #4]
 8000516:	605a      	str	r2, [r3, #4]
    node->x = 1, node->y = i + 2, node->next = 0;
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	2201      	movs	r2, #1
 800051c:	701a      	strb	r2, [r3, #0]
 800051e:	210b      	movs	r1, #11
 8000520:	187b      	adds	r3, r7, r1
 8000522:	781b      	ldrb	r3, [r3, #0]
 8000524:	3302      	adds	r3, #2
 8000526:	b2da      	uxtb	r2, r3
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	705a      	strb	r2, [r3, #1]
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	2200      	movs	r2, #0
 8000530:	605a      	str	r2, [r3, #4]
    self = node;
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	60fb      	str	r3, [r7, #12]
  for (uint8_t i = 0; i < 3; i++) {
 8000536:	187b      	adds	r3, r7, r1
 8000538:	781a      	ldrb	r2, [r3, #0]
 800053a:	187b      	adds	r3, r7, r1
 800053c:	3201      	adds	r2, #1
 800053e:	701a      	strb	r2, [r3, #0]
 8000540:	230b      	movs	r3, #11
 8000542:	18fb      	adds	r3, r7, r3
 8000544:	781b      	ldrb	r3, [r3, #0]
 8000546:	2b02      	cmp	r3, #2
 8000548:	d9df      	bls.n	800050a <main+0x6e>
  }

  generate_food();
 800054a:	f000 fa27 	bl	800099c <generate_food>

  HAL_TIM_Base_Start_IT(&htim2);
 800054e:	4b09      	ldr	r3, [pc, #36]	; (8000574 <main+0xd8>)
 8000550:	0018      	movs	r0, r3
 8000552:	f002 fb6b 	bl	8002c2c <HAL_TIM_Base_Start_IT>
  HAL_TIM_IRQHandler(&htim2);
 8000556:	4b07      	ldr	r3, [pc, #28]	; (8000574 <main+0xd8>)
 8000558:	0018      	movs	r0, r3
 800055a:	f002 fbb3 	bl	8002cc4 <HAL_TIM_IRQHandler>
  HAL_UART_Receive_IT(&huart2, &key, 1);
 800055e:	4906      	ldr	r1, [pc, #24]	; (8000578 <main+0xdc>)
 8000560:	4b06      	ldr	r3, [pc, #24]	; (800057c <main+0xe0>)
 8000562:	2201      	movs	r2, #1
 8000564:	0018      	movs	r0, r3
 8000566:	f002 ff21 	bl	80033ac <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
 800056a:	e7fe      	b.n	800056a <main+0xce>
 800056c:	20000000 	.word	0x20000000
 8000570:	200000ac 	.word	0x200000ac
 8000574:	20000120 	.word	0x20000120
 8000578:	200000b4 	.word	0x200000b4
 800057c:	20000160 	.word	0x20000160

08000580 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000580:	b590      	push	{r4, r7, lr}
 8000582:	b09d      	sub	sp, #116	; 0x74
 8000584:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000586:	2438      	movs	r4, #56	; 0x38
 8000588:	193b      	adds	r3, r7, r4
 800058a:	0018      	movs	r0, r3
 800058c:	2338      	movs	r3, #56	; 0x38
 800058e:	001a      	movs	r2, r3
 8000590:	2100      	movs	r1, #0
 8000592:	f003 ffb1 	bl	80044f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000596:	2324      	movs	r3, #36	; 0x24
 8000598:	18fb      	adds	r3, r7, r3
 800059a:	0018      	movs	r0, r3
 800059c:	2314      	movs	r3, #20
 800059e:	001a      	movs	r2, r3
 80005a0:	2100      	movs	r1, #0
 80005a2:	f003 ffa9 	bl	80044f8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005a6:	003b      	movs	r3, r7
 80005a8:	0018      	movs	r0, r3
 80005aa:	2324      	movs	r3, #36	; 0x24
 80005ac:	001a      	movs	r2, r3
 80005ae:	2100      	movs	r1, #0
 80005b0:	f003 ffa2 	bl	80044f8 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005b4:	4b2b      	ldr	r3, [pc, #172]	; (8000664 <SystemClock_Config+0xe4>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	4a2b      	ldr	r2, [pc, #172]	; (8000668 <SystemClock_Config+0xe8>)
 80005ba:	401a      	ands	r2, r3
 80005bc:	4b29      	ldr	r3, [pc, #164]	; (8000664 <SystemClock_Config+0xe4>)
 80005be:	2180      	movs	r1, #128	; 0x80
 80005c0:	0109      	lsls	r1, r1, #4
 80005c2:	430a      	orrs	r2, r1
 80005c4:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005c6:	0021      	movs	r1, r4
 80005c8:	187b      	adds	r3, r7, r1
 80005ca:	2202      	movs	r2, #2
 80005cc:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005ce:	187b      	adds	r3, r7, r1
 80005d0:	2201      	movs	r2, #1
 80005d2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005d4:	187b      	adds	r3, r7, r1
 80005d6:	2210      	movs	r2, #16
 80005d8:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005da:	187b      	adds	r3, r7, r1
 80005dc:	2202      	movs	r2, #2
 80005de:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005e0:	187b      	adds	r3, r7, r1
 80005e2:	2200      	movs	r2, #0
 80005e4:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 80005e6:	187b      	adds	r3, r7, r1
 80005e8:	2280      	movs	r2, #128	; 0x80
 80005ea:	02d2      	lsls	r2, r2, #11
 80005ec:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 80005ee:	187b      	adds	r3, r7, r1
 80005f0:	2280      	movs	r2, #128	; 0x80
 80005f2:	03d2      	lsls	r2, r2, #15
 80005f4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005f6:	187b      	adds	r3, r7, r1
 80005f8:	0018      	movs	r0, r3
 80005fa:	f001 f835 	bl	8001668 <HAL_RCC_OscConfig>
 80005fe:	1e03      	subs	r3, r0, #0
 8000600:	d001      	beq.n	8000606 <SystemClock_Config+0x86>
  {
    Error_Handler();
 8000602:	f000 fb2f 	bl	8000c64 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000606:	2124      	movs	r1, #36	; 0x24
 8000608:	187b      	adds	r3, r7, r1
 800060a:	220f      	movs	r2, #15
 800060c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800060e:	187b      	adds	r3, r7, r1
 8000610:	2203      	movs	r2, #3
 8000612:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000614:	187b      	adds	r3, r7, r1
 8000616:	2200      	movs	r2, #0
 8000618:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800061a:	187b      	adds	r3, r7, r1
 800061c:	2200      	movs	r2, #0
 800061e:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000620:	187b      	adds	r3, r7, r1
 8000622:	2200      	movs	r2, #0
 8000624:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000626:	187b      	adds	r3, r7, r1
 8000628:	2101      	movs	r1, #1
 800062a:	0018      	movs	r0, r3
 800062c:	f001 fbe0 	bl	8001df0 <HAL_RCC_ClockConfig>
 8000630:	1e03      	subs	r3, r0, #0
 8000632:	d001      	beq.n	8000638 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000634:	f000 fb16 	bl	8000c64 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USB;
 8000638:	003b      	movs	r3, r7
 800063a:	2242      	movs	r2, #66	; 0x42
 800063c:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800063e:	003b      	movs	r3, r7
 8000640:	2200      	movs	r2, #0
 8000642:	611a      	str	r2, [r3, #16]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000644:	003b      	movs	r3, r7
 8000646:	2200      	movs	r2, #0
 8000648:	621a      	str	r2, [r3, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800064a:	003b      	movs	r3, r7
 800064c:	0018      	movs	r0, r3
 800064e:	f001 fdf3 	bl	8002238 <HAL_RCCEx_PeriphCLKConfig>
 8000652:	1e03      	subs	r3, r0, #0
 8000654:	d001      	beq.n	800065a <SystemClock_Config+0xda>
  {
    Error_Handler();
 8000656:	f000 fb05 	bl	8000c64 <Error_Handler>
  }
}
 800065a:	46c0      	nop			; (mov r8, r8)
 800065c:	46bd      	mov	sp, r7
 800065e:	b01d      	add	sp, #116	; 0x74
 8000660:	bd90      	pop	{r4, r7, pc}
 8000662:	46c0      	nop			; (mov r8, r8)
 8000664:	40007000 	.word	0x40007000
 8000668:	ffffe7ff 	.word	0xffffe7ff

0800066c <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8000670:	4b06      	ldr	r3, [pc, #24]	; (800068c <MX_RNG_Init+0x20>)
 8000672:	4a07      	ldr	r2, [pc, #28]	; (8000690 <MX_RNG_Init+0x24>)
 8000674:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8000676:	4b05      	ldr	r3, [pc, #20]	; (800068c <MX_RNG_Init+0x20>)
 8000678:	0018      	movs	r0, r3
 800067a:	f001 ff41 	bl	8002500 <HAL_RNG_Init>
 800067e:	1e03      	subs	r3, r0, #0
 8000680:	d001      	beq.n	8000686 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8000682:	f000 faef 	bl	8000c64 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8000686:	46c0      	nop			; (mov r8, r8)
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	200000b8 	.word	0x200000b8
 8000690:	40025000 	.word	0x40025000

08000694 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000698:	4b18      	ldr	r3, [pc, #96]	; (80006fc <MX_SPI1_Init+0x68>)
 800069a:	4a19      	ldr	r2, [pc, #100]	; (8000700 <MX_SPI1_Init+0x6c>)
 800069c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800069e:	4b17      	ldr	r3, [pc, #92]	; (80006fc <MX_SPI1_Init+0x68>)
 80006a0:	2282      	movs	r2, #130	; 0x82
 80006a2:	0052      	lsls	r2, r2, #1
 80006a4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006a6:	4b15      	ldr	r3, [pc, #84]	; (80006fc <MX_SPI1_Init+0x68>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006ac:	4b13      	ldr	r3, [pc, #76]	; (80006fc <MX_SPI1_Init+0x68>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006b2:	4b12      	ldr	r3, [pc, #72]	; (80006fc <MX_SPI1_Init+0x68>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006b8:	4b10      	ldr	r3, [pc, #64]	; (80006fc <MX_SPI1_Init+0x68>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006be:	4b0f      	ldr	r3, [pc, #60]	; (80006fc <MX_SPI1_Init+0x68>)
 80006c0:	2280      	movs	r2, #128	; 0x80
 80006c2:	0092      	lsls	r2, r2, #2
 80006c4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80006c6:	4b0d      	ldr	r3, [pc, #52]	; (80006fc <MX_SPI1_Init+0x68>)
 80006c8:	2238      	movs	r2, #56	; 0x38
 80006ca:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006cc:	4b0b      	ldr	r3, [pc, #44]	; (80006fc <MX_SPI1_Init+0x68>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006d2:	4b0a      	ldr	r3, [pc, #40]	; (80006fc <MX_SPI1_Init+0x68>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006d8:	4b08      	ldr	r3, [pc, #32]	; (80006fc <MX_SPI1_Init+0x68>)
 80006da:	2200      	movs	r2, #0
 80006dc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80006de:	4b07      	ldr	r3, [pc, #28]	; (80006fc <MX_SPI1_Init+0x68>)
 80006e0:	2207      	movs	r2, #7
 80006e2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80006e4:	4b05      	ldr	r3, [pc, #20]	; (80006fc <MX_SPI1_Init+0x68>)
 80006e6:	0018      	movs	r0, r3
 80006e8:	f001 ffa2 	bl	8002630 <HAL_SPI_Init>
 80006ec:	1e03      	subs	r3, r0, #0
 80006ee:	d001      	beq.n	80006f4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80006f0:	f000 fab8 	bl	8000c64 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80006f4:	46c0      	nop			; (mov r8, r8)
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	46c0      	nop			; (mov r8, r8)
 80006fc:	200000c8 	.word	0x200000c8
 8000700:	40013000 	.word	0x40013000

08000704 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b086      	sub	sp, #24
 8000708:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800070a:	2308      	movs	r3, #8
 800070c:	18fb      	adds	r3, r7, r3
 800070e:	0018      	movs	r0, r3
 8000710:	2310      	movs	r3, #16
 8000712:	001a      	movs	r2, r3
 8000714:	2100      	movs	r1, #0
 8000716:	f003 feef 	bl	80044f8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800071a:	003b      	movs	r3, r7
 800071c:	0018      	movs	r0, r3
 800071e:	2308      	movs	r3, #8
 8000720:	001a      	movs	r2, r3
 8000722:	2100      	movs	r1, #0
 8000724:	f003 fee8 	bl	80044f8 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000728:	4b1e      	ldr	r3, [pc, #120]	; (80007a4 <MX_TIM2_Init+0xa0>)
 800072a:	2280      	movs	r2, #128	; 0x80
 800072c:	05d2      	lsls	r2, r2, #23
 800072e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 31999;
 8000730:	4b1c      	ldr	r3, [pc, #112]	; (80007a4 <MX_TIM2_Init+0xa0>)
 8000732:	4a1d      	ldr	r2, [pc, #116]	; (80007a8 <MX_TIM2_Init+0xa4>)
 8000734:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000736:	4b1b      	ldr	r3, [pc, #108]	; (80007a4 <MX_TIM2_Init+0xa0>)
 8000738:	2200      	movs	r2, #0
 800073a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 200;
 800073c:	4b19      	ldr	r3, [pc, #100]	; (80007a4 <MX_TIM2_Init+0xa0>)
 800073e:	22c8      	movs	r2, #200	; 0xc8
 8000740:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000742:	4b18      	ldr	r3, [pc, #96]	; (80007a4 <MX_TIM2_Init+0xa0>)
 8000744:	2200      	movs	r2, #0
 8000746:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000748:	4b16      	ldr	r3, [pc, #88]	; (80007a4 <MX_TIM2_Init+0xa0>)
 800074a:	2200      	movs	r2, #0
 800074c:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800074e:	4b15      	ldr	r3, [pc, #84]	; (80007a4 <MX_TIM2_Init+0xa0>)
 8000750:	0018      	movs	r0, r3
 8000752:	f002 fa2b 	bl	8002bac <HAL_TIM_Base_Init>
 8000756:	1e03      	subs	r3, r0, #0
 8000758:	d001      	beq.n	800075e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800075a:	f000 fa83 	bl	8000c64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800075e:	2108      	movs	r1, #8
 8000760:	187b      	adds	r3, r7, r1
 8000762:	2280      	movs	r2, #128	; 0x80
 8000764:	0152      	lsls	r2, r2, #5
 8000766:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000768:	187a      	adds	r2, r7, r1
 800076a:	4b0e      	ldr	r3, [pc, #56]	; (80007a4 <MX_TIM2_Init+0xa0>)
 800076c:	0011      	movs	r1, r2
 800076e:	0018      	movs	r0, r3
 8000770:	f002 fb90 	bl	8002e94 <HAL_TIM_ConfigClockSource>
 8000774:	1e03      	subs	r3, r0, #0
 8000776:	d001      	beq.n	800077c <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000778:	f000 fa74 	bl	8000c64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800077c:	003b      	movs	r3, r7
 800077e:	2200      	movs	r2, #0
 8000780:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000782:	003b      	movs	r3, r7
 8000784:	2200      	movs	r2, #0
 8000786:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000788:	003a      	movs	r2, r7
 800078a:	4b06      	ldr	r3, [pc, #24]	; (80007a4 <MX_TIM2_Init+0xa0>)
 800078c:	0011      	movs	r1, r2
 800078e:	0018      	movs	r0, r3
 8000790:	f002 fd60 	bl	8003254 <HAL_TIMEx_MasterConfigSynchronization>
 8000794:	1e03      	subs	r3, r0, #0
 8000796:	d001      	beq.n	800079c <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000798:	f000 fa64 	bl	8000c64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800079c:	46c0      	nop			; (mov r8, r8)
 800079e:	46bd      	mov	sp, r7
 80007a0:	b006      	add	sp, #24
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	20000120 	.word	0x20000120
 80007a8:	00007cff 	.word	0x00007cff

080007ac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007b0:	4b14      	ldr	r3, [pc, #80]	; (8000804 <MX_USART2_UART_Init+0x58>)
 80007b2:	4a15      	ldr	r2, [pc, #84]	; (8000808 <MX_USART2_UART_Init+0x5c>)
 80007b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007b6:	4b13      	ldr	r3, [pc, #76]	; (8000804 <MX_USART2_UART_Init+0x58>)
 80007b8:	22e1      	movs	r2, #225	; 0xe1
 80007ba:	0252      	lsls	r2, r2, #9
 80007bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007be:	4b11      	ldr	r3, [pc, #68]	; (8000804 <MX_USART2_UART_Init+0x58>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007c4:	4b0f      	ldr	r3, [pc, #60]	; (8000804 <MX_USART2_UART_Init+0x58>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007ca:	4b0e      	ldr	r3, [pc, #56]	; (8000804 <MX_USART2_UART_Init+0x58>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007d0:	4b0c      	ldr	r3, [pc, #48]	; (8000804 <MX_USART2_UART_Init+0x58>)
 80007d2:	220c      	movs	r2, #12
 80007d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007d6:	4b0b      	ldr	r3, [pc, #44]	; (8000804 <MX_USART2_UART_Init+0x58>)
 80007d8:	2200      	movs	r2, #0
 80007da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007dc:	4b09      	ldr	r3, [pc, #36]	; (8000804 <MX_USART2_UART_Init+0x58>)
 80007de:	2200      	movs	r2, #0
 80007e0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007e2:	4b08      	ldr	r3, [pc, #32]	; (8000804 <MX_USART2_UART_Init+0x58>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007e8:	4b06      	ldr	r3, [pc, #24]	; (8000804 <MX_USART2_UART_Init+0x58>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007ee:	4b05      	ldr	r3, [pc, #20]	; (8000804 <MX_USART2_UART_Init+0x58>)
 80007f0:	0018      	movs	r0, r3
 80007f2:	f002 fd87 	bl	8003304 <HAL_UART_Init>
 80007f6:	1e03      	subs	r3, r0, #0
 80007f8:	d001      	beq.n	80007fe <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80007fa:	f000 fa33 	bl	8000c64 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007fe:	46c0      	nop			; (mov r8, r8)
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	20000160 	.word	0x20000160
 8000808:	40004400 	.word	0x40004400

0800080c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800080c:	b590      	push	{r4, r7, lr}
 800080e:	b089      	sub	sp, #36	; 0x24
 8000810:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000812:	240c      	movs	r4, #12
 8000814:	193b      	adds	r3, r7, r4
 8000816:	0018      	movs	r0, r3
 8000818:	2314      	movs	r3, #20
 800081a:	001a      	movs	r2, r3
 800081c:	2100      	movs	r1, #0
 800081e:	f003 fe6b 	bl	80044f8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000822:	4b1a      	ldr	r3, [pc, #104]	; (800088c <MX_GPIO_Init+0x80>)
 8000824:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000826:	4b19      	ldr	r3, [pc, #100]	; (800088c <MX_GPIO_Init+0x80>)
 8000828:	2101      	movs	r1, #1
 800082a:	430a      	orrs	r2, r1
 800082c:	62da      	str	r2, [r3, #44]	; 0x2c
 800082e:	4b17      	ldr	r3, [pc, #92]	; (800088c <MX_GPIO_Init+0x80>)
 8000830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000832:	2201      	movs	r2, #1
 8000834:	4013      	ands	r3, r2
 8000836:	60bb      	str	r3, [r7, #8]
 8000838:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800083a:	4b14      	ldr	r3, [pc, #80]	; (800088c <MX_GPIO_Init+0x80>)
 800083c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800083e:	4b13      	ldr	r3, [pc, #76]	; (800088c <MX_GPIO_Init+0x80>)
 8000840:	2104      	movs	r1, #4
 8000842:	430a      	orrs	r2, r1
 8000844:	62da      	str	r2, [r3, #44]	; 0x2c
 8000846:	4b11      	ldr	r3, [pc, #68]	; (800088c <MX_GPIO_Init+0x80>)
 8000848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800084a:	2204      	movs	r2, #4
 800084c:	4013      	ands	r3, r2
 800084e:	607b      	str	r3, [r7, #4]
 8000850:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8000852:	4b0f      	ldr	r3, [pc, #60]	; (8000890 <MX_GPIO_Init+0x84>)
 8000854:	2200      	movs	r2, #0
 8000856:	2180      	movs	r1, #128	; 0x80
 8000858:	0018      	movs	r0, r3
 800085a:	f000 fee7 	bl	800162c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800085e:	0021      	movs	r1, r4
 8000860:	187b      	adds	r3, r7, r1
 8000862:	2280      	movs	r2, #128	; 0x80
 8000864:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000866:	187b      	adds	r3, r7, r1
 8000868:	2201      	movs	r2, #1
 800086a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086c:	187b      	adds	r3, r7, r1
 800086e:	2200      	movs	r2, #0
 8000870:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000872:	187b      	adds	r3, r7, r1
 8000874:	2200      	movs	r2, #0
 8000876:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000878:	187b      	adds	r3, r7, r1
 800087a:	4a05      	ldr	r2, [pc, #20]	; (8000890 <MX_GPIO_Init+0x84>)
 800087c:	0019      	movs	r1, r3
 800087e:	0010      	movs	r0, r2
 8000880:	f000 fd5e 	bl	8001340 <HAL_GPIO_Init>

}
 8000884:	46c0      	nop			; (mov r8, r8)
 8000886:	46bd      	mov	sp, r7
 8000888:	b009      	add	sp, #36	; 0x24
 800088a:	bd90      	pop	{r4, r7, pc}
 800088c:	40021000 	.word	0x40021000
 8000890:	50000800 	.word	0x50000800

08000894 <max7219>:

/* USER CODE BEGIN 4 */

void max7219(uint8_t r, uint8_t d) {
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0
 800089a:	0002      	movs	r2, r0
 800089c:	1dfb      	adds	r3, r7, #7
 800089e:	701a      	strb	r2, [r3, #0]
 80008a0:	1dbb      	adds	r3, r7, #6
 80008a2:	1c0a      	adds	r2, r1, #0
 80008a4:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);
 80008a6:	4b0e      	ldr	r3, [pc, #56]	; (80008e0 <max7219+0x4c>)
 80008a8:	2201      	movs	r2, #1
 80008aa:	2180      	movs	r1, #128	; 0x80
 80008ac:	0018      	movs	r0, r3
 80008ae:	f000 febd 	bl	800162c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &r, 1, 1);
 80008b2:	1df9      	adds	r1, r7, #7
 80008b4:	480b      	ldr	r0, [pc, #44]	; (80008e4 <max7219+0x50>)
 80008b6:	2301      	movs	r3, #1
 80008b8:	2201      	movs	r2, #1
 80008ba:	f001 ff4d 	bl	8002758 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, &d, 1, 1);
 80008be:	1db9      	adds	r1, r7, #6
 80008c0:	4808      	ldr	r0, [pc, #32]	; (80008e4 <max7219+0x50>)
 80008c2:	2301      	movs	r3, #1
 80008c4:	2201      	movs	r2, #1
 80008c6:	f001 ff47 	bl	8002758 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);
 80008ca:	4b05      	ldr	r3, [pc, #20]	; (80008e0 <max7219+0x4c>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	2180      	movs	r1, #128	; 0x80
 80008d0:	0018      	movs	r0, r3
 80008d2:	f000 feab 	bl	800162c <HAL_GPIO_WritePin>
}
 80008d6:	46c0      	nop			; (mov r8, r8)
 80008d8:	46bd      	mov	sp, r7
 80008da:	b002      	add	sp, #8
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	46c0      	nop			; (mov r8, r8)
 80008e0:	50000800 	.word	0x50000800
 80008e4:	200000c8 	.word	0x200000c8

080008e8 <display>:

void display() {
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b082      	sub	sp, #8
 80008ec:	af00      	add	r7, sp, #0
  for (uint8_t i = 0; i < 8; i++) {
 80008ee:	1dfb      	adds	r3, r7, #7
 80008f0:	2200      	movs	r2, #0
 80008f2:	701a      	strb	r2, [r3, #0]
 80008f4:	e043      	b.n	800097e <display+0x96>
    LED = 0x00;
 80008f6:	4b26      	ldr	r3, [pc, #152]	; (8000990 <display+0xa8>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	701a      	strb	r2, [r3, #0]

    if (food.x == i) {
 80008fc:	4b25      	ldr	r3, [pc, #148]	; (8000994 <display+0xac>)
 80008fe:	781b      	ldrb	r3, [r3, #0]
 8000900:	1dfa      	adds	r2, r7, #7
 8000902:	7812      	ldrb	r2, [r2, #0]
 8000904:	429a      	cmp	r2, r3
 8000906:	d10d      	bne.n	8000924 <display+0x3c>
      LED |= (1 << food.y);
 8000908:	4b22      	ldr	r3, [pc, #136]	; (8000994 <display+0xac>)
 800090a:	785b      	ldrb	r3, [r3, #1]
 800090c:	001a      	movs	r2, r3
 800090e:	2301      	movs	r3, #1
 8000910:	4093      	lsls	r3, r2
 8000912:	b25a      	sxtb	r2, r3
 8000914:	4b1e      	ldr	r3, [pc, #120]	; (8000990 <display+0xa8>)
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	b25b      	sxtb	r3, r3
 800091a:	4313      	orrs	r3, r2
 800091c:	b25b      	sxtb	r3, r3
 800091e:	b2da      	uxtb	r2, r3
 8000920:	4b1b      	ldr	r3, [pc, #108]	; (8000990 <display+0xa8>)
 8000922:	701a      	strb	r2, [r3, #0]
    }

    dot_t *self = ptr;
 8000924:	4b1c      	ldr	r3, [pc, #112]	; (8000998 <display+0xb0>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	603b      	str	r3, [r7, #0]
    while (self != 0) {
 800092a:	e016      	b.n	800095a <display+0x72>
      if (self->x == i) {
 800092c:	683b      	ldr	r3, [r7, #0]
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	1dfa      	adds	r2, r7, #7
 8000932:	7812      	ldrb	r2, [r2, #0]
 8000934:	429a      	cmp	r2, r3
 8000936:	d10d      	bne.n	8000954 <display+0x6c>
        LED |= (1 << self->y);
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	785b      	ldrb	r3, [r3, #1]
 800093c:	001a      	movs	r2, r3
 800093e:	2301      	movs	r3, #1
 8000940:	4093      	lsls	r3, r2
 8000942:	b25a      	sxtb	r2, r3
 8000944:	4b12      	ldr	r3, [pc, #72]	; (8000990 <display+0xa8>)
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	b25b      	sxtb	r3, r3
 800094a:	4313      	orrs	r3, r2
 800094c:	b25b      	sxtb	r3, r3
 800094e:	b2da      	uxtb	r2, r3
 8000950:	4b0f      	ldr	r3, [pc, #60]	; (8000990 <display+0xa8>)
 8000952:	701a      	strb	r2, [r3, #0]
      }
      self = self->next;
 8000954:	683b      	ldr	r3, [r7, #0]
 8000956:	685b      	ldr	r3, [r3, #4]
 8000958:	603b      	str	r3, [r7, #0]
    while (self != 0) {
 800095a:	683b      	ldr	r3, [r7, #0]
 800095c:	2b00      	cmp	r3, #0
 800095e:	d1e5      	bne.n	800092c <display+0x44>
    }
    max7219(i + 1, LED);
 8000960:	1dfb      	adds	r3, r7, #7
 8000962:	781b      	ldrb	r3, [r3, #0]
 8000964:	3301      	adds	r3, #1
 8000966:	b2da      	uxtb	r2, r3
 8000968:	4b09      	ldr	r3, [pc, #36]	; (8000990 <display+0xa8>)
 800096a:	781b      	ldrb	r3, [r3, #0]
 800096c:	0019      	movs	r1, r3
 800096e:	0010      	movs	r0, r2
 8000970:	f7ff ff90 	bl	8000894 <max7219>
  for (uint8_t i = 0; i < 8; i++) {
 8000974:	1dfb      	adds	r3, r7, #7
 8000976:	781a      	ldrb	r2, [r3, #0]
 8000978:	1dfb      	adds	r3, r7, #7
 800097a:	3201      	adds	r2, #1
 800097c:	701a      	strb	r2, [r3, #0]
 800097e:	1dfb      	adds	r3, r7, #7
 8000980:	781b      	ldrb	r3, [r3, #0]
 8000982:	2b07      	cmp	r3, #7
 8000984:	d9b7      	bls.n	80008f6 <display+0xe>
  }
}
 8000986:	46c0      	nop			; (mov r8, r8)
 8000988:	46c0      	nop			; (mov r8, r8)
 800098a:	46bd      	mov	sp, r7
 800098c:	b002      	add	sp, #8
 800098e:	bd80      	pop	{r7, pc}
 8000990:	20000096 	.word	0x20000096
 8000994:	200000a4 	.word	0x200000a4
 8000998:	20000000 	.word	0x20000000

0800099c <generate_food>:

void generate_food() {
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
  dot_t *self = ptr;
 80009a2:	4b19      	ldr	r3, [pc, #100]	; (8000a08 <generate_food+0x6c>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	607b      	str	r3, [r7, #4]
GEN:
  food.x = HAL_RNG_GetRandomNumber(&hrng) % 8;
 80009a8:	4b18      	ldr	r3, [pc, #96]	; (8000a0c <generate_food+0x70>)
 80009aa:	0018      	movs	r0, r3
 80009ac:	f001 fe29 	bl	8002602 <HAL_RNG_GetRandomNumber>
 80009b0:	0003      	movs	r3, r0
 80009b2:	b2db      	uxtb	r3, r3
 80009b4:	2207      	movs	r2, #7
 80009b6:	4013      	ands	r3, r2
 80009b8:	b2da      	uxtb	r2, r3
 80009ba:	4b15      	ldr	r3, [pc, #84]	; (8000a10 <generate_food+0x74>)
 80009bc:	701a      	strb	r2, [r3, #0]
  food.y = HAL_RNG_GetRandomNumber(&hrng) % 8;
 80009be:	4b13      	ldr	r3, [pc, #76]	; (8000a0c <generate_food+0x70>)
 80009c0:	0018      	movs	r0, r3
 80009c2:	f001 fe1e 	bl	8002602 <HAL_RNG_GetRandomNumber>
 80009c6:	0003      	movs	r3, r0
 80009c8:	b2db      	uxtb	r3, r3
 80009ca:	2207      	movs	r2, #7
 80009cc:	4013      	ands	r3, r2
 80009ce:	b2da      	uxtb	r2, r3
 80009d0:	4b0f      	ldr	r3, [pc, #60]	; (8000a10 <generate_food+0x74>)
 80009d2:	705a      	strb	r2, [r3, #1]

  while (self != 0) {
 80009d4:	e00f      	b.n	80009f6 <generate_food+0x5a>
    if (food.x == self->x && food.y == self->y) {
 80009d6:	4b0e      	ldr	r3, [pc, #56]	; (8000a10 <generate_food+0x74>)
 80009d8:	781a      	ldrb	r2, [r3, #0]
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	781b      	ldrb	r3, [r3, #0]
 80009de:	429a      	cmp	r2, r3
 80009e0:	d106      	bne.n	80009f0 <generate_food+0x54>
 80009e2:	4b0b      	ldr	r3, [pc, #44]	; (8000a10 <generate_food+0x74>)
 80009e4:	785a      	ldrb	r2, [r3, #1]
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	785b      	ldrb	r3, [r3, #1]
 80009ea:	429a      	cmp	r2, r3
 80009ec:	d100      	bne.n	80009f0 <generate_food+0x54>
      goto GEN;
 80009ee:	e7db      	b.n	80009a8 <generate_food+0xc>
    }
    self = self->next;
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	685b      	ldr	r3, [r3, #4]
 80009f4:	607b      	str	r3, [r7, #4]
  while (self != 0) {
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d1ec      	bne.n	80009d6 <generate_food+0x3a>
  }
}
 80009fc:	46c0      	nop			; (mov r8, r8)
 80009fe:	46c0      	nop			; (mov r8, r8)
 8000a00:	46bd      	mov	sp, r7
 8000a02:	b002      	add	sp, #8
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	46c0      	nop			; (mov r8, r8)
 8000a08:	20000000 	.word	0x20000000
 8000a0c:	200000b8 	.word	0x200000b8
 8000a10:	200000a4 	.word	0x200000a4

08000a14 <move>:

void move() {
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b084      	sub	sp, #16
 8000a18:	af00      	add	r7, sp, #0
  switch (direction) {
 8000a1a:	4b58      	ldr	r3, [pc, #352]	; (8000b7c <move+0x168>)
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	2b77      	cmp	r3, #119	; 0x77
 8000a20:	d015      	beq.n	8000a4e <move+0x3a>
 8000a22:	dc22      	bgt.n	8000a6a <move+0x56>
 8000a24:	2b73      	cmp	r3, #115	; 0x73
 8000a26:	d019      	beq.n	8000a5c <move+0x48>
 8000a28:	dc1f      	bgt.n	8000a6a <move+0x56>
 8000a2a:	2b61      	cmp	r3, #97	; 0x61
 8000a2c:	d008      	beq.n	8000a40 <move+0x2c>
 8000a2e:	2b64      	cmp	r3, #100	; 0x64
 8000a30:	d11b      	bne.n	8000a6a <move+0x56>
  case RIGHT:
    dx = 0;
 8000a32:	4b53      	ldr	r3, [pc, #332]	; (8000b80 <move+0x16c>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	701a      	strb	r2, [r3, #0]
    dy = 7;
 8000a38:	4b52      	ldr	r3, [pc, #328]	; (8000b84 <move+0x170>)
 8000a3a:	2207      	movs	r2, #7
 8000a3c:	701a      	strb	r2, [r3, #0]
    break;
 8000a3e:	e015      	b.n	8000a6c <move+0x58>
  case LEFT:
    dx = 0;
 8000a40:	4b4f      	ldr	r3, [pc, #316]	; (8000b80 <move+0x16c>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	701a      	strb	r2, [r3, #0]
    dy = 1;
 8000a46:	4b4f      	ldr	r3, [pc, #316]	; (8000b84 <move+0x170>)
 8000a48:	2201      	movs	r2, #1
 8000a4a:	701a      	strb	r2, [r3, #0]
    break;
 8000a4c:	e00e      	b.n	8000a6c <move+0x58>
  case UP:
    dx = 7;
 8000a4e:	4b4c      	ldr	r3, [pc, #304]	; (8000b80 <move+0x16c>)
 8000a50:	2207      	movs	r2, #7
 8000a52:	701a      	strb	r2, [r3, #0]
    dy = 0;
 8000a54:	4b4b      	ldr	r3, [pc, #300]	; (8000b84 <move+0x170>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	701a      	strb	r2, [r3, #0]
    break;
 8000a5a:	e007      	b.n	8000a6c <move+0x58>
  case DOWN:
    dx = 1;
 8000a5c:	4b48      	ldr	r3, [pc, #288]	; (8000b80 <move+0x16c>)
 8000a5e:	2201      	movs	r2, #1
 8000a60:	701a      	strb	r2, [r3, #0]
    dy = 0;
 8000a62:	4b48      	ldr	r3, [pc, #288]	; (8000b84 <move+0x170>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	701a      	strb	r2, [r3, #0]
    break;
 8000a68:	e000      	b.n	8000a6c <move+0x58>
  default:
    break;
 8000a6a:	46c0      	nop			; (mov r8, r8)
  }

  dot_t *self = ptr;
 8000a6c:	4b46      	ldr	r3, [pc, #280]	; (8000b88 <move+0x174>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	60fb      	str	r3, [r7, #12]

  uint8_t next_x, next_y, last_x, last_y, head_x, head_y;
  next_x = self->x + dx;
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	7819      	ldrb	r1, [r3, #0]
 8000a76:	4b42      	ldr	r3, [pc, #264]	; (8000b80 <move+0x16c>)
 8000a78:	781a      	ldrb	r2, [r3, #0]
 8000a7a:	200b      	movs	r0, #11
 8000a7c:	183b      	adds	r3, r7, r0
 8000a7e:	188a      	adds	r2, r1, r2
 8000a80:	701a      	strb	r2, [r3, #0]
  next_y = self->y + dy;
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	7859      	ldrb	r1, [r3, #1]
 8000a86:	4b3f      	ldr	r3, [pc, #252]	; (8000b84 <move+0x170>)
 8000a88:	781a      	ldrb	r2, [r3, #0]
 8000a8a:	230a      	movs	r3, #10
 8000a8c:	18fb      	adds	r3, r7, r3
 8000a8e:	188a      	adds	r2, r1, r2
 8000a90:	701a      	strb	r2, [r3, #0]

  if (next_x >= 8) next_x -= 8;
 8000a92:	183b      	adds	r3, r7, r0
 8000a94:	781b      	ldrb	r3, [r3, #0]
 8000a96:	2b07      	cmp	r3, #7
 8000a98:	d904      	bls.n	8000aa4 <move+0x90>
 8000a9a:	183b      	adds	r3, r7, r0
 8000a9c:	183a      	adds	r2, r7, r0
 8000a9e:	7812      	ldrb	r2, [r2, #0]
 8000aa0:	3a08      	subs	r2, #8
 8000aa2:	701a      	strb	r2, [r3, #0]

  if (next_y >= 8) next_y -= 8;
 8000aa4:	220a      	movs	r2, #10
 8000aa6:	18bb      	adds	r3, r7, r2
 8000aa8:	781b      	ldrb	r3, [r3, #0]
 8000aaa:	2b07      	cmp	r3, #7
 8000aac:	d904      	bls.n	8000ab8 <move+0xa4>
 8000aae:	18bb      	adds	r3, r7, r2
 8000ab0:	18ba      	adds	r2, r7, r2
 8000ab2:	7812      	ldrb	r2, [r2, #0]
 8000ab4:	3a08      	subs	r2, #8
 8000ab6:	701a      	strb	r2, [r3, #0]

  head_x = next_x, head_y = next_y;
 8000ab8:	2309      	movs	r3, #9
 8000aba:	18fb      	adds	r3, r7, r3
 8000abc:	210b      	movs	r1, #11
 8000abe:	187a      	adds	r2, r7, r1
 8000ac0:	7812      	ldrb	r2, [r2, #0]
 8000ac2:	701a      	strb	r2, [r3, #0]
 8000ac4:	2308      	movs	r3, #8
 8000ac6:	18fb      	adds	r3, r7, r3
 8000ac8:	200a      	movs	r0, #10
 8000aca:	183a      	adds	r2, r7, r0
 8000acc:	7812      	ldrb	r2, [r2, #0]
 8000ace:	701a      	strb	r2, [r3, #0]

  if (next_x == food.x && next_y == food.y) {
 8000ad0:	4b2e      	ldr	r3, [pc, #184]	; (8000b8c <move+0x178>)
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	187a      	adds	r2, r7, r1
 8000ad6:	7812      	ldrb	r2, [r2, #0]
 8000ad8:	429a      	cmp	r2, r3
 8000ada:	d149      	bne.n	8000b70 <move+0x15c>
 8000adc:	4b2b      	ldr	r3, [pc, #172]	; (8000b8c <move+0x178>)
 8000ade:	785b      	ldrb	r3, [r3, #1]
 8000ae0:	183a      	adds	r2, r7, r0
 8000ae2:	7812      	ldrb	r2, [r2, #0]
 8000ae4:	429a      	cmp	r2, r3
 8000ae6:	d143      	bne.n	8000b70 <move+0x15c>
    dot_t *node = make_dot();
 8000ae8:	f000 f85d 	bl	8000ba6 <make_dot>
 8000aec:	0003      	movs	r3, r0
 8000aee:	607b      	str	r3, [r7, #4]
    node->x = food.x, node->y = food.y, node->next = self;
 8000af0:	4b26      	ldr	r3, [pc, #152]	; (8000b8c <move+0x178>)
 8000af2:	781a      	ldrb	r2, [r3, #0]
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	701a      	strb	r2, [r3, #0]
 8000af8:	4b24      	ldr	r3, [pc, #144]	; (8000b8c <move+0x178>)
 8000afa:	785a      	ldrb	r2, [r3, #1]
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	705a      	strb	r2, [r3, #1]
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	68fa      	ldr	r2, [r7, #12]
 8000b04:	605a      	str	r2, [r3, #4]
    ptr = node;
 8000b06:	4b20      	ldr	r3, [pc, #128]	; (8000b88 <move+0x174>)
 8000b08:	687a      	ldr	r2, [r7, #4]
 8000b0a:	601a      	str	r2, [r3, #0]
    generate_food();
 8000b0c:	f7ff ff46 	bl	800099c <generate_food>
    return;
 8000b10:	e031      	b.n	8000b76 <move+0x162>
  }

  while (self != 0) {
    last_x = self->x;
 8000b12:	1cfb      	adds	r3, r7, #3
 8000b14:	68fa      	ldr	r2, [r7, #12]
 8000b16:	7812      	ldrb	r2, [r2, #0]
 8000b18:	701a      	strb	r2, [r3, #0]
    last_y = self->y;
 8000b1a:	1cbb      	adds	r3, r7, #2
 8000b1c:	68fa      	ldr	r2, [r7, #12]
 8000b1e:	7852      	ldrb	r2, [r2, #1]
 8000b20:	701a      	strb	r2, [r3, #0]
    self->x = next_x;
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	210b      	movs	r1, #11
 8000b26:	187a      	adds	r2, r7, r1
 8000b28:	7812      	ldrb	r2, [r2, #0]
 8000b2a:	701a      	strb	r2, [r3, #0]
    self->y = next_y;
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	200a      	movs	r0, #10
 8000b30:	183a      	adds	r2, r7, r0
 8000b32:	7812      	ldrb	r2, [r2, #0]
 8000b34:	705a      	strb	r2, [r3, #1]
    next_x = last_x;
 8000b36:	187b      	adds	r3, r7, r1
 8000b38:	1cfa      	adds	r2, r7, #3
 8000b3a:	7812      	ldrb	r2, [r2, #0]
 8000b3c:	701a      	strb	r2, [r3, #0]
    next_y = last_y;
 8000b3e:	183b      	adds	r3, r7, r0
 8000b40:	1cba      	adds	r2, r7, #2
 8000b42:	7812      	ldrb	r2, [r2, #0]
 8000b44:	701a      	strb	r2, [r3, #0]
    if (head_x == next_x && head_y == next_y) {
 8000b46:	2309      	movs	r3, #9
 8000b48:	18fa      	adds	r2, r7, r3
 8000b4a:	187b      	adds	r3, r7, r1
 8000b4c:	7812      	ldrb	r2, [r2, #0]
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	429a      	cmp	r2, r3
 8000b52:	d10a      	bne.n	8000b6a <move+0x156>
 8000b54:	2308      	movs	r3, #8
 8000b56:	18fa      	adds	r2, r7, r3
 8000b58:	183b      	adds	r3, r7, r0
 8000b5a:	7812      	ldrb	r2, [r2, #0]
 8000b5c:	781b      	ldrb	r3, [r3, #0]
 8000b5e:	429a      	cmp	r2, r3
 8000b60:	d103      	bne.n	8000b6a <move+0x156>
      display();
 8000b62:	f7ff fec1 	bl	80008e8 <display>
      game_over();
 8000b66:	f000 f813 	bl	8000b90 <game_over>
    }
    self = self->next;
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	685b      	ldr	r3, [r3, #4]
 8000b6e:	60fb      	str	r3, [r7, #12]
  while (self != 0) {
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d1cd      	bne.n	8000b12 <move+0xfe>
  }
}
 8000b76:	46bd      	mov	sp, r7
 8000b78:	b004      	add	sp, #16
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	20000005 	.word	0x20000005
 8000b80:	20000004 	.word	0x20000004
 8000b84:	20000094 	.word	0x20000094
 8000b88:	20000000 	.word	0x20000000
 8000b8c:	200000a4 	.word	0x200000a4

08000b90 <game_over>:

void game_over() {
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
  max7219(Shutdown, 0);
 8000b94:	2100      	movs	r1, #0
 8000b96:	200c      	movs	r0, #12
 8000b98:	f7ff fe7c 	bl	8000894 <max7219>
  HAL_NVIC_SystemReset();
 8000b9c:	f000 fb37 	bl	800120e <HAL_NVIC_SystemReset>
}
 8000ba0:	46c0      	nop			; (mov r8, r8)
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}

08000ba6 <make_dot>:

dot_t *make_dot() { return malloc(sizeof(dot_t)); }
 8000ba6:	b580      	push	{r7, lr}
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	2008      	movs	r0, #8
 8000bac:	f003 fc9a 	bl	80044e4 <malloc>
 8000bb0:	0003      	movs	r3, r0
 8000bb2:	0018      	movs	r0, r3
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}

08000bb8 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  disable_key = false;
 8000bc0:	4b24      	ldr	r3, [pc, #144]	; (8000c54 <HAL_UART_RxCpltCallback+0x9c>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	701a      	strb	r2, [r3, #0]
  switch (key) {
 8000bc6:	4b24      	ldr	r3, [pc, #144]	; (8000c58 <HAL_UART_RxCpltCallback+0xa0>)
 8000bc8:	781b      	ldrb	r3, [r3, #0]
 8000bca:	2b77      	cmp	r3, #119	; 0x77
 8000bcc:	d017      	beq.n	8000bfe <HAL_UART_RxCpltCallback+0x46>
 8000bce:	dc26      	bgt.n	8000c1e <HAL_UART_RxCpltCallback+0x66>
 8000bd0:	2b73      	cmp	r3, #115	; 0x73
 8000bd2:	d01c      	beq.n	8000c0e <HAL_UART_RxCpltCallback+0x56>
 8000bd4:	dc23      	bgt.n	8000c1e <HAL_UART_RxCpltCallback+0x66>
 8000bd6:	2b61      	cmp	r3, #97	; 0x61
 8000bd8:	d009      	beq.n	8000bee <HAL_UART_RxCpltCallback+0x36>
 8000bda:	2b64      	cmp	r3, #100	; 0x64
 8000bdc:	d11f      	bne.n	8000c1e <HAL_UART_RxCpltCallback+0x66>
  case RIGHT:
    if (direction == LEFT)
 8000bde:	4b1f      	ldr	r3, [pc, #124]	; (8000c5c <HAL_UART_RxCpltCallback+0xa4>)
 8000be0:	781b      	ldrb	r3, [r3, #0]
 8000be2:	2b61      	cmp	r3, #97	; 0x61
 8000be4:	d11d      	bne.n	8000c22 <HAL_UART_RxCpltCallback+0x6a>
      disable_key = true;
 8000be6:	4b1b      	ldr	r3, [pc, #108]	; (8000c54 <HAL_UART_RxCpltCallback+0x9c>)
 8000be8:	2201      	movs	r2, #1
 8000bea:	701a      	strb	r2, [r3, #0]
    break;
 8000bec:	e019      	b.n	8000c22 <HAL_UART_RxCpltCallback+0x6a>
  case LEFT:
    if (direction == RIGHT)
 8000bee:	4b1b      	ldr	r3, [pc, #108]	; (8000c5c <HAL_UART_RxCpltCallback+0xa4>)
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	2b64      	cmp	r3, #100	; 0x64
 8000bf4:	d117      	bne.n	8000c26 <HAL_UART_RxCpltCallback+0x6e>
      disable_key = true;
 8000bf6:	4b17      	ldr	r3, [pc, #92]	; (8000c54 <HAL_UART_RxCpltCallback+0x9c>)
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	701a      	strb	r2, [r3, #0]
    break;
 8000bfc:	e013      	b.n	8000c26 <HAL_UART_RxCpltCallback+0x6e>
  case UP:
    if (direction == DOWN)
 8000bfe:	4b17      	ldr	r3, [pc, #92]	; (8000c5c <HAL_UART_RxCpltCallback+0xa4>)
 8000c00:	781b      	ldrb	r3, [r3, #0]
 8000c02:	2b73      	cmp	r3, #115	; 0x73
 8000c04:	d111      	bne.n	8000c2a <HAL_UART_RxCpltCallback+0x72>
      disable_key = true;
 8000c06:	4b13      	ldr	r3, [pc, #76]	; (8000c54 <HAL_UART_RxCpltCallback+0x9c>)
 8000c08:	2201      	movs	r2, #1
 8000c0a:	701a      	strb	r2, [r3, #0]
    break;
 8000c0c:	e00d      	b.n	8000c2a <HAL_UART_RxCpltCallback+0x72>
  case DOWN:
    if (direction == UP)
 8000c0e:	4b13      	ldr	r3, [pc, #76]	; (8000c5c <HAL_UART_RxCpltCallback+0xa4>)
 8000c10:	781b      	ldrb	r3, [r3, #0]
 8000c12:	2b77      	cmp	r3, #119	; 0x77
 8000c14:	d10b      	bne.n	8000c2e <HAL_UART_RxCpltCallback+0x76>
      disable_key = true;
 8000c16:	4b0f      	ldr	r3, [pc, #60]	; (8000c54 <HAL_UART_RxCpltCallback+0x9c>)
 8000c18:	2201      	movs	r2, #1
 8000c1a:	701a      	strb	r2, [r3, #0]
    break;
 8000c1c:	e007      	b.n	8000c2e <HAL_UART_RxCpltCallback+0x76>
  default:
    break;
 8000c1e:	46c0      	nop			; (mov r8, r8)
 8000c20:	e006      	b.n	8000c30 <HAL_UART_RxCpltCallback+0x78>
    break;
 8000c22:	46c0      	nop			; (mov r8, r8)
 8000c24:	e004      	b.n	8000c30 <HAL_UART_RxCpltCallback+0x78>
    break;
 8000c26:	46c0      	nop			; (mov r8, r8)
 8000c28:	e002      	b.n	8000c30 <HAL_UART_RxCpltCallback+0x78>
    break;
 8000c2a:	46c0      	nop			; (mov r8, r8)
 8000c2c:	e000      	b.n	8000c30 <HAL_UART_RxCpltCallback+0x78>
    break;
 8000c2e:	46c0      	nop			; (mov r8, r8)
  }
  if (!disable_key)
 8000c30:	4b08      	ldr	r3, [pc, #32]	; (8000c54 <HAL_UART_RxCpltCallback+0x9c>)
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d103      	bne.n	8000c40 <HAL_UART_RxCpltCallback+0x88>
    direction = key;
 8000c38:	4b07      	ldr	r3, [pc, #28]	; (8000c58 <HAL_UART_RxCpltCallback+0xa0>)
 8000c3a:	781a      	ldrb	r2, [r3, #0]
 8000c3c:	4b07      	ldr	r3, [pc, #28]	; (8000c5c <HAL_UART_RxCpltCallback+0xa4>)
 8000c3e:	701a      	strb	r2, [r3, #0]
  HAL_UART_Receive_IT(&huart2, &key, 1);
 8000c40:	4905      	ldr	r1, [pc, #20]	; (8000c58 <HAL_UART_RxCpltCallback+0xa0>)
 8000c42:	4b07      	ldr	r3, [pc, #28]	; (8000c60 <HAL_UART_RxCpltCallback+0xa8>)
 8000c44:	2201      	movs	r2, #1
 8000c46:	0018      	movs	r0, r3
 8000c48:	f002 fbb0 	bl	80033ac <HAL_UART_Receive_IT>
}
 8000c4c:	46c0      	nop			; (mov r8, r8)
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	b002      	add	sp, #8
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	20000095 	.word	0x20000095
 8000c58:	200000b4 	.word	0x200000b4
 8000c5c:	20000005 	.word	0x20000005
 8000c60:	20000160 	.word	0x20000160

08000c64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c68:	b672      	cpsid	i
}
 8000c6a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c6c:	e7fe      	b.n	8000c6c <Error_Handler+0x8>
	...

08000c70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c74:	4b07      	ldr	r3, [pc, #28]	; (8000c94 <HAL_MspInit+0x24>)
 8000c76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c78:	4b06      	ldr	r3, [pc, #24]	; (8000c94 <HAL_MspInit+0x24>)
 8000c7a:	2101      	movs	r1, #1
 8000c7c:	430a      	orrs	r2, r1
 8000c7e:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c80:	4b04      	ldr	r3, [pc, #16]	; (8000c94 <HAL_MspInit+0x24>)
 8000c82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000c84:	4b03      	ldr	r3, [pc, #12]	; (8000c94 <HAL_MspInit+0x24>)
 8000c86:	2180      	movs	r1, #128	; 0x80
 8000c88:	0549      	lsls	r1, r1, #21
 8000c8a:	430a      	orrs	r2, r1
 8000c8c:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c8e:	46c0      	nop			; (mov r8, r8)
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	40021000 	.word	0x40021000

08000c98 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b084      	sub	sp, #16
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a0a      	ldr	r2, [pc, #40]	; (8000cd0 <HAL_RNG_MspInit+0x38>)
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d10d      	bne.n	8000cc6 <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8000caa:	4b0a      	ldr	r3, [pc, #40]	; (8000cd4 <HAL_RNG_MspInit+0x3c>)
 8000cac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000cae:	4b09      	ldr	r3, [pc, #36]	; (8000cd4 <HAL_RNG_MspInit+0x3c>)
 8000cb0:	2180      	movs	r1, #128	; 0x80
 8000cb2:	0349      	lsls	r1, r1, #13
 8000cb4:	430a      	orrs	r2, r1
 8000cb6:	631a      	str	r2, [r3, #48]	; 0x30
 8000cb8:	4b06      	ldr	r3, [pc, #24]	; (8000cd4 <HAL_RNG_MspInit+0x3c>)
 8000cba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000cbc:	2380      	movs	r3, #128	; 0x80
 8000cbe:	035b      	lsls	r3, r3, #13
 8000cc0:	4013      	ands	r3, r2
 8000cc2:	60fb      	str	r3, [r7, #12]
 8000cc4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8000cc6:	46c0      	nop			; (mov r8, r8)
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	b004      	add	sp, #16
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	46c0      	nop			; (mov r8, r8)
 8000cd0:	40025000 	.word	0x40025000
 8000cd4:	40021000 	.word	0x40021000

08000cd8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000cd8:	b590      	push	{r4, r7, lr}
 8000cda:	b089      	sub	sp, #36	; 0x24
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce0:	240c      	movs	r4, #12
 8000ce2:	193b      	adds	r3, r7, r4
 8000ce4:	0018      	movs	r0, r3
 8000ce6:	2314      	movs	r3, #20
 8000ce8:	001a      	movs	r2, r3
 8000cea:	2100      	movs	r1, #0
 8000cec:	f003 fc04 	bl	80044f8 <memset>
  if(hspi->Instance==SPI1)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4a18      	ldr	r2, [pc, #96]	; (8000d58 <HAL_SPI_MspInit+0x80>)
 8000cf6:	4293      	cmp	r3, r2
 8000cf8:	d129      	bne.n	8000d4e <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000cfa:	4b18      	ldr	r3, [pc, #96]	; (8000d5c <HAL_SPI_MspInit+0x84>)
 8000cfc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000cfe:	4b17      	ldr	r3, [pc, #92]	; (8000d5c <HAL_SPI_MspInit+0x84>)
 8000d00:	2180      	movs	r1, #128	; 0x80
 8000d02:	0149      	lsls	r1, r1, #5
 8000d04:	430a      	orrs	r2, r1
 8000d06:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d08:	4b14      	ldr	r3, [pc, #80]	; (8000d5c <HAL_SPI_MspInit+0x84>)
 8000d0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d0c:	4b13      	ldr	r3, [pc, #76]	; (8000d5c <HAL_SPI_MspInit+0x84>)
 8000d0e:	2101      	movs	r1, #1
 8000d10:	430a      	orrs	r2, r1
 8000d12:	62da      	str	r2, [r3, #44]	; 0x2c
 8000d14:	4b11      	ldr	r3, [pc, #68]	; (8000d5c <HAL_SPI_MspInit+0x84>)
 8000d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d18:	2201      	movs	r2, #1
 8000d1a:	4013      	ands	r3, r2
 8000d1c:	60bb      	str	r3, [r7, #8]
 8000d1e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000d20:	0021      	movs	r1, r4
 8000d22:	187b      	adds	r3, r7, r1
 8000d24:	22e0      	movs	r2, #224	; 0xe0
 8000d26:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d28:	187b      	adds	r3, r7, r1
 8000d2a:	2202      	movs	r2, #2
 8000d2c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2e:	187b      	adds	r3, r7, r1
 8000d30:	2200      	movs	r2, #0
 8000d32:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d34:	187b      	adds	r3, r7, r1
 8000d36:	2203      	movs	r2, #3
 8000d38:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000d3a:	187b      	adds	r3, r7, r1
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d40:	187a      	adds	r2, r7, r1
 8000d42:	23a0      	movs	r3, #160	; 0xa0
 8000d44:	05db      	lsls	r3, r3, #23
 8000d46:	0011      	movs	r1, r2
 8000d48:	0018      	movs	r0, r3
 8000d4a:	f000 faf9 	bl	8001340 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000d4e:	46c0      	nop			; (mov r8, r8)
 8000d50:	46bd      	mov	sp, r7
 8000d52:	b009      	add	sp, #36	; 0x24
 8000d54:	bd90      	pop	{r4, r7, pc}
 8000d56:	46c0      	nop			; (mov r8, r8)
 8000d58:	40013000 	.word	0x40013000
 8000d5c:	40021000 	.word	0x40021000

08000d60 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681a      	ldr	r2, [r3, #0]
 8000d6c:	2380      	movs	r3, #128	; 0x80
 8000d6e:	05db      	lsls	r3, r3, #23
 8000d70:	429a      	cmp	r2, r3
 8000d72:	d10d      	bne.n	8000d90 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d74:	4b08      	ldr	r3, [pc, #32]	; (8000d98 <HAL_TIM_Base_MspInit+0x38>)
 8000d76:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000d78:	4b07      	ldr	r3, [pc, #28]	; (8000d98 <HAL_TIM_Base_MspInit+0x38>)
 8000d7a:	2101      	movs	r1, #1
 8000d7c:	430a      	orrs	r2, r1
 8000d7e:	639a      	str	r2, [r3, #56]	; 0x38
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000d80:	2200      	movs	r2, #0
 8000d82:	2100      	movs	r1, #0
 8000d84:	200f      	movs	r0, #15
 8000d86:	f000 fa1d 	bl	80011c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000d8a:	200f      	movs	r0, #15
 8000d8c:	f000 fa2f 	bl	80011ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000d90:	46c0      	nop			; (mov r8, r8)
 8000d92:	46bd      	mov	sp, r7
 8000d94:	b002      	add	sp, #8
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	40021000 	.word	0x40021000

08000d9c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d9c:	b590      	push	{r4, r7, lr}
 8000d9e:	b089      	sub	sp, #36	; 0x24
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da4:	240c      	movs	r4, #12
 8000da6:	193b      	adds	r3, r7, r4
 8000da8:	0018      	movs	r0, r3
 8000daa:	2314      	movs	r3, #20
 8000dac:	001a      	movs	r2, r3
 8000dae:	2100      	movs	r1, #0
 8000db0:	f003 fba2 	bl	80044f8 <memset>
  if(huart->Instance==USART2)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4a1c      	ldr	r2, [pc, #112]	; (8000e2c <HAL_UART_MspInit+0x90>)
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d131      	bne.n	8000e22 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000dbe:	4b1c      	ldr	r3, [pc, #112]	; (8000e30 <HAL_UART_MspInit+0x94>)
 8000dc0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000dc2:	4b1b      	ldr	r3, [pc, #108]	; (8000e30 <HAL_UART_MspInit+0x94>)
 8000dc4:	2180      	movs	r1, #128	; 0x80
 8000dc6:	0289      	lsls	r1, r1, #10
 8000dc8:	430a      	orrs	r2, r1
 8000dca:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dcc:	4b18      	ldr	r3, [pc, #96]	; (8000e30 <HAL_UART_MspInit+0x94>)
 8000dce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000dd0:	4b17      	ldr	r3, [pc, #92]	; (8000e30 <HAL_UART_MspInit+0x94>)
 8000dd2:	2101      	movs	r1, #1
 8000dd4:	430a      	orrs	r2, r1
 8000dd6:	62da      	str	r2, [r3, #44]	; 0x2c
 8000dd8:	4b15      	ldr	r3, [pc, #84]	; (8000e30 <HAL_UART_MspInit+0x94>)
 8000dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ddc:	2201      	movs	r2, #1
 8000dde:	4013      	ands	r3, r2
 8000de0:	60bb      	str	r3, [r7, #8]
 8000de2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000de4:	0021      	movs	r1, r4
 8000de6:	187b      	adds	r3, r7, r1
 8000de8:	220c      	movs	r2, #12
 8000dea:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dec:	187b      	adds	r3, r7, r1
 8000dee:	2202      	movs	r2, #2
 8000df0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df2:	187b      	adds	r3, r7, r1
 8000df4:	2200      	movs	r2, #0
 8000df6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000df8:	187b      	adds	r3, r7, r1
 8000dfa:	2203      	movs	r2, #3
 8000dfc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8000dfe:	187b      	adds	r3, r7, r1
 8000e00:	2204      	movs	r2, #4
 8000e02:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e04:	187a      	adds	r2, r7, r1
 8000e06:	23a0      	movs	r3, #160	; 0xa0
 8000e08:	05db      	lsls	r3, r3, #23
 8000e0a:	0011      	movs	r1, r2
 8000e0c:	0018      	movs	r0, r3
 8000e0e:	f000 fa97 	bl	8001340 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000e12:	2200      	movs	r2, #0
 8000e14:	2100      	movs	r1, #0
 8000e16:	201c      	movs	r0, #28
 8000e18:	f000 f9d4 	bl	80011c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000e1c:	201c      	movs	r0, #28
 8000e1e:	f000 f9e6 	bl	80011ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e22:	46c0      	nop			; (mov r8, r8)
 8000e24:	46bd      	mov	sp, r7
 8000e26:	b009      	add	sp, #36	; 0x24
 8000e28:	bd90      	pop	{r4, r7, pc}
 8000e2a:	46c0      	nop			; (mov r8, r8)
 8000e2c:	40004400 	.word	0x40004400
 8000e30:	40021000 	.word	0x40021000

08000e34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e38:	e7fe      	b.n	8000e38 <NMI_Handler+0x4>

08000e3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e3a:	b580      	push	{r7, lr}
 8000e3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e3e:	e7fe      	b.n	8000e3e <HardFault_Handler+0x4>

08000e40 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000e44:	46c0      	nop			; (mov r8, r8)
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}

08000e4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e4a:	b580      	push	{r7, lr}
 8000e4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e4e:	46c0      	nop			; (mov r8, r8)
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}

08000e54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e58:	f000 f8da 	bl	8001010 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e5c:	46c0      	nop			; (mov r8, r8)
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
	...

08000e64 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
  move();
 8000e68:	f7ff fdd4 	bl	8000a14 <move>
  display();
 8000e6c:	f7ff fd3c 	bl	80008e8 <display>
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000e70:	4b03      	ldr	r3, [pc, #12]	; (8000e80 <TIM2_IRQHandler+0x1c>)
 8000e72:	0018      	movs	r0, r3
 8000e74:	f001 ff26 	bl	8002cc4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000e78:	46c0      	nop			; (mov r8, r8)
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	46c0      	nop			; (mov r8, r8)
 8000e80:	20000120 	.word	0x20000120

08000e84 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000e88:	4b03      	ldr	r3, [pc, #12]	; (8000e98 <USART2_IRQHandler+0x14>)
 8000e8a:	0018      	movs	r0, r3
 8000e8c:	f002 fae6 	bl	800345c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000e90:	46c0      	nop			; (mov r8, r8)
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	46c0      	nop			; (mov r8, r8)
 8000e98:	20000160 	.word	0x20000160

08000e9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b086      	sub	sp, #24
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ea4:	4a14      	ldr	r2, [pc, #80]	; (8000ef8 <_sbrk+0x5c>)
 8000ea6:	4b15      	ldr	r3, [pc, #84]	; (8000efc <_sbrk+0x60>)
 8000ea8:	1ad3      	subs	r3, r2, r3
 8000eaa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000eb0:	4b13      	ldr	r3, [pc, #76]	; (8000f00 <_sbrk+0x64>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d102      	bne.n	8000ebe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000eb8:	4b11      	ldr	r3, [pc, #68]	; (8000f00 <_sbrk+0x64>)
 8000eba:	4a12      	ldr	r2, [pc, #72]	; (8000f04 <_sbrk+0x68>)
 8000ebc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ebe:	4b10      	ldr	r3, [pc, #64]	; (8000f00 <_sbrk+0x64>)
 8000ec0:	681a      	ldr	r2, [r3, #0]
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	18d3      	adds	r3, r2, r3
 8000ec6:	693a      	ldr	r2, [r7, #16]
 8000ec8:	429a      	cmp	r2, r3
 8000eca:	d207      	bcs.n	8000edc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ecc:	f003 fae0 	bl	8004490 <__errno>
 8000ed0:	0003      	movs	r3, r0
 8000ed2:	220c      	movs	r2, #12
 8000ed4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	425b      	negs	r3, r3
 8000eda:	e009      	b.n	8000ef0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000edc:	4b08      	ldr	r3, [pc, #32]	; (8000f00 <_sbrk+0x64>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ee2:	4b07      	ldr	r3, [pc, #28]	; (8000f00 <_sbrk+0x64>)
 8000ee4:	681a      	ldr	r2, [r3, #0]
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	18d2      	adds	r2, r2, r3
 8000eea:	4b05      	ldr	r3, [pc, #20]	; (8000f00 <_sbrk+0x64>)
 8000eec:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000eee:	68fb      	ldr	r3, [r7, #12]
}
 8000ef0:	0018      	movs	r0, r3
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	b006      	add	sp, #24
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	20002000 	.word	0x20002000
 8000efc:	00000400 	.word	0x00000400
 8000f00:	20000098 	.word	0x20000098
 8000f04:	200001f8 	.word	0x200001f8

08000f08 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f0c:	46c0      	nop			; (mov r8, r8)
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
	...

08000f14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8000f14:	480d      	ldr	r0, [pc, #52]	; (8000f4c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f16:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f18:	480d      	ldr	r0, [pc, #52]	; (8000f50 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f1a:	490e      	ldr	r1, [pc, #56]	; (8000f54 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f1c:	4a0e      	ldr	r2, [pc, #56]	; (8000f58 <LoopForever+0xe>)
  movs r3, #0
 8000f1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f20:	e002      	b.n	8000f28 <LoopCopyDataInit>

08000f22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f26:	3304      	adds	r3, #4

08000f28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f2c:	d3f9      	bcc.n	8000f22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f2e:	4a0b      	ldr	r2, [pc, #44]	; (8000f5c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f30:	4c0b      	ldr	r4, [pc, #44]	; (8000f60 <LoopForever+0x16>)
  movs r3, #0
 8000f32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f34:	e001      	b.n	8000f3a <LoopFillZerobss>

08000f36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f38:	3204      	adds	r2, #4

08000f3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f3c:	d3fb      	bcc.n	8000f36 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000f3e:	f7ff ffe3 	bl	8000f08 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f42:	f003 faab 	bl	800449c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f46:	f7ff faa9 	bl	800049c <main>

08000f4a <LoopForever>:

LoopForever:
    b LoopForever
 8000f4a:	e7fe      	b.n	8000f4a <LoopForever>
  ldr   r0, =_estack
 8000f4c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000f50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f54:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000f58:	080046a0 	.word	0x080046a0
  ldr r2, =_sbss
 8000f5c:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000f60:	200001f8 	.word	0x200001f8

08000f64 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f64:	e7fe      	b.n	8000f64 <ADC1_COMP_IRQHandler>
	...

08000f68 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f6e:	1dfb      	adds	r3, r7, #7
 8000f70:	2200      	movs	r2, #0
 8000f72:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000f74:	4b0b      	ldr	r3, [pc, #44]	; (8000fa4 <HAL_Init+0x3c>)
 8000f76:	681a      	ldr	r2, [r3, #0]
 8000f78:	4b0a      	ldr	r3, [pc, #40]	; (8000fa4 <HAL_Init+0x3c>)
 8000f7a:	2140      	movs	r1, #64	; 0x40
 8000f7c:	430a      	orrs	r2, r1
 8000f7e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f80:	2000      	movs	r0, #0
 8000f82:	f000 f811 	bl	8000fa8 <HAL_InitTick>
 8000f86:	1e03      	subs	r3, r0, #0
 8000f88:	d003      	beq.n	8000f92 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000f8a:	1dfb      	adds	r3, r7, #7
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	701a      	strb	r2, [r3, #0]
 8000f90:	e001      	b.n	8000f96 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f92:	f7ff fe6d 	bl	8000c70 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f96:	1dfb      	adds	r3, r7, #7
 8000f98:	781b      	ldrb	r3, [r3, #0]
}
 8000f9a:	0018      	movs	r0, r3
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	b002      	add	sp, #8
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	46c0      	nop			; (mov r8, r8)
 8000fa4:	40022000 	.word	0x40022000

08000fa8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fa8:	b590      	push	{r4, r7, lr}
 8000faa:	b083      	sub	sp, #12
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fb0:	4b14      	ldr	r3, [pc, #80]	; (8001004 <HAL_InitTick+0x5c>)
 8000fb2:	681c      	ldr	r4, [r3, #0]
 8000fb4:	4b14      	ldr	r3, [pc, #80]	; (8001008 <HAL_InitTick+0x60>)
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	0019      	movs	r1, r3
 8000fba:	23fa      	movs	r3, #250	; 0xfa
 8000fbc:	0098      	lsls	r0, r3, #2
 8000fbe:	f7ff f8a3 	bl	8000108 <__udivsi3>
 8000fc2:	0003      	movs	r3, r0
 8000fc4:	0019      	movs	r1, r3
 8000fc6:	0020      	movs	r0, r4
 8000fc8:	f7ff f89e 	bl	8000108 <__udivsi3>
 8000fcc:	0003      	movs	r3, r0
 8000fce:	0018      	movs	r0, r3
 8000fd0:	f000 f921 	bl	8001216 <HAL_SYSTICK_Config>
 8000fd4:	1e03      	subs	r3, r0, #0
 8000fd6:	d001      	beq.n	8000fdc <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	e00f      	b.n	8000ffc <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	2b03      	cmp	r3, #3
 8000fe0:	d80b      	bhi.n	8000ffa <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fe2:	6879      	ldr	r1, [r7, #4]
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	425b      	negs	r3, r3
 8000fe8:	2200      	movs	r2, #0
 8000fea:	0018      	movs	r0, r3
 8000fec:	f000 f8ea 	bl	80011c4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ff0:	4b06      	ldr	r3, [pc, #24]	; (800100c <HAL_InitTick+0x64>)
 8000ff2:	687a      	ldr	r2, [r7, #4]
 8000ff4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	e000      	b.n	8000ffc <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000ffa:	2301      	movs	r3, #1
}
 8000ffc:	0018      	movs	r0, r3
 8000ffe:	46bd      	mov	sp, r7
 8001000:	b003      	add	sp, #12
 8001002:	bd90      	pop	{r4, r7, pc}
 8001004:	20000008 	.word	0x20000008
 8001008:	20000010 	.word	0x20000010
 800100c:	2000000c 	.word	0x2000000c

08001010 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001014:	4b05      	ldr	r3, [pc, #20]	; (800102c <HAL_IncTick+0x1c>)
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	001a      	movs	r2, r3
 800101a:	4b05      	ldr	r3, [pc, #20]	; (8001030 <HAL_IncTick+0x20>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	18d2      	adds	r2, r2, r3
 8001020:	4b03      	ldr	r3, [pc, #12]	; (8001030 <HAL_IncTick+0x20>)
 8001022:	601a      	str	r2, [r3, #0]
}
 8001024:	46c0      	nop			; (mov r8, r8)
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	46c0      	nop			; (mov r8, r8)
 800102c:	20000010 	.word	0x20000010
 8001030:	200001e4 	.word	0x200001e4

08001034 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
  return uwTick;
 8001038:	4b02      	ldr	r3, [pc, #8]	; (8001044 <HAL_GetTick+0x10>)
 800103a:	681b      	ldr	r3, [r3, #0]
}
 800103c:	0018      	movs	r0, r3
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	46c0      	nop			; (mov r8, r8)
 8001044:	200001e4 	.word	0x200001e4

08001048 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	0002      	movs	r2, r0
 8001050:	1dfb      	adds	r3, r7, #7
 8001052:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001054:	1dfb      	adds	r3, r7, #7
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	2b7f      	cmp	r3, #127	; 0x7f
 800105a:	d809      	bhi.n	8001070 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800105c:	1dfb      	adds	r3, r7, #7
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	001a      	movs	r2, r3
 8001062:	231f      	movs	r3, #31
 8001064:	401a      	ands	r2, r3
 8001066:	4b04      	ldr	r3, [pc, #16]	; (8001078 <__NVIC_EnableIRQ+0x30>)
 8001068:	2101      	movs	r1, #1
 800106a:	4091      	lsls	r1, r2
 800106c:	000a      	movs	r2, r1
 800106e:	601a      	str	r2, [r3, #0]
  }
}
 8001070:	46c0      	nop			; (mov r8, r8)
 8001072:	46bd      	mov	sp, r7
 8001074:	b002      	add	sp, #8
 8001076:	bd80      	pop	{r7, pc}
 8001078:	e000e100 	.word	0xe000e100

0800107c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800107c:	b590      	push	{r4, r7, lr}
 800107e:	b083      	sub	sp, #12
 8001080:	af00      	add	r7, sp, #0
 8001082:	0002      	movs	r2, r0
 8001084:	6039      	str	r1, [r7, #0]
 8001086:	1dfb      	adds	r3, r7, #7
 8001088:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800108a:	1dfb      	adds	r3, r7, #7
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	2b7f      	cmp	r3, #127	; 0x7f
 8001090:	d828      	bhi.n	80010e4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001092:	4a2f      	ldr	r2, [pc, #188]	; (8001150 <__NVIC_SetPriority+0xd4>)
 8001094:	1dfb      	adds	r3, r7, #7
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	b25b      	sxtb	r3, r3
 800109a:	089b      	lsrs	r3, r3, #2
 800109c:	33c0      	adds	r3, #192	; 0xc0
 800109e:	009b      	lsls	r3, r3, #2
 80010a0:	589b      	ldr	r3, [r3, r2]
 80010a2:	1dfa      	adds	r2, r7, #7
 80010a4:	7812      	ldrb	r2, [r2, #0]
 80010a6:	0011      	movs	r1, r2
 80010a8:	2203      	movs	r2, #3
 80010aa:	400a      	ands	r2, r1
 80010ac:	00d2      	lsls	r2, r2, #3
 80010ae:	21ff      	movs	r1, #255	; 0xff
 80010b0:	4091      	lsls	r1, r2
 80010b2:	000a      	movs	r2, r1
 80010b4:	43d2      	mvns	r2, r2
 80010b6:	401a      	ands	r2, r3
 80010b8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	019b      	lsls	r3, r3, #6
 80010be:	22ff      	movs	r2, #255	; 0xff
 80010c0:	401a      	ands	r2, r3
 80010c2:	1dfb      	adds	r3, r7, #7
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	0018      	movs	r0, r3
 80010c8:	2303      	movs	r3, #3
 80010ca:	4003      	ands	r3, r0
 80010cc:	00db      	lsls	r3, r3, #3
 80010ce:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010d0:	481f      	ldr	r0, [pc, #124]	; (8001150 <__NVIC_SetPriority+0xd4>)
 80010d2:	1dfb      	adds	r3, r7, #7
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	b25b      	sxtb	r3, r3
 80010d8:	089b      	lsrs	r3, r3, #2
 80010da:	430a      	orrs	r2, r1
 80010dc:	33c0      	adds	r3, #192	; 0xc0
 80010de:	009b      	lsls	r3, r3, #2
 80010e0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80010e2:	e031      	b.n	8001148 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010e4:	4a1b      	ldr	r2, [pc, #108]	; (8001154 <__NVIC_SetPriority+0xd8>)
 80010e6:	1dfb      	adds	r3, r7, #7
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	0019      	movs	r1, r3
 80010ec:	230f      	movs	r3, #15
 80010ee:	400b      	ands	r3, r1
 80010f0:	3b08      	subs	r3, #8
 80010f2:	089b      	lsrs	r3, r3, #2
 80010f4:	3306      	adds	r3, #6
 80010f6:	009b      	lsls	r3, r3, #2
 80010f8:	18d3      	adds	r3, r2, r3
 80010fa:	3304      	adds	r3, #4
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	1dfa      	adds	r2, r7, #7
 8001100:	7812      	ldrb	r2, [r2, #0]
 8001102:	0011      	movs	r1, r2
 8001104:	2203      	movs	r2, #3
 8001106:	400a      	ands	r2, r1
 8001108:	00d2      	lsls	r2, r2, #3
 800110a:	21ff      	movs	r1, #255	; 0xff
 800110c:	4091      	lsls	r1, r2
 800110e:	000a      	movs	r2, r1
 8001110:	43d2      	mvns	r2, r2
 8001112:	401a      	ands	r2, r3
 8001114:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	019b      	lsls	r3, r3, #6
 800111a:	22ff      	movs	r2, #255	; 0xff
 800111c:	401a      	ands	r2, r3
 800111e:	1dfb      	adds	r3, r7, #7
 8001120:	781b      	ldrb	r3, [r3, #0]
 8001122:	0018      	movs	r0, r3
 8001124:	2303      	movs	r3, #3
 8001126:	4003      	ands	r3, r0
 8001128:	00db      	lsls	r3, r3, #3
 800112a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800112c:	4809      	ldr	r0, [pc, #36]	; (8001154 <__NVIC_SetPriority+0xd8>)
 800112e:	1dfb      	adds	r3, r7, #7
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	001c      	movs	r4, r3
 8001134:	230f      	movs	r3, #15
 8001136:	4023      	ands	r3, r4
 8001138:	3b08      	subs	r3, #8
 800113a:	089b      	lsrs	r3, r3, #2
 800113c:	430a      	orrs	r2, r1
 800113e:	3306      	adds	r3, #6
 8001140:	009b      	lsls	r3, r3, #2
 8001142:	18c3      	adds	r3, r0, r3
 8001144:	3304      	adds	r3, #4
 8001146:	601a      	str	r2, [r3, #0]
}
 8001148:	46c0      	nop			; (mov r8, r8)
 800114a:	46bd      	mov	sp, r7
 800114c:	b003      	add	sp, #12
 800114e:	bd90      	pop	{r4, r7, pc}
 8001150:	e000e100 	.word	0xe000e100
 8001154:	e000ed00 	.word	0xe000ed00

08001158 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800115c:	f3bf 8f4f 	dsb	sy
}
 8001160:	46c0      	nop			; (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001162:	4b04      	ldr	r3, [pc, #16]	; (8001174 <__NVIC_SystemReset+0x1c>)
 8001164:	4a04      	ldr	r2, [pc, #16]	; (8001178 <__NVIC_SystemReset+0x20>)
 8001166:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001168:	f3bf 8f4f 	dsb	sy
}
 800116c:	46c0      	nop			; (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800116e:	46c0      	nop			; (mov r8, r8)
 8001170:	e7fd      	b.n	800116e <__NVIC_SystemReset+0x16>
 8001172:	46c0      	nop			; (mov r8, r8)
 8001174:	e000ed00 	.word	0xe000ed00
 8001178:	05fa0004 	.word	0x05fa0004

0800117c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	1e5a      	subs	r2, r3, #1
 8001188:	2380      	movs	r3, #128	; 0x80
 800118a:	045b      	lsls	r3, r3, #17
 800118c:	429a      	cmp	r2, r3
 800118e:	d301      	bcc.n	8001194 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001190:	2301      	movs	r3, #1
 8001192:	e010      	b.n	80011b6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001194:	4b0a      	ldr	r3, [pc, #40]	; (80011c0 <SysTick_Config+0x44>)
 8001196:	687a      	ldr	r2, [r7, #4]
 8001198:	3a01      	subs	r2, #1
 800119a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800119c:	2301      	movs	r3, #1
 800119e:	425b      	negs	r3, r3
 80011a0:	2103      	movs	r1, #3
 80011a2:	0018      	movs	r0, r3
 80011a4:	f7ff ff6a 	bl	800107c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011a8:	4b05      	ldr	r3, [pc, #20]	; (80011c0 <SysTick_Config+0x44>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011ae:	4b04      	ldr	r3, [pc, #16]	; (80011c0 <SysTick_Config+0x44>)
 80011b0:	2207      	movs	r2, #7
 80011b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011b4:	2300      	movs	r3, #0
}
 80011b6:	0018      	movs	r0, r3
 80011b8:	46bd      	mov	sp, r7
 80011ba:	b002      	add	sp, #8
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	46c0      	nop			; (mov r8, r8)
 80011c0:	e000e010 	.word	0xe000e010

080011c4 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b084      	sub	sp, #16
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	60b9      	str	r1, [r7, #8]
 80011cc:	607a      	str	r2, [r7, #4]
 80011ce:	210f      	movs	r1, #15
 80011d0:	187b      	adds	r3, r7, r1
 80011d2:	1c02      	adds	r2, r0, #0
 80011d4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80011d6:	68ba      	ldr	r2, [r7, #8]
 80011d8:	187b      	adds	r3, r7, r1
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	b25b      	sxtb	r3, r3
 80011de:	0011      	movs	r1, r2
 80011e0:	0018      	movs	r0, r3
 80011e2:	f7ff ff4b 	bl	800107c <__NVIC_SetPriority>
}
 80011e6:	46c0      	nop			; (mov r8, r8)
 80011e8:	46bd      	mov	sp, r7
 80011ea:	b004      	add	sp, #16
 80011ec:	bd80      	pop	{r7, pc}

080011ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011ee:	b580      	push	{r7, lr}
 80011f0:	b082      	sub	sp, #8
 80011f2:	af00      	add	r7, sp, #0
 80011f4:	0002      	movs	r2, r0
 80011f6:	1dfb      	adds	r3, r7, #7
 80011f8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011fa:	1dfb      	adds	r3, r7, #7
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	b25b      	sxtb	r3, r3
 8001200:	0018      	movs	r0, r3
 8001202:	f7ff ff21 	bl	8001048 <__NVIC_EnableIRQ>
}
 8001206:	46c0      	nop			; (mov r8, r8)
 8001208:	46bd      	mov	sp, r7
 800120a:	b002      	add	sp, #8
 800120c:	bd80      	pop	{r7, pc}

0800120e <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800120e:	b580      	push	{r7, lr}
 8001210:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8001212:	f7ff ffa1 	bl	8001158 <__NVIC_SystemReset>

08001216 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001216:	b580      	push	{r7, lr}
 8001218:	b082      	sub	sp, #8
 800121a:	af00      	add	r7, sp, #0
 800121c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	0018      	movs	r0, r3
 8001222:	f7ff ffab 	bl	800117c <SysTick_Config>
 8001226:	0003      	movs	r3, r0
}
 8001228:	0018      	movs	r0, r3
 800122a:	46bd      	mov	sp, r7
 800122c:	b002      	add	sp, #8
 800122e:	bd80      	pop	{r7, pc}

08001230 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b084      	sub	sp, #16
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001238:	230f      	movs	r3, #15
 800123a:	18fb      	adds	r3, r7, r3
 800123c:	2200      	movs	r2, #0
 800123e:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2225      	movs	r2, #37	; 0x25
 8001244:	5c9b      	ldrb	r3, [r3, r2]
 8001246:	b2db      	uxtb	r3, r3
 8001248:	2b02      	cmp	r3, #2
 800124a:	d008      	beq.n	800125e <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2204      	movs	r2, #4
 8001250:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2224      	movs	r2, #36	; 0x24
 8001256:	2100      	movs	r1, #0
 8001258:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800125a:	2301      	movs	r3, #1
 800125c:	e024      	b.n	80012a8 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	681a      	ldr	r2, [r3, #0]
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	210e      	movs	r1, #14
 800126a:	438a      	bics	r2, r1
 800126c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	681a      	ldr	r2, [r3, #0]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	2101      	movs	r1, #1
 800127a:	438a      	bics	r2, r1
 800127c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001282:	221c      	movs	r2, #28
 8001284:	401a      	ands	r2, r3
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128a:	2101      	movs	r1, #1
 800128c:	4091      	lsls	r1, r2
 800128e:	000a      	movs	r2, r1
 8001290:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2225      	movs	r2, #37	; 0x25
 8001296:	2101      	movs	r1, #1
 8001298:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	2224      	movs	r2, #36	; 0x24
 800129e:	2100      	movs	r1, #0
 80012a0:	5499      	strb	r1, [r3, r2]

    return status;
 80012a2:	230f      	movs	r3, #15
 80012a4:	18fb      	adds	r3, r7, r3
 80012a6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80012a8:	0018      	movs	r0, r3
 80012aa:	46bd      	mov	sp, r7
 80012ac:	b004      	add	sp, #16
 80012ae:	bd80      	pop	{r7, pc}

080012b0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b084      	sub	sp, #16
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80012b8:	210f      	movs	r1, #15
 80012ba:	187b      	adds	r3, r7, r1
 80012bc:	2200      	movs	r2, #0
 80012be:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2225      	movs	r2, #37	; 0x25
 80012c4:	5c9b      	ldrb	r3, [r3, r2]
 80012c6:	b2db      	uxtb	r3, r3
 80012c8:	2b02      	cmp	r3, #2
 80012ca:	d006      	beq.n	80012da <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2204      	movs	r2, #4
 80012d0:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80012d2:	187b      	adds	r3, r7, r1
 80012d4:	2201      	movs	r2, #1
 80012d6:	701a      	strb	r2, [r3, #0]
 80012d8:	e02a      	b.n	8001330 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	681a      	ldr	r2, [r3, #0]
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	210e      	movs	r1, #14
 80012e6:	438a      	bics	r2, r1
 80012e8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	681a      	ldr	r2, [r3, #0]
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	2101      	movs	r1, #1
 80012f6:	438a      	bics	r2, r1
 80012f8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012fe:	221c      	movs	r2, #28
 8001300:	401a      	ands	r2, r3
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001306:	2101      	movs	r1, #1
 8001308:	4091      	lsls	r1, r2
 800130a:	000a      	movs	r2, r1
 800130c:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2225      	movs	r2, #37	; 0x25
 8001312:	2101      	movs	r1, #1
 8001314:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	2224      	movs	r2, #36	; 0x24
 800131a:	2100      	movs	r1, #0
 800131c:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001322:	2b00      	cmp	r3, #0
 8001324:	d004      	beq.n	8001330 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800132a:	687a      	ldr	r2, [r7, #4]
 800132c:	0010      	movs	r0, r2
 800132e:	4798      	blx	r3
    }
  }
  return status;
 8001330:	230f      	movs	r3, #15
 8001332:	18fb      	adds	r3, r7, r3
 8001334:	781b      	ldrb	r3, [r3, #0]
}
 8001336:	0018      	movs	r0, r3
 8001338:	46bd      	mov	sp, r7
 800133a:	b004      	add	sp, #16
 800133c:	bd80      	pop	{r7, pc}
	...

08001340 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b086      	sub	sp, #24
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
 8001348:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800134a:	2300      	movs	r3, #0
 800134c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800134e:	2300      	movs	r3, #0
 8001350:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001352:	2300      	movs	r3, #0
 8001354:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001356:	e14f      	b.n	80015f8 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	2101      	movs	r1, #1
 800135e:	697a      	ldr	r2, [r7, #20]
 8001360:	4091      	lsls	r1, r2
 8001362:	000a      	movs	r2, r1
 8001364:	4013      	ands	r3, r2
 8001366:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d100      	bne.n	8001370 <HAL_GPIO_Init+0x30>
 800136e:	e140      	b.n	80015f2 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	2b01      	cmp	r3, #1
 8001376:	d00b      	beq.n	8001390 <HAL_GPIO_Init+0x50>
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	2b02      	cmp	r3, #2
 800137e:	d007      	beq.n	8001390 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001384:	2b11      	cmp	r3, #17
 8001386:	d003      	beq.n	8001390 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	2b12      	cmp	r3, #18
 800138e:	d130      	bne.n	80013f2 <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	689b      	ldr	r3, [r3, #8]
 8001394:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	005b      	lsls	r3, r3, #1
 800139a:	2203      	movs	r2, #3
 800139c:	409a      	lsls	r2, r3
 800139e:	0013      	movs	r3, r2
 80013a0:	43da      	mvns	r2, r3
 80013a2:	693b      	ldr	r3, [r7, #16]
 80013a4:	4013      	ands	r3, r2
 80013a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	68da      	ldr	r2, [r3, #12]
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	005b      	lsls	r3, r3, #1
 80013b0:	409a      	lsls	r2, r3
 80013b2:	0013      	movs	r3, r2
 80013b4:	693a      	ldr	r2, [r7, #16]
 80013b6:	4313      	orrs	r3, r2
 80013b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	693a      	ldr	r2, [r7, #16]
 80013be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013c6:	2201      	movs	r2, #1
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	409a      	lsls	r2, r3
 80013cc:	0013      	movs	r3, r2
 80013ce:	43da      	mvns	r2, r3
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	4013      	ands	r3, r2
 80013d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	091b      	lsrs	r3, r3, #4
 80013dc:	2201      	movs	r2, #1
 80013de:	401a      	ands	r2, r3
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	409a      	lsls	r2, r3
 80013e4:	0013      	movs	r3, r2
 80013e6:	693a      	ldr	r2, [r7, #16]
 80013e8:	4313      	orrs	r3, r2
 80013ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	693a      	ldr	r2, [r7, #16]
 80013f0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	68db      	ldr	r3, [r3, #12]
 80013f6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	005b      	lsls	r3, r3, #1
 80013fc:	2203      	movs	r2, #3
 80013fe:	409a      	lsls	r2, r3
 8001400:	0013      	movs	r3, r2
 8001402:	43da      	mvns	r2, r3
 8001404:	693b      	ldr	r3, [r7, #16]
 8001406:	4013      	ands	r3, r2
 8001408:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	689a      	ldr	r2, [r3, #8]
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	005b      	lsls	r3, r3, #1
 8001412:	409a      	lsls	r2, r3
 8001414:	0013      	movs	r3, r2
 8001416:	693a      	ldr	r2, [r7, #16]
 8001418:	4313      	orrs	r3, r2
 800141a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	693a      	ldr	r2, [r7, #16]
 8001420:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	2b02      	cmp	r3, #2
 8001428:	d003      	beq.n	8001432 <HAL_GPIO_Init+0xf2>
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	2b12      	cmp	r3, #18
 8001430:	d123      	bne.n	800147a <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	08da      	lsrs	r2, r3, #3
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	3208      	adds	r2, #8
 800143a:	0092      	lsls	r2, r2, #2
 800143c:	58d3      	ldr	r3, [r2, r3]
 800143e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	2207      	movs	r2, #7
 8001444:	4013      	ands	r3, r2
 8001446:	009b      	lsls	r3, r3, #2
 8001448:	220f      	movs	r2, #15
 800144a:	409a      	lsls	r2, r3
 800144c:	0013      	movs	r3, r2
 800144e:	43da      	mvns	r2, r3
 8001450:	693b      	ldr	r3, [r7, #16]
 8001452:	4013      	ands	r3, r2
 8001454:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	691a      	ldr	r2, [r3, #16]
 800145a:	697b      	ldr	r3, [r7, #20]
 800145c:	2107      	movs	r1, #7
 800145e:	400b      	ands	r3, r1
 8001460:	009b      	lsls	r3, r3, #2
 8001462:	409a      	lsls	r2, r3
 8001464:	0013      	movs	r3, r2
 8001466:	693a      	ldr	r2, [r7, #16]
 8001468:	4313      	orrs	r3, r2
 800146a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	08da      	lsrs	r2, r3, #3
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	3208      	adds	r2, #8
 8001474:	0092      	lsls	r2, r2, #2
 8001476:	6939      	ldr	r1, [r7, #16]
 8001478:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	005b      	lsls	r3, r3, #1
 8001484:	2203      	movs	r2, #3
 8001486:	409a      	lsls	r2, r3
 8001488:	0013      	movs	r3, r2
 800148a:	43da      	mvns	r2, r3
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	4013      	ands	r3, r2
 8001490:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	2203      	movs	r2, #3
 8001498:	401a      	ands	r2, r3
 800149a:	697b      	ldr	r3, [r7, #20]
 800149c:	005b      	lsls	r3, r3, #1
 800149e:	409a      	lsls	r2, r3
 80014a0:	0013      	movs	r3, r2
 80014a2:	693a      	ldr	r2, [r7, #16]
 80014a4:	4313      	orrs	r3, r2
 80014a6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	693a      	ldr	r2, [r7, #16]
 80014ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	685a      	ldr	r2, [r3, #4]
 80014b2:	2380      	movs	r3, #128	; 0x80
 80014b4:	055b      	lsls	r3, r3, #21
 80014b6:	4013      	ands	r3, r2
 80014b8:	d100      	bne.n	80014bc <HAL_GPIO_Init+0x17c>
 80014ba:	e09a      	b.n	80015f2 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014bc:	4b54      	ldr	r3, [pc, #336]	; (8001610 <HAL_GPIO_Init+0x2d0>)
 80014be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014c0:	4b53      	ldr	r3, [pc, #332]	; (8001610 <HAL_GPIO_Init+0x2d0>)
 80014c2:	2101      	movs	r1, #1
 80014c4:	430a      	orrs	r2, r1
 80014c6:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80014c8:	4a52      	ldr	r2, [pc, #328]	; (8001614 <HAL_GPIO_Init+0x2d4>)
 80014ca:	697b      	ldr	r3, [r7, #20]
 80014cc:	089b      	lsrs	r3, r3, #2
 80014ce:	3302      	adds	r3, #2
 80014d0:	009b      	lsls	r3, r3, #2
 80014d2:	589b      	ldr	r3, [r3, r2]
 80014d4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80014d6:	697b      	ldr	r3, [r7, #20]
 80014d8:	2203      	movs	r2, #3
 80014da:	4013      	ands	r3, r2
 80014dc:	009b      	lsls	r3, r3, #2
 80014de:	220f      	movs	r2, #15
 80014e0:	409a      	lsls	r2, r3
 80014e2:	0013      	movs	r3, r2
 80014e4:	43da      	mvns	r2, r3
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	4013      	ands	r3, r2
 80014ea:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80014ec:	687a      	ldr	r2, [r7, #4]
 80014ee:	23a0      	movs	r3, #160	; 0xa0
 80014f0:	05db      	lsls	r3, r3, #23
 80014f2:	429a      	cmp	r2, r3
 80014f4:	d019      	beq.n	800152a <HAL_GPIO_Init+0x1ea>
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	4a47      	ldr	r2, [pc, #284]	; (8001618 <HAL_GPIO_Init+0x2d8>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d013      	beq.n	8001526 <HAL_GPIO_Init+0x1e6>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	4a46      	ldr	r2, [pc, #280]	; (800161c <HAL_GPIO_Init+0x2dc>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d00d      	beq.n	8001522 <HAL_GPIO_Init+0x1e2>
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	4a45      	ldr	r2, [pc, #276]	; (8001620 <HAL_GPIO_Init+0x2e0>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d007      	beq.n	800151e <HAL_GPIO_Init+0x1de>
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	4a44      	ldr	r2, [pc, #272]	; (8001624 <HAL_GPIO_Init+0x2e4>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d101      	bne.n	800151a <HAL_GPIO_Init+0x1da>
 8001516:	2305      	movs	r3, #5
 8001518:	e008      	b.n	800152c <HAL_GPIO_Init+0x1ec>
 800151a:	2306      	movs	r3, #6
 800151c:	e006      	b.n	800152c <HAL_GPIO_Init+0x1ec>
 800151e:	2303      	movs	r3, #3
 8001520:	e004      	b.n	800152c <HAL_GPIO_Init+0x1ec>
 8001522:	2302      	movs	r3, #2
 8001524:	e002      	b.n	800152c <HAL_GPIO_Init+0x1ec>
 8001526:	2301      	movs	r3, #1
 8001528:	e000      	b.n	800152c <HAL_GPIO_Init+0x1ec>
 800152a:	2300      	movs	r3, #0
 800152c:	697a      	ldr	r2, [r7, #20]
 800152e:	2103      	movs	r1, #3
 8001530:	400a      	ands	r2, r1
 8001532:	0092      	lsls	r2, r2, #2
 8001534:	4093      	lsls	r3, r2
 8001536:	693a      	ldr	r2, [r7, #16]
 8001538:	4313      	orrs	r3, r2
 800153a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800153c:	4935      	ldr	r1, [pc, #212]	; (8001614 <HAL_GPIO_Init+0x2d4>)
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	089b      	lsrs	r3, r3, #2
 8001542:	3302      	adds	r3, #2
 8001544:	009b      	lsls	r3, r3, #2
 8001546:	693a      	ldr	r2, [r7, #16]
 8001548:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800154a:	4b37      	ldr	r3, [pc, #220]	; (8001628 <HAL_GPIO_Init+0x2e8>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	43da      	mvns	r2, r3
 8001554:	693b      	ldr	r3, [r7, #16]
 8001556:	4013      	ands	r3, r2
 8001558:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	685a      	ldr	r2, [r3, #4]
 800155e:	2380      	movs	r3, #128	; 0x80
 8001560:	025b      	lsls	r3, r3, #9
 8001562:	4013      	ands	r3, r2
 8001564:	d003      	beq.n	800156e <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8001566:	693a      	ldr	r2, [r7, #16]
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	4313      	orrs	r3, r2
 800156c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800156e:	4b2e      	ldr	r3, [pc, #184]	; (8001628 <HAL_GPIO_Init+0x2e8>)
 8001570:	693a      	ldr	r2, [r7, #16]
 8001572:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001574:	4b2c      	ldr	r3, [pc, #176]	; (8001628 <HAL_GPIO_Init+0x2e8>)
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	43da      	mvns	r2, r3
 800157e:	693b      	ldr	r3, [r7, #16]
 8001580:	4013      	ands	r3, r2
 8001582:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	685a      	ldr	r2, [r3, #4]
 8001588:	2380      	movs	r3, #128	; 0x80
 800158a:	029b      	lsls	r3, r3, #10
 800158c:	4013      	ands	r3, r2
 800158e:	d003      	beq.n	8001598 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8001590:	693a      	ldr	r2, [r7, #16]
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	4313      	orrs	r3, r2
 8001596:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001598:	4b23      	ldr	r3, [pc, #140]	; (8001628 <HAL_GPIO_Init+0x2e8>)
 800159a:	693a      	ldr	r2, [r7, #16]
 800159c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800159e:	4b22      	ldr	r3, [pc, #136]	; (8001628 <HAL_GPIO_Init+0x2e8>)
 80015a0:	689b      	ldr	r3, [r3, #8]
 80015a2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	43da      	mvns	r2, r3
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	4013      	ands	r3, r2
 80015ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	685a      	ldr	r2, [r3, #4]
 80015b2:	2380      	movs	r3, #128	; 0x80
 80015b4:	035b      	lsls	r3, r3, #13
 80015b6:	4013      	ands	r3, r2
 80015b8:	d003      	beq.n	80015c2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80015ba:	693a      	ldr	r2, [r7, #16]
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	4313      	orrs	r3, r2
 80015c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80015c2:	4b19      	ldr	r3, [pc, #100]	; (8001628 <HAL_GPIO_Init+0x2e8>)
 80015c4:	693a      	ldr	r2, [r7, #16]
 80015c6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80015c8:	4b17      	ldr	r3, [pc, #92]	; (8001628 <HAL_GPIO_Init+0x2e8>)
 80015ca:	68db      	ldr	r3, [r3, #12]
 80015cc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	43da      	mvns	r2, r3
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	4013      	ands	r3, r2
 80015d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	685a      	ldr	r2, [r3, #4]
 80015dc:	2380      	movs	r3, #128	; 0x80
 80015de:	039b      	lsls	r3, r3, #14
 80015e0:	4013      	ands	r3, r2
 80015e2:	d003      	beq.n	80015ec <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80015e4:	693a      	ldr	r2, [r7, #16]
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	4313      	orrs	r3, r2
 80015ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80015ec:	4b0e      	ldr	r3, [pc, #56]	; (8001628 <HAL_GPIO_Init+0x2e8>)
 80015ee:	693a      	ldr	r2, [r7, #16]
 80015f0:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	3301      	adds	r3, #1
 80015f6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	40da      	lsrs	r2, r3
 8001600:	1e13      	subs	r3, r2, #0
 8001602:	d000      	beq.n	8001606 <HAL_GPIO_Init+0x2c6>
 8001604:	e6a8      	b.n	8001358 <HAL_GPIO_Init+0x18>
  }
}
 8001606:	46c0      	nop			; (mov r8, r8)
 8001608:	46c0      	nop			; (mov r8, r8)
 800160a:	46bd      	mov	sp, r7
 800160c:	b006      	add	sp, #24
 800160e:	bd80      	pop	{r7, pc}
 8001610:	40021000 	.word	0x40021000
 8001614:	40010000 	.word	0x40010000
 8001618:	50000400 	.word	0x50000400
 800161c:	50000800 	.word	0x50000800
 8001620:	50000c00 	.word	0x50000c00
 8001624:	50001c00 	.word	0x50001c00
 8001628:	40010400 	.word	0x40010400

0800162c <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
 8001634:	0008      	movs	r0, r1
 8001636:	0011      	movs	r1, r2
 8001638:	1cbb      	adds	r3, r7, #2
 800163a:	1c02      	adds	r2, r0, #0
 800163c:	801a      	strh	r2, [r3, #0]
 800163e:	1c7b      	adds	r3, r7, #1
 8001640:	1c0a      	adds	r2, r1, #0
 8001642:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001644:	1c7b      	adds	r3, r7, #1
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d004      	beq.n	8001656 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 800164c:	1cbb      	adds	r3, r7, #2
 800164e:	881a      	ldrh	r2, [r3, #0]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001654:	e003      	b.n	800165e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001656:	1cbb      	adds	r3, r7, #2
 8001658:	881a      	ldrh	r2, [r3, #0]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800165e:	46c0      	nop			; (mov r8, r8)
 8001660:	46bd      	mov	sp, r7
 8001662:	b002      	add	sp, #8
 8001664:	bd80      	pop	{r7, pc}
	...

08001668 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001668:	b5b0      	push	{r4, r5, r7, lr}
 800166a:	b08a      	sub	sp, #40	; 0x28
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d102      	bne.n	800167c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001676:	2301      	movs	r3, #1
 8001678:	f000 fbaf 	bl	8001dda <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800167c:	4bcf      	ldr	r3, [pc, #828]	; (80019bc <HAL_RCC_OscConfig+0x354>)
 800167e:	68db      	ldr	r3, [r3, #12]
 8001680:	220c      	movs	r2, #12
 8001682:	4013      	ands	r3, r2
 8001684:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001686:	4bcd      	ldr	r3, [pc, #820]	; (80019bc <HAL_RCC_OscConfig+0x354>)
 8001688:	68da      	ldr	r2, [r3, #12]
 800168a:	2380      	movs	r3, #128	; 0x80
 800168c:	025b      	lsls	r3, r3, #9
 800168e:	4013      	ands	r3, r2
 8001690:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	2201      	movs	r2, #1
 8001698:	4013      	ands	r3, r2
 800169a:	d100      	bne.n	800169e <HAL_RCC_OscConfig+0x36>
 800169c:	e07e      	b.n	800179c <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800169e:	6a3b      	ldr	r3, [r7, #32]
 80016a0:	2b08      	cmp	r3, #8
 80016a2:	d007      	beq.n	80016b4 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80016a4:	6a3b      	ldr	r3, [r7, #32]
 80016a6:	2b0c      	cmp	r3, #12
 80016a8:	d112      	bne.n	80016d0 <HAL_RCC_OscConfig+0x68>
 80016aa:	69fa      	ldr	r2, [r7, #28]
 80016ac:	2380      	movs	r3, #128	; 0x80
 80016ae:	025b      	lsls	r3, r3, #9
 80016b0:	429a      	cmp	r2, r3
 80016b2:	d10d      	bne.n	80016d0 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016b4:	4bc1      	ldr	r3, [pc, #772]	; (80019bc <HAL_RCC_OscConfig+0x354>)
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	2380      	movs	r3, #128	; 0x80
 80016ba:	029b      	lsls	r3, r3, #10
 80016bc:	4013      	ands	r3, r2
 80016be:	d100      	bne.n	80016c2 <HAL_RCC_OscConfig+0x5a>
 80016c0:	e06b      	b.n	800179a <HAL_RCC_OscConfig+0x132>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d167      	bne.n	800179a <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	f000 fb85 	bl	8001dda <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	685a      	ldr	r2, [r3, #4]
 80016d4:	2380      	movs	r3, #128	; 0x80
 80016d6:	025b      	lsls	r3, r3, #9
 80016d8:	429a      	cmp	r2, r3
 80016da:	d107      	bne.n	80016ec <HAL_RCC_OscConfig+0x84>
 80016dc:	4bb7      	ldr	r3, [pc, #732]	; (80019bc <HAL_RCC_OscConfig+0x354>)
 80016de:	681a      	ldr	r2, [r3, #0]
 80016e0:	4bb6      	ldr	r3, [pc, #728]	; (80019bc <HAL_RCC_OscConfig+0x354>)
 80016e2:	2180      	movs	r1, #128	; 0x80
 80016e4:	0249      	lsls	r1, r1, #9
 80016e6:	430a      	orrs	r2, r1
 80016e8:	601a      	str	r2, [r3, #0]
 80016ea:	e027      	b.n	800173c <HAL_RCC_OscConfig+0xd4>
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	685a      	ldr	r2, [r3, #4]
 80016f0:	23a0      	movs	r3, #160	; 0xa0
 80016f2:	02db      	lsls	r3, r3, #11
 80016f4:	429a      	cmp	r2, r3
 80016f6:	d10e      	bne.n	8001716 <HAL_RCC_OscConfig+0xae>
 80016f8:	4bb0      	ldr	r3, [pc, #704]	; (80019bc <HAL_RCC_OscConfig+0x354>)
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	4baf      	ldr	r3, [pc, #700]	; (80019bc <HAL_RCC_OscConfig+0x354>)
 80016fe:	2180      	movs	r1, #128	; 0x80
 8001700:	02c9      	lsls	r1, r1, #11
 8001702:	430a      	orrs	r2, r1
 8001704:	601a      	str	r2, [r3, #0]
 8001706:	4bad      	ldr	r3, [pc, #692]	; (80019bc <HAL_RCC_OscConfig+0x354>)
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	4bac      	ldr	r3, [pc, #688]	; (80019bc <HAL_RCC_OscConfig+0x354>)
 800170c:	2180      	movs	r1, #128	; 0x80
 800170e:	0249      	lsls	r1, r1, #9
 8001710:	430a      	orrs	r2, r1
 8001712:	601a      	str	r2, [r3, #0]
 8001714:	e012      	b.n	800173c <HAL_RCC_OscConfig+0xd4>
 8001716:	4ba9      	ldr	r3, [pc, #676]	; (80019bc <HAL_RCC_OscConfig+0x354>)
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	4ba8      	ldr	r3, [pc, #672]	; (80019bc <HAL_RCC_OscConfig+0x354>)
 800171c:	49a8      	ldr	r1, [pc, #672]	; (80019c0 <HAL_RCC_OscConfig+0x358>)
 800171e:	400a      	ands	r2, r1
 8001720:	601a      	str	r2, [r3, #0]
 8001722:	4ba6      	ldr	r3, [pc, #664]	; (80019bc <HAL_RCC_OscConfig+0x354>)
 8001724:	681a      	ldr	r2, [r3, #0]
 8001726:	2380      	movs	r3, #128	; 0x80
 8001728:	025b      	lsls	r3, r3, #9
 800172a:	4013      	ands	r3, r2
 800172c:	60fb      	str	r3, [r7, #12]
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	4ba2      	ldr	r3, [pc, #648]	; (80019bc <HAL_RCC_OscConfig+0x354>)
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	4ba1      	ldr	r3, [pc, #644]	; (80019bc <HAL_RCC_OscConfig+0x354>)
 8001736:	49a3      	ldr	r1, [pc, #652]	; (80019c4 <HAL_RCC_OscConfig+0x35c>)
 8001738:	400a      	ands	r2, r1
 800173a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d015      	beq.n	8001770 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001744:	f7ff fc76 	bl	8001034 <HAL_GetTick>
 8001748:	0003      	movs	r3, r0
 800174a:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800174c:	e009      	b.n	8001762 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800174e:	f7ff fc71 	bl	8001034 <HAL_GetTick>
 8001752:	0002      	movs	r2, r0
 8001754:	69bb      	ldr	r3, [r7, #24]
 8001756:	1ad3      	subs	r3, r2, r3
 8001758:	2b64      	cmp	r3, #100	; 0x64
 800175a:	d902      	bls.n	8001762 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800175c:	2303      	movs	r3, #3
 800175e:	f000 fb3c 	bl	8001dda <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001762:	4b96      	ldr	r3, [pc, #600]	; (80019bc <HAL_RCC_OscConfig+0x354>)
 8001764:	681a      	ldr	r2, [r3, #0]
 8001766:	2380      	movs	r3, #128	; 0x80
 8001768:	029b      	lsls	r3, r3, #10
 800176a:	4013      	ands	r3, r2
 800176c:	d0ef      	beq.n	800174e <HAL_RCC_OscConfig+0xe6>
 800176e:	e015      	b.n	800179c <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001770:	f7ff fc60 	bl	8001034 <HAL_GetTick>
 8001774:	0003      	movs	r3, r0
 8001776:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001778:	e008      	b.n	800178c <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800177a:	f7ff fc5b 	bl	8001034 <HAL_GetTick>
 800177e:	0002      	movs	r2, r0
 8001780:	69bb      	ldr	r3, [r7, #24]
 8001782:	1ad3      	subs	r3, r2, r3
 8001784:	2b64      	cmp	r3, #100	; 0x64
 8001786:	d901      	bls.n	800178c <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8001788:	2303      	movs	r3, #3
 800178a:	e326      	b.n	8001dda <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800178c:	4b8b      	ldr	r3, [pc, #556]	; (80019bc <HAL_RCC_OscConfig+0x354>)
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	2380      	movs	r3, #128	; 0x80
 8001792:	029b      	lsls	r3, r3, #10
 8001794:	4013      	ands	r3, r2
 8001796:	d1f0      	bne.n	800177a <HAL_RCC_OscConfig+0x112>
 8001798:	e000      	b.n	800179c <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800179a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	2202      	movs	r2, #2
 80017a2:	4013      	ands	r3, r2
 80017a4:	d100      	bne.n	80017a8 <HAL_RCC_OscConfig+0x140>
 80017a6:	e08b      	b.n	80018c0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	68db      	ldr	r3, [r3, #12]
 80017ac:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80017ae:	6a3b      	ldr	r3, [r7, #32]
 80017b0:	2b04      	cmp	r3, #4
 80017b2:	d005      	beq.n	80017c0 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80017b4:	6a3b      	ldr	r3, [r7, #32]
 80017b6:	2b0c      	cmp	r3, #12
 80017b8:	d13e      	bne.n	8001838 <HAL_RCC_OscConfig+0x1d0>
 80017ba:	69fb      	ldr	r3, [r7, #28]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d13b      	bne.n	8001838 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80017c0:	4b7e      	ldr	r3, [pc, #504]	; (80019bc <HAL_RCC_OscConfig+0x354>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	2204      	movs	r2, #4
 80017c6:	4013      	ands	r3, r2
 80017c8:	d004      	beq.n	80017d4 <HAL_RCC_OscConfig+0x16c>
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d101      	bne.n	80017d4 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 80017d0:	2301      	movs	r3, #1
 80017d2:	e302      	b.n	8001dda <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017d4:	4b79      	ldr	r3, [pc, #484]	; (80019bc <HAL_RCC_OscConfig+0x354>)
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	4a7b      	ldr	r2, [pc, #492]	; (80019c8 <HAL_RCC_OscConfig+0x360>)
 80017da:	4013      	ands	r3, r2
 80017dc:	0019      	movs	r1, r3
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	691b      	ldr	r3, [r3, #16]
 80017e2:	021a      	lsls	r2, r3, #8
 80017e4:	4b75      	ldr	r3, [pc, #468]	; (80019bc <HAL_RCC_OscConfig+0x354>)
 80017e6:	430a      	orrs	r2, r1
 80017e8:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80017ea:	4b74      	ldr	r3, [pc, #464]	; (80019bc <HAL_RCC_OscConfig+0x354>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	2209      	movs	r2, #9
 80017f0:	4393      	bics	r3, r2
 80017f2:	0019      	movs	r1, r3
 80017f4:	4b71      	ldr	r3, [pc, #452]	; (80019bc <HAL_RCC_OscConfig+0x354>)
 80017f6:	697a      	ldr	r2, [r7, #20]
 80017f8:	430a      	orrs	r2, r1
 80017fa:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80017fc:	f000 fc40 	bl	8002080 <HAL_RCC_GetSysClockFreq>
 8001800:	0001      	movs	r1, r0
 8001802:	4b6e      	ldr	r3, [pc, #440]	; (80019bc <HAL_RCC_OscConfig+0x354>)
 8001804:	68db      	ldr	r3, [r3, #12]
 8001806:	091b      	lsrs	r3, r3, #4
 8001808:	220f      	movs	r2, #15
 800180a:	4013      	ands	r3, r2
 800180c:	4a6f      	ldr	r2, [pc, #444]	; (80019cc <HAL_RCC_OscConfig+0x364>)
 800180e:	5cd3      	ldrb	r3, [r2, r3]
 8001810:	000a      	movs	r2, r1
 8001812:	40da      	lsrs	r2, r3
 8001814:	4b6e      	ldr	r3, [pc, #440]	; (80019d0 <HAL_RCC_OscConfig+0x368>)
 8001816:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001818:	4b6e      	ldr	r3, [pc, #440]	; (80019d4 <HAL_RCC_OscConfig+0x36c>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	2513      	movs	r5, #19
 800181e:	197c      	adds	r4, r7, r5
 8001820:	0018      	movs	r0, r3
 8001822:	f7ff fbc1 	bl	8000fa8 <HAL_InitTick>
 8001826:	0003      	movs	r3, r0
 8001828:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800182a:	197b      	adds	r3, r7, r5
 800182c:	781b      	ldrb	r3, [r3, #0]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d046      	beq.n	80018c0 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 8001832:	197b      	adds	r3, r7, r5
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	e2d0      	b.n	8001dda <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d027      	beq.n	800188e <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800183e:	4b5f      	ldr	r3, [pc, #380]	; (80019bc <HAL_RCC_OscConfig+0x354>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	2209      	movs	r2, #9
 8001844:	4393      	bics	r3, r2
 8001846:	0019      	movs	r1, r3
 8001848:	4b5c      	ldr	r3, [pc, #368]	; (80019bc <HAL_RCC_OscConfig+0x354>)
 800184a:	697a      	ldr	r2, [r7, #20]
 800184c:	430a      	orrs	r2, r1
 800184e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001850:	f7ff fbf0 	bl	8001034 <HAL_GetTick>
 8001854:	0003      	movs	r3, r0
 8001856:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001858:	e008      	b.n	800186c <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800185a:	f7ff fbeb 	bl	8001034 <HAL_GetTick>
 800185e:	0002      	movs	r2, r0
 8001860:	69bb      	ldr	r3, [r7, #24]
 8001862:	1ad3      	subs	r3, r2, r3
 8001864:	2b02      	cmp	r3, #2
 8001866:	d901      	bls.n	800186c <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 8001868:	2303      	movs	r3, #3
 800186a:	e2b6      	b.n	8001dda <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800186c:	4b53      	ldr	r3, [pc, #332]	; (80019bc <HAL_RCC_OscConfig+0x354>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	2204      	movs	r2, #4
 8001872:	4013      	ands	r3, r2
 8001874:	d0f1      	beq.n	800185a <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001876:	4b51      	ldr	r3, [pc, #324]	; (80019bc <HAL_RCC_OscConfig+0x354>)
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	4a53      	ldr	r2, [pc, #332]	; (80019c8 <HAL_RCC_OscConfig+0x360>)
 800187c:	4013      	ands	r3, r2
 800187e:	0019      	movs	r1, r3
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	691b      	ldr	r3, [r3, #16]
 8001884:	021a      	lsls	r2, r3, #8
 8001886:	4b4d      	ldr	r3, [pc, #308]	; (80019bc <HAL_RCC_OscConfig+0x354>)
 8001888:	430a      	orrs	r2, r1
 800188a:	605a      	str	r2, [r3, #4]
 800188c:	e018      	b.n	80018c0 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800188e:	4b4b      	ldr	r3, [pc, #300]	; (80019bc <HAL_RCC_OscConfig+0x354>)
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	4b4a      	ldr	r3, [pc, #296]	; (80019bc <HAL_RCC_OscConfig+0x354>)
 8001894:	2101      	movs	r1, #1
 8001896:	438a      	bics	r2, r1
 8001898:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800189a:	f7ff fbcb 	bl	8001034 <HAL_GetTick>
 800189e:	0003      	movs	r3, r0
 80018a0:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80018a2:	e008      	b.n	80018b6 <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018a4:	f7ff fbc6 	bl	8001034 <HAL_GetTick>
 80018a8:	0002      	movs	r2, r0
 80018aa:	69bb      	ldr	r3, [r7, #24]
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	2b02      	cmp	r3, #2
 80018b0:	d901      	bls.n	80018b6 <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 80018b2:	2303      	movs	r3, #3
 80018b4:	e291      	b.n	8001dda <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80018b6:	4b41      	ldr	r3, [pc, #260]	; (80019bc <HAL_RCC_OscConfig+0x354>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	2204      	movs	r2, #4
 80018bc:	4013      	ands	r3, r2
 80018be:	d1f1      	bne.n	80018a4 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	2210      	movs	r2, #16
 80018c6:	4013      	ands	r3, r2
 80018c8:	d100      	bne.n	80018cc <HAL_RCC_OscConfig+0x264>
 80018ca:	e0a1      	b.n	8001a10 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80018cc:	6a3b      	ldr	r3, [r7, #32]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d140      	bne.n	8001954 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80018d2:	4b3a      	ldr	r3, [pc, #232]	; (80019bc <HAL_RCC_OscConfig+0x354>)
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	2380      	movs	r3, #128	; 0x80
 80018d8:	009b      	lsls	r3, r3, #2
 80018da:	4013      	ands	r3, r2
 80018dc:	d005      	beq.n	80018ea <HAL_RCC_OscConfig+0x282>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	69db      	ldr	r3, [r3, #28]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d101      	bne.n	80018ea <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	e277      	b.n	8001dda <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80018ea:	4b34      	ldr	r3, [pc, #208]	; (80019bc <HAL_RCC_OscConfig+0x354>)
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	4a3a      	ldr	r2, [pc, #232]	; (80019d8 <HAL_RCC_OscConfig+0x370>)
 80018f0:	4013      	ands	r3, r2
 80018f2:	0019      	movs	r1, r3
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80018f8:	4b30      	ldr	r3, [pc, #192]	; (80019bc <HAL_RCC_OscConfig+0x354>)
 80018fa:	430a      	orrs	r2, r1
 80018fc:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80018fe:	4b2f      	ldr	r3, [pc, #188]	; (80019bc <HAL_RCC_OscConfig+0x354>)
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	021b      	lsls	r3, r3, #8
 8001904:	0a19      	lsrs	r1, r3, #8
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6a1b      	ldr	r3, [r3, #32]
 800190a:	061a      	lsls	r2, r3, #24
 800190c:	4b2b      	ldr	r3, [pc, #172]	; (80019bc <HAL_RCC_OscConfig+0x354>)
 800190e:	430a      	orrs	r2, r1
 8001910:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001916:	0b5b      	lsrs	r3, r3, #13
 8001918:	3301      	adds	r3, #1
 800191a:	2280      	movs	r2, #128	; 0x80
 800191c:	0212      	lsls	r2, r2, #8
 800191e:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001920:	4b26      	ldr	r3, [pc, #152]	; (80019bc <HAL_RCC_OscConfig+0x354>)
 8001922:	68db      	ldr	r3, [r3, #12]
 8001924:	091b      	lsrs	r3, r3, #4
 8001926:	210f      	movs	r1, #15
 8001928:	400b      	ands	r3, r1
 800192a:	4928      	ldr	r1, [pc, #160]	; (80019cc <HAL_RCC_OscConfig+0x364>)
 800192c:	5ccb      	ldrb	r3, [r1, r3]
 800192e:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001930:	4b27      	ldr	r3, [pc, #156]	; (80019d0 <HAL_RCC_OscConfig+0x368>)
 8001932:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001934:	4b27      	ldr	r3, [pc, #156]	; (80019d4 <HAL_RCC_OscConfig+0x36c>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	2513      	movs	r5, #19
 800193a:	197c      	adds	r4, r7, r5
 800193c:	0018      	movs	r0, r3
 800193e:	f7ff fb33 	bl	8000fa8 <HAL_InitTick>
 8001942:	0003      	movs	r3, r0
 8001944:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001946:	197b      	adds	r3, r7, r5
 8001948:	781b      	ldrb	r3, [r3, #0]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d060      	beq.n	8001a10 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 800194e:	197b      	adds	r3, r7, r5
 8001950:	781b      	ldrb	r3, [r3, #0]
 8001952:	e242      	b.n	8001dda <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	69db      	ldr	r3, [r3, #28]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d03f      	beq.n	80019dc <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800195c:	4b17      	ldr	r3, [pc, #92]	; (80019bc <HAL_RCC_OscConfig+0x354>)
 800195e:	681a      	ldr	r2, [r3, #0]
 8001960:	4b16      	ldr	r3, [pc, #88]	; (80019bc <HAL_RCC_OscConfig+0x354>)
 8001962:	2180      	movs	r1, #128	; 0x80
 8001964:	0049      	lsls	r1, r1, #1
 8001966:	430a      	orrs	r2, r1
 8001968:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800196a:	f7ff fb63 	bl	8001034 <HAL_GetTick>
 800196e:	0003      	movs	r3, r0
 8001970:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001972:	e008      	b.n	8001986 <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001974:	f7ff fb5e 	bl	8001034 <HAL_GetTick>
 8001978:	0002      	movs	r2, r0
 800197a:	69bb      	ldr	r3, [r7, #24]
 800197c:	1ad3      	subs	r3, r2, r3
 800197e:	2b02      	cmp	r3, #2
 8001980:	d901      	bls.n	8001986 <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 8001982:	2303      	movs	r3, #3
 8001984:	e229      	b.n	8001dda <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001986:	4b0d      	ldr	r3, [pc, #52]	; (80019bc <HAL_RCC_OscConfig+0x354>)
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	2380      	movs	r3, #128	; 0x80
 800198c:	009b      	lsls	r3, r3, #2
 800198e:	4013      	ands	r3, r2
 8001990:	d0f0      	beq.n	8001974 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001992:	4b0a      	ldr	r3, [pc, #40]	; (80019bc <HAL_RCC_OscConfig+0x354>)
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	4a10      	ldr	r2, [pc, #64]	; (80019d8 <HAL_RCC_OscConfig+0x370>)
 8001998:	4013      	ands	r3, r2
 800199a:	0019      	movs	r1, r3
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80019a0:	4b06      	ldr	r3, [pc, #24]	; (80019bc <HAL_RCC_OscConfig+0x354>)
 80019a2:	430a      	orrs	r2, r1
 80019a4:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80019a6:	4b05      	ldr	r3, [pc, #20]	; (80019bc <HAL_RCC_OscConfig+0x354>)
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	021b      	lsls	r3, r3, #8
 80019ac:	0a19      	lsrs	r1, r3, #8
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6a1b      	ldr	r3, [r3, #32]
 80019b2:	061a      	lsls	r2, r3, #24
 80019b4:	4b01      	ldr	r3, [pc, #4]	; (80019bc <HAL_RCC_OscConfig+0x354>)
 80019b6:	430a      	orrs	r2, r1
 80019b8:	605a      	str	r2, [r3, #4]
 80019ba:	e029      	b.n	8001a10 <HAL_RCC_OscConfig+0x3a8>
 80019bc:	40021000 	.word	0x40021000
 80019c0:	fffeffff 	.word	0xfffeffff
 80019c4:	fffbffff 	.word	0xfffbffff
 80019c8:	ffffe0ff 	.word	0xffffe0ff
 80019cc:	08004624 	.word	0x08004624
 80019d0:	20000008 	.word	0x20000008
 80019d4:	2000000c 	.word	0x2000000c
 80019d8:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80019dc:	4bbd      	ldr	r3, [pc, #756]	; (8001cd4 <HAL_RCC_OscConfig+0x66c>)
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	4bbc      	ldr	r3, [pc, #752]	; (8001cd4 <HAL_RCC_OscConfig+0x66c>)
 80019e2:	49bd      	ldr	r1, [pc, #756]	; (8001cd8 <HAL_RCC_OscConfig+0x670>)
 80019e4:	400a      	ands	r2, r1
 80019e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019e8:	f7ff fb24 	bl	8001034 <HAL_GetTick>
 80019ec:	0003      	movs	r3, r0
 80019ee:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80019f0:	e008      	b.n	8001a04 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80019f2:	f7ff fb1f 	bl	8001034 <HAL_GetTick>
 80019f6:	0002      	movs	r2, r0
 80019f8:	69bb      	ldr	r3, [r7, #24]
 80019fa:	1ad3      	subs	r3, r2, r3
 80019fc:	2b02      	cmp	r3, #2
 80019fe:	d901      	bls.n	8001a04 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 8001a00:	2303      	movs	r3, #3
 8001a02:	e1ea      	b.n	8001dda <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001a04:	4bb3      	ldr	r3, [pc, #716]	; (8001cd4 <HAL_RCC_OscConfig+0x66c>)
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	2380      	movs	r3, #128	; 0x80
 8001a0a:	009b      	lsls	r3, r3, #2
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	d1f0      	bne.n	80019f2 <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	2208      	movs	r2, #8
 8001a16:	4013      	ands	r3, r2
 8001a18:	d036      	beq.n	8001a88 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	695b      	ldr	r3, [r3, #20]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d019      	beq.n	8001a56 <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a22:	4bac      	ldr	r3, [pc, #688]	; (8001cd4 <HAL_RCC_OscConfig+0x66c>)
 8001a24:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001a26:	4bab      	ldr	r3, [pc, #684]	; (8001cd4 <HAL_RCC_OscConfig+0x66c>)
 8001a28:	2101      	movs	r1, #1
 8001a2a:	430a      	orrs	r2, r1
 8001a2c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a2e:	f7ff fb01 	bl	8001034 <HAL_GetTick>
 8001a32:	0003      	movs	r3, r0
 8001a34:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001a36:	e008      	b.n	8001a4a <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a38:	f7ff fafc 	bl	8001034 <HAL_GetTick>
 8001a3c:	0002      	movs	r2, r0
 8001a3e:	69bb      	ldr	r3, [r7, #24]
 8001a40:	1ad3      	subs	r3, r2, r3
 8001a42:	2b02      	cmp	r3, #2
 8001a44:	d901      	bls.n	8001a4a <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 8001a46:	2303      	movs	r3, #3
 8001a48:	e1c7      	b.n	8001dda <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001a4a:	4ba2      	ldr	r3, [pc, #648]	; (8001cd4 <HAL_RCC_OscConfig+0x66c>)
 8001a4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a4e:	2202      	movs	r2, #2
 8001a50:	4013      	ands	r3, r2
 8001a52:	d0f1      	beq.n	8001a38 <HAL_RCC_OscConfig+0x3d0>
 8001a54:	e018      	b.n	8001a88 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a56:	4b9f      	ldr	r3, [pc, #636]	; (8001cd4 <HAL_RCC_OscConfig+0x66c>)
 8001a58:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001a5a:	4b9e      	ldr	r3, [pc, #632]	; (8001cd4 <HAL_RCC_OscConfig+0x66c>)
 8001a5c:	2101      	movs	r1, #1
 8001a5e:	438a      	bics	r2, r1
 8001a60:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a62:	f7ff fae7 	bl	8001034 <HAL_GetTick>
 8001a66:	0003      	movs	r3, r0
 8001a68:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001a6a:	e008      	b.n	8001a7e <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a6c:	f7ff fae2 	bl	8001034 <HAL_GetTick>
 8001a70:	0002      	movs	r2, r0
 8001a72:	69bb      	ldr	r3, [r7, #24]
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	2b02      	cmp	r3, #2
 8001a78:	d901      	bls.n	8001a7e <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	e1ad      	b.n	8001dda <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001a7e:	4b95      	ldr	r3, [pc, #596]	; (8001cd4 <HAL_RCC_OscConfig+0x66c>)
 8001a80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a82:	2202      	movs	r2, #2
 8001a84:	4013      	ands	r3, r2
 8001a86:	d1f1      	bne.n	8001a6c <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	2204      	movs	r2, #4
 8001a8e:	4013      	ands	r3, r2
 8001a90:	d100      	bne.n	8001a94 <HAL_RCC_OscConfig+0x42c>
 8001a92:	e0ae      	b.n	8001bf2 <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a94:	2027      	movs	r0, #39	; 0x27
 8001a96:	183b      	adds	r3, r7, r0
 8001a98:	2200      	movs	r2, #0
 8001a9a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a9c:	4b8d      	ldr	r3, [pc, #564]	; (8001cd4 <HAL_RCC_OscConfig+0x66c>)
 8001a9e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001aa0:	2380      	movs	r3, #128	; 0x80
 8001aa2:	055b      	lsls	r3, r3, #21
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	d109      	bne.n	8001abc <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001aa8:	4b8a      	ldr	r3, [pc, #552]	; (8001cd4 <HAL_RCC_OscConfig+0x66c>)
 8001aaa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001aac:	4b89      	ldr	r3, [pc, #548]	; (8001cd4 <HAL_RCC_OscConfig+0x66c>)
 8001aae:	2180      	movs	r1, #128	; 0x80
 8001ab0:	0549      	lsls	r1, r1, #21
 8001ab2:	430a      	orrs	r2, r1
 8001ab4:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001ab6:	183b      	adds	r3, r7, r0
 8001ab8:	2201      	movs	r2, #1
 8001aba:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001abc:	4b87      	ldr	r3, [pc, #540]	; (8001cdc <HAL_RCC_OscConfig+0x674>)
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	2380      	movs	r3, #128	; 0x80
 8001ac2:	005b      	lsls	r3, r3, #1
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	d11a      	bne.n	8001afe <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ac8:	4b84      	ldr	r3, [pc, #528]	; (8001cdc <HAL_RCC_OscConfig+0x674>)
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	4b83      	ldr	r3, [pc, #524]	; (8001cdc <HAL_RCC_OscConfig+0x674>)
 8001ace:	2180      	movs	r1, #128	; 0x80
 8001ad0:	0049      	lsls	r1, r1, #1
 8001ad2:	430a      	orrs	r2, r1
 8001ad4:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ad6:	f7ff faad 	bl	8001034 <HAL_GetTick>
 8001ada:	0003      	movs	r3, r0
 8001adc:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ade:	e008      	b.n	8001af2 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ae0:	f7ff faa8 	bl	8001034 <HAL_GetTick>
 8001ae4:	0002      	movs	r2, r0
 8001ae6:	69bb      	ldr	r3, [r7, #24]
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	2b64      	cmp	r3, #100	; 0x64
 8001aec:	d901      	bls.n	8001af2 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8001aee:	2303      	movs	r3, #3
 8001af0:	e173      	b.n	8001dda <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001af2:	4b7a      	ldr	r3, [pc, #488]	; (8001cdc <HAL_RCC_OscConfig+0x674>)
 8001af4:	681a      	ldr	r2, [r3, #0]
 8001af6:	2380      	movs	r3, #128	; 0x80
 8001af8:	005b      	lsls	r3, r3, #1
 8001afa:	4013      	ands	r3, r2
 8001afc:	d0f0      	beq.n	8001ae0 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	689a      	ldr	r2, [r3, #8]
 8001b02:	2380      	movs	r3, #128	; 0x80
 8001b04:	005b      	lsls	r3, r3, #1
 8001b06:	429a      	cmp	r2, r3
 8001b08:	d107      	bne.n	8001b1a <HAL_RCC_OscConfig+0x4b2>
 8001b0a:	4b72      	ldr	r3, [pc, #456]	; (8001cd4 <HAL_RCC_OscConfig+0x66c>)
 8001b0c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001b0e:	4b71      	ldr	r3, [pc, #452]	; (8001cd4 <HAL_RCC_OscConfig+0x66c>)
 8001b10:	2180      	movs	r1, #128	; 0x80
 8001b12:	0049      	lsls	r1, r1, #1
 8001b14:	430a      	orrs	r2, r1
 8001b16:	651a      	str	r2, [r3, #80]	; 0x50
 8001b18:	e031      	b.n	8001b7e <HAL_RCC_OscConfig+0x516>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d10c      	bne.n	8001b3c <HAL_RCC_OscConfig+0x4d4>
 8001b22:	4b6c      	ldr	r3, [pc, #432]	; (8001cd4 <HAL_RCC_OscConfig+0x66c>)
 8001b24:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001b26:	4b6b      	ldr	r3, [pc, #428]	; (8001cd4 <HAL_RCC_OscConfig+0x66c>)
 8001b28:	496b      	ldr	r1, [pc, #428]	; (8001cd8 <HAL_RCC_OscConfig+0x670>)
 8001b2a:	400a      	ands	r2, r1
 8001b2c:	651a      	str	r2, [r3, #80]	; 0x50
 8001b2e:	4b69      	ldr	r3, [pc, #420]	; (8001cd4 <HAL_RCC_OscConfig+0x66c>)
 8001b30:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001b32:	4b68      	ldr	r3, [pc, #416]	; (8001cd4 <HAL_RCC_OscConfig+0x66c>)
 8001b34:	496a      	ldr	r1, [pc, #424]	; (8001ce0 <HAL_RCC_OscConfig+0x678>)
 8001b36:	400a      	ands	r2, r1
 8001b38:	651a      	str	r2, [r3, #80]	; 0x50
 8001b3a:	e020      	b.n	8001b7e <HAL_RCC_OscConfig+0x516>
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	689a      	ldr	r2, [r3, #8]
 8001b40:	23a0      	movs	r3, #160	; 0xa0
 8001b42:	00db      	lsls	r3, r3, #3
 8001b44:	429a      	cmp	r2, r3
 8001b46:	d10e      	bne.n	8001b66 <HAL_RCC_OscConfig+0x4fe>
 8001b48:	4b62      	ldr	r3, [pc, #392]	; (8001cd4 <HAL_RCC_OscConfig+0x66c>)
 8001b4a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001b4c:	4b61      	ldr	r3, [pc, #388]	; (8001cd4 <HAL_RCC_OscConfig+0x66c>)
 8001b4e:	2180      	movs	r1, #128	; 0x80
 8001b50:	00c9      	lsls	r1, r1, #3
 8001b52:	430a      	orrs	r2, r1
 8001b54:	651a      	str	r2, [r3, #80]	; 0x50
 8001b56:	4b5f      	ldr	r3, [pc, #380]	; (8001cd4 <HAL_RCC_OscConfig+0x66c>)
 8001b58:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001b5a:	4b5e      	ldr	r3, [pc, #376]	; (8001cd4 <HAL_RCC_OscConfig+0x66c>)
 8001b5c:	2180      	movs	r1, #128	; 0x80
 8001b5e:	0049      	lsls	r1, r1, #1
 8001b60:	430a      	orrs	r2, r1
 8001b62:	651a      	str	r2, [r3, #80]	; 0x50
 8001b64:	e00b      	b.n	8001b7e <HAL_RCC_OscConfig+0x516>
 8001b66:	4b5b      	ldr	r3, [pc, #364]	; (8001cd4 <HAL_RCC_OscConfig+0x66c>)
 8001b68:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001b6a:	4b5a      	ldr	r3, [pc, #360]	; (8001cd4 <HAL_RCC_OscConfig+0x66c>)
 8001b6c:	495a      	ldr	r1, [pc, #360]	; (8001cd8 <HAL_RCC_OscConfig+0x670>)
 8001b6e:	400a      	ands	r2, r1
 8001b70:	651a      	str	r2, [r3, #80]	; 0x50
 8001b72:	4b58      	ldr	r3, [pc, #352]	; (8001cd4 <HAL_RCC_OscConfig+0x66c>)
 8001b74:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001b76:	4b57      	ldr	r3, [pc, #348]	; (8001cd4 <HAL_RCC_OscConfig+0x66c>)
 8001b78:	4959      	ldr	r1, [pc, #356]	; (8001ce0 <HAL_RCC_OscConfig+0x678>)
 8001b7a:	400a      	ands	r2, r1
 8001b7c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d015      	beq.n	8001bb2 <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b86:	f7ff fa55 	bl	8001034 <HAL_GetTick>
 8001b8a:	0003      	movs	r3, r0
 8001b8c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001b8e:	e009      	b.n	8001ba4 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b90:	f7ff fa50 	bl	8001034 <HAL_GetTick>
 8001b94:	0002      	movs	r2, r0
 8001b96:	69bb      	ldr	r3, [r7, #24]
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	4a52      	ldr	r2, [pc, #328]	; (8001ce4 <HAL_RCC_OscConfig+0x67c>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d901      	bls.n	8001ba4 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 8001ba0:	2303      	movs	r3, #3
 8001ba2:	e11a      	b.n	8001dda <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001ba4:	4b4b      	ldr	r3, [pc, #300]	; (8001cd4 <HAL_RCC_OscConfig+0x66c>)
 8001ba6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001ba8:	2380      	movs	r3, #128	; 0x80
 8001baa:	009b      	lsls	r3, r3, #2
 8001bac:	4013      	ands	r3, r2
 8001bae:	d0ef      	beq.n	8001b90 <HAL_RCC_OscConfig+0x528>
 8001bb0:	e014      	b.n	8001bdc <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bb2:	f7ff fa3f 	bl	8001034 <HAL_GetTick>
 8001bb6:	0003      	movs	r3, r0
 8001bb8:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001bba:	e009      	b.n	8001bd0 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bbc:	f7ff fa3a 	bl	8001034 <HAL_GetTick>
 8001bc0:	0002      	movs	r2, r0
 8001bc2:	69bb      	ldr	r3, [r7, #24]
 8001bc4:	1ad3      	subs	r3, r2, r3
 8001bc6:	4a47      	ldr	r2, [pc, #284]	; (8001ce4 <HAL_RCC_OscConfig+0x67c>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d901      	bls.n	8001bd0 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8001bcc:	2303      	movs	r3, #3
 8001bce:	e104      	b.n	8001dda <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001bd0:	4b40      	ldr	r3, [pc, #256]	; (8001cd4 <HAL_RCC_OscConfig+0x66c>)
 8001bd2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001bd4:	2380      	movs	r3, #128	; 0x80
 8001bd6:	009b      	lsls	r3, r3, #2
 8001bd8:	4013      	ands	r3, r2
 8001bda:	d1ef      	bne.n	8001bbc <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001bdc:	2327      	movs	r3, #39	; 0x27
 8001bde:	18fb      	adds	r3, r7, r3
 8001be0:	781b      	ldrb	r3, [r3, #0]
 8001be2:	2b01      	cmp	r3, #1
 8001be4:	d105      	bne.n	8001bf2 <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001be6:	4b3b      	ldr	r3, [pc, #236]	; (8001cd4 <HAL_RCC_OscConfig+0x66c>)
 8001be8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001bea:	4b3a      	ldr	r3, [pc, #232]	; (8001cd4 <HAL_RCC_OscConfig+0x66c>)
 8001bec:	493e      	ldr	r1, [pc, #248]	; (8001ce8 <HAL_RCC_OscConfig+0x680>)
 8001bee:	400a      	ands	r2, r1
 8001bf0:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	2220      	movs	r2, #32
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	d049      	beq.n	8001c90 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	699b      	ldr	r3, [r3, #24]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d026      	beq.n	8001c52 <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001c04:	4b33      	ldr	r3, [pc, #204]	; (8001cd4 <HAL_RCC_OscConfig+0x66c>)
 8001c06:	689a      	ldr	r2, [r3, #8]
 8001c08:	4b32      	ldr	r3, [pc, #200]	; (8001cd4 <HAL_RCC_OscConfig+0x66c>)
 8001c0a:	2101      	movs	r1, #1
 8001c0c:	430a      	orrs	r2, r1
 8001c0e:	609a      	str	r2, [r3, #8]
 8001c10:	4b30      	ldr	r3, [pc, #192]	; (8001cd4 <HAL_RCC_OscConfig+0x66c>)
 8001c12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c14:	4b2f      	ldr	r3, [pc, #188]	; (8001cd4 <HAL_RCC_OscConfig+0x66c>)
 8001c16:	2101      	movs	r1, #1
 8001c18:	430a      	orrs	r2, r1
 8001c1a:	635a      	str	r2, [r3, #52]	; 0x34
 8001c1c:	4b33      	ldr	r3, [pc, #204]	; (8001cec <HAL_RCC_OscConfig+0x684>)
 8001c1e:	6a1a      	ldr	r2, [r3, #32]
 8001c20:	4b32      	ldr	r3, [pc, #200]	; (8001cec <HAL_RCC_OscConfig+0x684>)
 8001c22:	2180      	movs	r1, #128	; 0x80
 8001c24:	0189      	lsls	r1, r1, #6
 8001c26:	430a      	orrs	r2, r1
 8001c28:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c2a:	f7ff fa03 	bl	8001034 <HAL_GetTick>
 8001c2e:	0003      	movs	r3, r0
 8001c30:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001c32:	e008      	b.n	8001c46 <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c34:	f7ff f9fe 	bl	8001034 <HAL_GetTick>
 8001c38:	0002      	movs	r2, r0
 8001c3a:	69bb      	ldr	r3, [r7, #24]
 8001c3c:	1ad3      	subs	r3, r2, r3
 8001c3e:	2b02      	cmp	r3, #2
 8001c40:	d901      	bls.n	8001c46 <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 8001c42:	2303      	movs	r3, #3
 8001c44:	e0c9      	b.n	8001dda <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001c46:	4b23      	ldr	r3, [pc, #140]	; (8001cd4 <HAL_RCC_OscConfig+0x66c>)
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	2202      	movs	r2, #2
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	d0f1      	beq.n	8001c34 <HAL_RCC_OscConfig+0x5cc>
 8001c50:	e01e      	b.n	8001c90 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001c52:	4b20      	ldr	r3, [pc, #128]	; (8001cd4 <HAL_RCC_OscConfig+0x66c>)
 8001c54:	689a      	ldr	r2, [r3, #8]
 8001c56:	4b1f      	ldr	r3, [pc, #124]	; (8001cd4 <HAL_RCC_OscConfig+0x66c>)
 8001c58:	2101      	movs	r1, #1
 8001c5a:	438a      	bics	r2, r1
 8001c5c:	609a      	str	r2, [r3, #8]
 8001c5e:	4b23      	ldr	r3, [pc, #140]	; (8001cec <HAL_RCC_OscConfig+0x684>)
 8001c60:	6a1a      	ldr	r2, [r3, #32]
 8001c62:	4b22      	ldr	r3, [pc, #136]	; (8001cec <HAL_RCC_OscConfig+0x684>)
 8001c64:	4922      	ldr	r1, [pc, #136]	; (8001cf0 <HAL_RCC_OscConfig+0x688>)
 8001c66:	400a      	ands	r2, r1
 8001c68:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c6a:	f7ff f9e3 	bl	8001034 <HAL_GetTick>
 8001c6e:	0003      	movs	r3, r0
 8001c70:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001c72:	e008      	b.n	8001c86 <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c74:	f7ff f9de 	bl	8001034 <HAL_GetTick>
 8001c78:	0002      	movs	r2, r0
 8001c7a:	69bb      	ldr	r3, [r7, #24]
 8001c7c:	1ad3      	subs	r3, r2, r3
 8001c7e:	2b02      	cmp	r3, #2
 8001c80:	d901      	bls.n	8001c86 <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 8001c82:	2303      	movs	r3, #3
 8001c84:	e0a9      	b.n	8001dda <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001c86:	4b13      	ldr	r3, [pc, #76]	; (8001cd4 <HAL_RCC_OscConfig+0x66c>)
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	2202      	movs	r2, #2
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	d1f1      	bne.n	8001c74 <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d100      	bne.n	8001c9a <HAL_RCC_OscConfig+0x632>
 8001c98:	e09e      	b.n	8001dd8 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c9a:	6a3b      	ldr	r3, [r7, #32]
 8001c9c:	2b0c      	cmp	r3, #12
 8001c9e:	d100      	bne.n	8001ca2 <HAL_RCC_OscConfig+0x63a>
 8001ca0:	e077      	b.n	8001d92 <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ca6:	2b02      	cmp	r3, #2
 8001ca8:	d158      	bne.n	8001d5c <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001caa:	4b0a      	ldr	r3, [pc, #40]	; (8001cd4 <HAL_RCC_OscConfig+0x66c>)
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	4b09      	ldr	r3, [pc, #36]	; (8001cd4 <HAL_RCC_OscConfig+0x66c>)
 8001cb0:	4910      	ldr	r1, [pc, #64]	; (8001cf4 <HAL_RCC_OscConfig+0x68c>)
 8001cb2:	400a      	ands	r2, r1
 8001cb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cb6:	f7ff f9bd 	bl	8001034 <HAL_GetTick>
 8001cba:	0003      	movs	r3, r0
 8001cbc:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001cbe:	e01b      	b.n	8001cf8 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cc0:	f7ff f9b8 	bl	8001034 <HAL_GetTick>
 8001cc4:	0002      	movs	r2, r0
 8001cc6:	69bb      	ldr	r3, [r7, #24]
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	2b02      	cmp	r3, #2
 8001ccc:	d914      	bls.n	8001cf8 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	e083      	b.n	8001dda <HAL_RCC_OscConfig+0x772>
 8001cd2:	46c0      	nop			; (mov r8, r8)
 8001cd4:	40021000 	.word	0x40021000
 8001cd8:	fffffeff 	.word	0xfffffeff
 8001cdc:	40007000 	.word	0x40007000
 8001ce0:	fffffbff 	.word	0xfffffbff
 8001ce4:	00001388 	.word	0x00001388
 8001ce8:	efffffff 	.word	0xefffffff
 8001cec:	40010000 	.word	0x40010000
 8001cf0:	ffffdfff 	.word	0xffffdfff
 8001cf4:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001cf8:	4b3a      	ldr	r3, [pc, #232]	; (8001de4 <HAL_RCC_OscConfig+0x77c>)
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	2380      	movs	r3, #128	; 0x80
 8001cfe:	049b      	lsls	r3, r3, #18
 8001d00:	4013      	ands	r3, r2
 8001d02:	d1dd      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d04:	4b37      	ldr	r3, [pc, #220]	; (8001de4 <HAL_RCC_OscConfig+0x77c>)
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	4a37      	ldr	r2, [pc, #220]	; (8001de8 <HAL_RCC_OscConfig+0x780>)
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	0019      	movs	r1, r3
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d16:	431a      	orrs	r2, r3
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d1c:	431a      	orrs	r2, r3
 8001d1e:	4b31      	ldr	r3, [pc, #196]	; (8001de4 <HAL_RCC_OscConfig+0x77c>)
 8001d20:	430a      	orrs	r2, r1
 8001d22:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d24:	4b2f      	ldr	r3, [pc, #188]	; (8001de4 <HAL_RCC_OscConfig+0x77c>)
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	4b2e      	ldr	r3, [pc, #184]	; (8001de4 <HAL_RCC_OscConfig+0x77c>)
 8001d2a:	2180      	movs	r1, #128	; 0x80
 8001d2c:	0449      	lsls	r1, r1, #17
 8001d2e:	430a      	orrs	r2, r1
 8001d30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d32:	f7ff f97f 	bl	8001034 <HAL_GetTick>
 8001d36:	0003      	movs	r3, r0
 8001d38:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001d3a:	e008      	b.n	8001d4e <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d3c:	f7ff f97a 	bl	8001034 <HAL_GetTick>
 8001d40:	0002      	movs	r2, r0
 8001d42:	69bb      	ldr	r3, [r7, #24]
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	2b02      	cmp	r3, #2
 8001d48:	d901      	bls.n	8001d4e <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	e045      	b.n	8001dda <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001d4e:	4b25      	ldr	r3, [pc, #148]	; (8001de4 <HAL_RCC_OscConfig+0x77c>)
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	2380      	movs	r3, #128	; 0x80
 8001d54:	049b      	lsls	r3, r3, #18
 8001d56:	4013      	ands	r3, r2
 8001d58:	d0f0      	beq.n	8001d3c <HAL_RCC_OscConfig+0x6d4>
 8001d5a:	e03d      	b.n	8001dd8 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d5c:	4b21      	ldr	r3, [pc, #132]	; (8001de4 <HAL_RCC_OscConfig+0x77c>)
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	4b20      	ldr	r3, [pc, #128]	; (8001de4 <HAL_RCC_OscConfig+0x77c>)
 8001d62:	4922      	ldr	r1, [pc, #136]	; (8001dec <HAL_RCC_OscConfig+0x784>)
 8001d64:	400a      	ands	r2, r1
 8001d66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d68:	f7ff f964 	bl	8001034 <HAL_GetTick>
 8001d6c:	0003      	movs	r3, r0
 8001d6e:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001d70:	e008      	b.n	8001d84 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d72:	f7ff f95f 	bl	8001034 <HAL_GetTick>
 8001d76:	0002      	movs	r2, r0
 8001d78:	69bb      	ldr	r3, [r7, #24]
 8001d7a:	1ad3      	subs	r3, r2, r3
 8001d7c:	2b02      	cmp	r3, #2
 8001d7e:	d901      	bls.n	8001d84 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 8001d80:	2303      	movs	r3, #3
 8001d82:	e02a      	b.n	8001dda <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001d84:	4b17      	ldr	r3, [pc, #92]	; (8001de4 <HAL_RCC_OscConfig+0x77c>)
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	2380      	movs	r3, #128	; 0x80
 8001d8a:	049b      	lsls	r3, r3, #18
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	d1f0      	bne.n	8001d72 <HAL_RCC_OscConfig+0x70a>
 8001d90:	e022      	b.n	8001dd8 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d96:	2b01      	cmp	r3, #1
 8001d98:	d101      	bne.n	8001d9e <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e01d      	b.n	8001dda <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d9e:	4b11      	ldr	r3, [pc, #68]	; (8001de4 <HAL_RCC_OscConfig+0x77c>)
 8001da0:	68db      	ldr	r3, [r3, #12]
 8001da2:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001da4:	69fa      	ldr	r2, [r7, #28]
 8001da6:	2380      	movs	r3, #128	; 0x80
 8001da8:	025b      	lsls	r3, r3, #9
 8001daa:	401a      	ands	r2, r3
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001db0:	429a      	cmp	r2, r3
 8001db2:	d10f      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001db4:	69fa      	ldr	r2, [r7, #28]
 8001db6:	23f0      	movs	r3, #240	; 0xf0
 8001db8:	039b      	lsls	r3, r3, #14
 8001dba:	401a      	ands	r2, r3
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d107      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001dc4:	69fa      	ldr	r2, [r7, #28]
 8001dc6:	23c0      	movs	r3, #192	; 0xc0
 8001dc8:	041b      	lsls	r3, r3, #16
 8001dca:	401a      	ands	r2, r3
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d001      	beq.n	8001dd8 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e000      	b.n	8001dda <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8001dd8:	2300      	movs	r3, #0
}
 8001dda:	0018      	movs	r0, r3
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	b00a      	add	sp, #40	; 0x28
 8001de0:	bdb0      	pop	{r4, r5, r7, pc}
 8001de2:	46c0      	nop			; (mov r8, r8)
 8001de4:	40021000 	.word	0x40021000
 8001de8:	ff02ffff 	.word	0xff02ffff
 8001dec:	feffffff 	.word	0xfeffffff

08001df0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001df0:	b5b0      	push	{r4, r5, r7, lr}
 8001df2:	b084      	sub	sp, #16
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d101      	bne.n	8001e04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	e128      	b.n	8002056 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e04:	4b96      	ldr	r3, [pc, #600]	; (8002060 <HAL_RCC_ClockConfig+0x270>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	2201      	movs	r2, #1
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	683a      	ldr	r2, [r7, #0]
 8001e0e:	429a      	cmp	r2, r3
 8001e10:	d91e      	bls.n	8001e50 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e12:	4b93      	ldr	r3, [pc, #588]	; (8002060 <HAL_RCC_ClockConfig+0x270>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	2201      	movs	r2, #1
 8001e18:	4393      	bics	r3, r2
 8001e1a:	0019      	movs	r1, r3
 8001e1c:	4b90      	ldr	r3, [pc, #576]	; (8002060 <HAL_RCC_ClockConfig+0x270>)
 8001e1e:	683a      	ldr	r2, [r7, #0]
 8001e20:	430a      	orrs	r2, r1
 8001e22:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001e24:	f7ff f906 	bl	8001034 <HAL_GetTick>
 8001e28:	0003      	movs	r3, r0
 8001e2a:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e2c:	e009      	b.n	8001e42 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e2e:	f7ff f901 	bl	8001034 <HAL_GetTick>
 8001e32:	0002      	movs	r2, r0
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	1ad3      	subs	r3, r2, r3
 8001e38:	4a8a      	ldr	r2, [pc, #552]	; (8002064 <HAL_RCC_ClockConfig+0x274>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d901      	bls.n	8001e42 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001e3e:	2303      	movs	r3, #3
 8001e40:	e109      	b.n	8002056 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e42:	4b87      	ldr	r3, [pc, #540]	; (8002060 <HAL_RCC_ClockConfig+0x270>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	2201      	movs	r2, #1
 8001e48:	4013      	ands	r3, r2
 8001e4a:	683a      	ldr	r2, [r7, #0]
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	d1ee      	bne.n	8001e2e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	2202      	movs	r2, #2
 8001e56:	4013      	ands	r3, r2
 8001e58:	d009      	beq.n	8001e6e <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e5a:	4b83      	ldr	r3, [pc, #524]	; (8002068 <HAL_RCC_ClockConfig+0x278>)
 8001e5c:	68db      	ldr	r3, [r3, #12]
 8001e5e:	22f0      	movs	r2, #240	; 0xf0
 8001e60:	4393      	bics	r3, r2
 8001e62:	0019      	movs	r1, r3
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	689a      	ldr	r2, [r3, #8]
 8001e68:	4b7f      	ldr	r3, [pc, #508]	; (8002068 <HAL_RCC_ClockConfig+0x278>)
 8001e6a:	430a      	orrs	r2, r1
 8001e6c:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	2201      	movs	r2, #1
 8001e74:	4013      	ands	r3, r2
 8001e76:	d100      	bne.n	8001e7a <HAL_RCC_ClockConfig+0x8a>
 8001e78:	e089      	b.n	8001f8e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	2b02      	cmp	r3, #2
 8001e80:	d107      	bne.n	8001e92 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001e82:	4b79      	ldr	r3, [pc, #484]	; (8002068 <HAL_RCC_ClockConfig+0x278>)
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	2380      	movs	r3, #128	; 0x80
 8001e88:	029b      	lsls	r3, r3, #10
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	d120      	bne.n	8001ed0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e0e1      	b.n	8002056 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	2b03      	cmp	r3, #3
 8001e98:	d107      	bne.n	8001eaa <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001e9a:	4b73      	ldr	r3, [pc, #460]	; (8002068 <HAL_RCC_ClockConfig+0x278>)
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	2380      	movs	r3, #128	; 0x80
 8001ea0:	049b      	lsls	r3, r3, #18
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	d114      	bne.n	8001ed0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e0d5      	b.n	8002056 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	2b01      	cmp	r3, #1
 8001eb0:	d106      	bne.n	8001ec0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001eb2:	4b6d      	ldr	r3, [pc, #436]	; (8002068 <HAL_RCC_ClockConfig+0x278>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	2204      	movs	r2, #4
 8001eb8:	4013      	ands	r3, r2
 8001eba:	d109      	bne.n	8001ed0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	e0ca      	b.n	8002056 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001ec0:	4b69      	ldr	r3, [pc, #420]	; (8002068 <HAL_RCC_ClockConfig+0x278>)
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	2380      	movs	r3, #128	; 0x80
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	4013      	ands	r3, r2
 8001eca:	d101      	bne.n	8001ed0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	e0c2      	b.n	8002056 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ed0:	4b65      	ldr	r3, [pc, #404]	; (8002068 <HAL_RCC_ClockConfig+0x278>)
 8001ed2:	68db      	ldr	r3, [r3, #12]
 8001ed4:	2203      	movs	r2, #3
 8001ed6:	4393      	bics	r3, r2
 8001ed8:	0019      	movs	r1, r3
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	685a      	ldr	r2, [r3, #4]
 8001ede:	4b62      	ldr	r3, [pc, #392]	; (8002068 <HAL_RCC_ClockConfig+0x278>)
 8001ee0:	430a      	orrs	r2, r1
 8001ee2:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ee4:	f7ff f8a6 	bl	8001034 <HAL_GetTick>
 8001ee8:	0003      	movs	r3, r0
 8001eea:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	2b02      	cmp	r3, #2
 8001ef2:	d111      	bne.n	8001f18 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ef4:	e009      	b.n	8001f0a <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ef6:	f7ff f89d 	bl	8001034 <HAL_GetTick>
 8001efa:	0002      	movs	r2, r0
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	1ad3      	subs	r3, r2, r3
 8001f00:	4a58      	ldr	r2, [pc, #352]	; (8002064 <HAL_RCC_ClockConfig+0x274>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d901      	bls.n	8001f0a <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8001f06:	2303      	movs	r3, #3
 8001f08:	e0a5      	b.n	8002056 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f0a:	4b57      	ldr	r3, [pc, #348]	; (8002068 <HAL_RCC_ClockConfig+0x278>)
 8001f0c:	68db      	ldr	r3, [r3, #12]
 8001f0e:	220c      	movs	r2, #12
 8001f10:	4013      	ands	r3, r2
 8001f12:	2b08      	cmp	r3, #8
 8001f14:	d1ef      	bne.n	8001ef6 <HAL_RCC_ClockConfig+0x106>
 8001f16:	e03a      	b.n	8001f8e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	2b03      	cmp	r3, #3
 8001f1e:	d111      	bne.n	8001f44 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f20:	e009      	b.n	8001f36 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f22:	f7ff f887 	bl	8001034 <HAL_GetTick>
 8001f26:	0002      	movs	r2, r0
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	1ad3      	subs	r3, r2, r3
 8001f2c:	4a4d      	ldr	r2, [pc, #308]	; (8002064 <HAL_RCC_ClockConfig+0x274>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d901      	bls.n	8001f36 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8001f32:	2303      	movs	r3, #3
 8001f34:	e08f      	b.n	8002056 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f36:	4b4c      	ldr	r3, [pc, #304]	; (8002068 <HAL_RCC_ClockConfig+0x278>)
 8001f38:	68db      	ldr	r3, [r3, #12]
 8001f3a:	220c      	movs	r2, #12
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	2b0c      	cmp	r3, #12
 8001f40:	d1ef      	bne.n	8001f22 <HAL_RCC_ClockConfig+0x132>
 8001f42:	e024      	b.n	8001f8e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	2b01      	cmp	r3, #1
 8001f4a:	d11b      	bne.n	8001f84 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f4c:	e009      	b.n	8001f62 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f4e:	f7ff f871 	bl	8001034 <HAL_GetTick>
 8001f52:	0002      	movs	r2, r0
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	1ad3      	subs	r3, r2, r3
 8001f58:	4a42      	ldr	r2, [pc, #264]	; (8002064 <HAL_RCC_ClockConfig+0x274>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d901      	bls.n	8001f62 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8001f5e:	2303      	movs	r3, #3
 8001f60:	e079      	b.n	8002056 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f62:	4b41      	ldr	r3, [pc, #260]	; (8002068 <HAL_RCC_ClockConfig+0x278>)
 8001f64:	68db      	ldr	r3, [r3, #12]
 8001f66:	220c      	movs	r2, #12
 8001f68:	4013      	ands	r3, r2
 8001f6a:	2b04      	cmp	r3, #4
 8001f6c:	d1ef      	bne.n	8001f4e <HAL_RCC_ClockConfig+0x15e>
 8001f6e:	e00e      	b.n	8001f8e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f70:	f7ff f860 	bl	8001034 <HAL_GetTick>
 8001f74:	0002      	movs	r2, r0
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	4a3a      	ldr	r2, [pc, #232]	; (8002064 <HAL_RCC_ClockConfig+0x274>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d901      	bls.n	8001f84 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001f80:	2303      	movs	r3, #3
 8001f82:	e068      	b.n	8002056 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001f84:	4b38      	ldr	r3, [pc, #224]	; (8002068 <HAL_RCC_ClockConfig+0x278>)
 8001f86:	68db      	ldr	r3, [r3, #12]
 8001f88:	220c      	movs	r2, #12
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	d1f0      	bne.n	8001f70 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f8e:	4b34      	ldr	r3, [pc, #208]	; (8002060 <HAL_RCC_ClockConfig+0x270>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	2201      	movs	r2, #1
 8001f94:	4013      	ands	r3, r2
 8001f96:	683a      	ldr	r2, [r7, #0]
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d21e      	bcs.n	8001fda <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f9c:	4b30      	ldr	r3, [pc, #192]	; (8002060 <HAL_RCC_ClockConfig+0x270>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	4393      	bics	r3, r2
 8001fa4:	0019      	movs	r1, r3
 8001fa6:	4b2e      	ldr	r3, [pc, #184]	; (8002060 <HAL_RCC_ClockConfig+0x270>)
 8001fa8:	683a      	ldr	r2, [r7, #0]
 8001faa:	430a      	orrs	r2, r1
 8001fac:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001fae:	f7ff f841 	bl	8001034 <HAL_GetTick>
 8001fb2:	0003      	movs	r3, r0
 8001fb4:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fb6:	e009      	b.n	8001fcc <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fb8:	f7ff f83c 	bl	8001034 <HAL_GetTick>
 8001fbc:	0002      	movs	r2, r0
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	1ad3      	subs	r3, r2, r3
 8001fc2:	4a28      	ldr	r2, [pc, #160]	; (8002064 <HAL_RCC_ClockConfig+0x274>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d901      	bls.n	8001fcc <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001fc8:	2303      	movs	r3, #3
 8001fca:	e044      	b.n	8002056 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fcc:	4b24      	ldr	r3, [pc, #144]	; (8002060 <HAL_RCC_ClockConfig+0x270>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	683a      	ldr	r2, [r7, #0]
 8001fd6:	429a      	cmp	r2, r3
 8001fd8:	d1ee      	bne.n	8001fb8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	2204      	movs	r2, #4
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	d009      	beq.n	8001ff8 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fe4:	4b20      	ldr	r3, [pc, #128]	; (8002068 <HAL_RCC_ClockConfig+0x278>)
 8001fe6:	68db      	ldr	r3, [r3, #12]
 8001fe8:	4a20      	ldr	r2, [pc, #128]	; (800206c <HAL_RCC_ClockConfig+0x27c>)
 8001fea:	4013      	ands	r3, r2
 8001fec:	0019      	movs	r1, r3
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	68da      	ldr	r2, [r3, #12]
 8001ff2:	4b1d      	ldr	r3, [pc, #116]	; (8002068 <HAL_RCC_ClockConfig+0x278>)
 8001ff4:	430a      	orrs	r2, r1
 8001ff6:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	2208      	movs	r2, #8
 8001ffe:	4013      	ands	r3, r2
 8002000:	d00a      	beq.n	8002018 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002002:	4b19      	ldr	r3, [pc, #100]	; (8002068 <HAL_RCC_ClockConfig+0x278>)
 8002004:	68db      	ldr	r3, [r3, #12]
 8002006:	4a1a      	ldr	r2, [pc, #104]	; (8002070 <HAL_RCC_ClockConfig+0x280>)
 8002008:	4013      	ands	r3, r2
 800200a:	0019      	movs	r1, r3
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	691b      	ldr	r3, [r3, #16]
 8002010:	00da      	lsls	r2, r3, #3
 8002012:	4b15      	ldr	r3, [pc, #84]	; (8002068 <HAL_RCC_ClockConfig+0x278>)
 8002014:	430a      	orrs	r2, r1
 8002016:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002018:	f000 f832 	bl	8002080 <HAL_RCC_GetSysClockFreq>
 800201c:	0001      	movs	r1, r0
 800201e:	4b12      	ldr	r3, [pc, #72]	; (8002068 <HAL_RCC_ClockConfig+0x278>)
 8002020:	68db      	ldr	r3, [r3, #12]
 8002022:	091b      	lsrs	r3, r3, #4
 8002024:	220f      	movs	r2, #15
 8002026:	4013      	ands	r3, r2
 8002028:	4a12      	ldr	r2, [pc, #72]	; (8002074 <HAL_RCC_ClockConfig+0x284>)
 800202a:	5cd3      	ldrb	r3, [r2, r3]
 800202c:	000a      	movs	r2, r1
 800202e:	40da      	lsrs	r2, r3
 8002030:	4b11      	ldr	r3, [pc, #68]	; (8002078 <HAL_RCC_ClockConfig+0x288>)
 8002032:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002034:	4b11      	ldr	r3, [pc, #68]	; (800207c <HAL_RCC_ClockConfig+0x28c>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	250b      	movs	r5, #11
 800203a:	197c      	adds	r4, r7, r5
 800203c:	0018      	movs	r0, r3
 800203e:	f7fe ffb3 	bl	8000fa8 <HAL_InitTick>
 8002042:	0003      	movs	r3, r0
 8002044:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8002046:	197b      	adds	r3, r7, r5
 8002048:	781b      	ldrb	r3, [r3, #0]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d002      	beq.n	8002054 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 800204e:	197b      	adds	r3, r7, r5
 8002050:	781b      	ldrb	r3, [r3, #0]
 8002052:	e000      	b.n	8002056 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8002054:	2300      	movs	r3, #0
}
 8002056:	0018      	movs	r0, r3
 8002058:	46bd      	mov	sp, r7
 800205a:	b004      	add	sp, #16
 800205c:	bdb0      	pop	{r4, r5, r7, pc}
 800205e:	46c0      	nop			; (mov r8, r8)
 8002060:	40022000 	.word	0x40022000
 8002064:	00001388 	.word	0x00001388
 8002068:	40021000 	.word	0x40021000
 800206c:	fffff8ff 	.word	0xfffff8ff
 8002070:	ffffc7ff 	.word	0xffffc7ff
 8002074:	08004624 	.word	0x08004624
 8002078:	20000008 	.word	0x20000008
 800207c:	2000000c 	.word	0x2000000c

08002080 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002080:	b5b0      	push	{r4, r5, r7, lr}
 8002082:	b08e      	sub	sp, #56	; 0x38
 8002084:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8002086:	4b4c      	ldr	r3, [pc, #304]	; (80021b8 <HAL_RCC_GetSysClockFreq+0x138>)
 8002088:	68db      	ldr	r3, [r3, #12]
 800208a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800208c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800208e:	230c      	movs	r3, #12
 8002090:	4013      	ands	r3, r2
 8002092:	2b0c      	cmp	r3, #12
 8002094:	d014      	beq.n	80020c0 <HAL_RCC_GetSysClockFreq+0x40>
 8002096:	d900      	bls.n	800209a <HAL_RCC_GetSysClockFreq+0x1a>
 8002098:	e07b      	b.n	8002192 <HAL_RCC_GetSysClockFreq+0x112>
 800209a:	2b04      	cmp	r3, #4
 800209c:	d002      	beq.n	80020a4 <HAL_RCC_GetSysClockFreq+0x24>
 800209e:	2b08      	cmp	r3, #8
 80020a0:	d00b      	beq.n	80020ba <HAL_RCC_GetSysClockFreq+0x3a>
 80020a2:	e076      	b.n	8002192 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80020a4:	4b44      	ldr	r3, [pc, #272]	; (80021b8 <HAL_RCC_GetSysClockFreq+0x138>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	2210      	movs	r2, #16
 80020aa:	4013      	ands	r3, r2
 80020ac:	d002      	beq.n	80020b4 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80020ae:	4b43      	ldr	r3, [pc, #268]	; (80021bc <HAL_RCC_GetSysClockFreq+0x13c>)
 80020b0:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80020b2:	e07c      	b.n	80021ae <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 80020b4:	4b42      	ldr	r3, [pc, #264]	; (80021c0 <HAL_RCC_GetSysClockFreq+0x140>)
 80020b6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80020b8:	e079      	b.n	80021ae <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80020ba:	4b42      	ldr	r3, [pc, #264]	; (80021c4 <HAL_RCC_GetSysClockFreq+0x144>)
 80020bc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80020be:	e076      	b.n	80021ae <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80020c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020c2:	0c9a      	lsrs	r2, r3, #18
 80020c4:	230f      	movs	r3, #15
 80020c6:	401a      	ands	r2, r3
 80020c8:	4b3f      	ldr	r3, [pc, #252]	; (80021c8 <HAL_RCC_GetSysClockFreq+0x148>)
 80020ca:	5c9b      	ldrb	r3, [r3, r2]
 80020cc:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80020ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020d0:	0d9a      	lsrs	r2, r3, #22
 80020d2:	2303      	movs	r3, #3
 80020d4:	4013      	ands	r3, r2
 80020d6:	3301      	adds	r3, #1
 80020d8:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80020da:	4b37      	ldr	r3, [pc, #220]	; (80021b8 <HAL_RCC_GetSysClockFreq+0x138>)
 80020dc:	68da      	ldr	r2, [r3, #12]
 80020de:	2380      	movs	r3, #128	; 0x80
 80020e0:	025b      	lsls	r3, r3, #9
 80020e2:	4013      	ands	r3, r2
 80020e4:	d01a      	beq.n	800211c <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80020e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020e8:	61bb      	str	r3, [r7, #24]
 80020ea:	2300      	movs	r3, #0
 80020ec:	61fb      	str	r3, [r7, #28]
 80020ee:	4a35      	ldr	r2, [pc, #212]	; (80021c4 <HAL_RCC_GetSysClockFreq+0x144>)
 80020f0:	2300      	movs	r3, #0
 80020f2:	69b8      	ldr	r0, [r7, #24]
 80020f4:	69f9      	ldr	r1, [r7, #28]
 80020f6:	f7fe f8b3 	bl	8000260 <__aeabi_lmul>
 80020fa:	0002      	movs	r2, r0
 80020fc:	000b      	movs	r3, r1
 80020fe:	0010      	movs	r0, r2
 8002100:	0019      	movs	r1, r3
 8002102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002104:	613b      	str	r3, [r7, #16]
 8002106:	2300      	movs	r3, #0
 8002108:	617b      	str	r3, [r7, #20]
 800210a:	693a      	ldr	r2, [r7, #16]
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	f7fe f887 	bl	8000220 <__aeabi_uldivmod>
 8002112:	0002      	movs	r2, r0
 8002114:	000b      	movs	r3, r1
 8002116:	0013      	movs	r3, r2
 8002118:	637b      	str	r3, [r7, #52]	; 0x34
 800211a:	e037      	b.n	800218c <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800211c:	4b26      	ldr	r3, [pc, #152]	; (80021b8 <HAL_RCC_GetSysClockFreq+0x138>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	2210      	movs	r2, #16
 8002122:	4013      	ands	r3, r2
 8002124:	d01a      	beq.n	800215c <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8002126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002128:	60bb      	str	r3, [r7, #8]
 800212a:	2300      	movs	r3, #0
 800212c:	60fb      	str	r3, [r7, #12]
 800212e:	4a23      	ldr	r2, [pc, #140]	; (80021bc <HAL_RCC_GetSysClockFreq+0x13c>)
 8002130:	2300      	movs	r3, #0
 8002132:	68b8      	ldr	r0, [r7, #8]
 8002134:	68f9      	ldr	r1, [r7, #12]
 8002136:	f7fe f893 	bl	8000260 <__aeabi_lmul>
 800213a:	0002      	movs	r2, r0
 800213c:	000b      	movs	r3, r1
 800213e:	0010      	movs	r0, r2
 8002140:	0019      	movs	r1, r3
 8002142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002144:	603b      	str	r3, [r7, #0]
 8002146:	2300      	movs	r3, #0
 8002148:	607b      	str	r3, [r7, #4]
 800214a:	683a      	ldr	r2, [r7, #0]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	f7fe f867 	bl	8000220 <__aeabi_uldivmod>
 8002152:	0002      	movs	r2, r0
 8002154:	000b      	movs	r3, r1
 8002156:	0013      	movs	r3, r2
 8002158:	637b      	str	r3, [r7, #52]	; 0x34
 800215a:	e017      	b.n	800218c <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800215c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800215e:	0018      	movs	r0, r3
 8002160:	2300      	movs	r3, #0
 8002162:	0019      	movs	r1, r3
 8002164:	4a16      	ldr	r2, [pc, #88]	; (80021c0 <HAL_RCC_GetSysClockFreq+0x140>)
 8002166:	2300      	movs	r3, #0
 8002168:	f7fe f87a 	bl	8000260 <__aeabi_lmul>
 800216c:	0002      	movs	r2, r0
 800216e:	000b      	movs	r3, r1
 8002170:	0010      	movs	r0, r2
 8002172:	0019      	movs	r1, r3
 8002174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002176:	001c      	movs	r4, r3
 8002178:	2300      	movs	r3, #0
 800217a:	001d      	movs	r5, r3
 800217c:	0022      	movs	r2, r4
 800217e:	002b      	movs	r3, r5
 8002180:	f7fe f84e 	bl	8000220 <__aeabi_uldivmod>
 8002184:	0002      	movs	r2, r0
 8002186:	000b      	movs	r3, r1
 8002188:	0013      	movs	r3, r2
 800218a:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 800218c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800218e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002190:	e00d      	b.n	80021ae <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002192:	4b09      	ldr	r3, [pc, #36]	; (80021b8 <HAL_RCC_GetSysClockFreq+0x138>)
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	0b5b      	lsrs	r3, r3, #13
 8002198:	2207      	movs	r2, #7
 800219a:	4013      	ands	r3, r2
 800219c:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800219e:	6a3b      	ldr	r3, [r7, #32]
 80021a0:	3301      	adds	r3, #1
 80021a2:	2280      	movs	r2, #128	; 0x80
 80021a4:	0212      	lsls	r2, r2, #8
 80021a6:	409a      	lsls	r2, r3
 80021a8:	0013      	movs	r3, r2
 80021aa:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80021ac:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80021ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80021b0:	0018      	movs	r0, r3
 80021b2:	46bd      	mov	sp, r7
 80021b4:	b00e      	add	sp, #56	; 0x38
 80021b6:	bdb0      	pop	{r4, r5, r7, pc}
 80021b8:	40021000 	.word	0x40021000
 80021bc:	003d0900 	.word	0x003d0900
 80021c0:	00f42400 	.word	0x00f42400
 80021c4:	007a1200 	.word	0x007a1200
 80021c8:	0800463c 	.word	0x0800463c

080021cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021d0:	4b02      	ldr	r3, [pc, #8]	; (80021dc <HAL_RCC_GetHCLKFreq+0x10>)
 80021d2:	681b      	ldr	r3, [r3, #0]
}
 80021d4:	0018      	movs	r0, r3
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	46c0      	nop			; (mov r8, r8)
 80021dc:	20000008 	.word	0x20000008

080021e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80021e4:	f7ff fff2 	bl	80021cc <HAL_RCC_GetHCLKFreq>
 80021e8:	0001      	movs	r1, r0
 80021ea:	4b06      	ldr	r3, [pc, #24]	; (8002204 <HAL_RCC_GetPCLK1Freq+0x24>)
 80021ec:	68db      	ldr	r3, [r3, #12]
 80021ee:	0a1b      	lsrs	r3, r3, #8
 80021f0:	2207      	movs	r2, #7
 80021f2:	4013      	ands	r3, r2
 80021f4:	4a04      	ldr	r2, [pc, #16]	; (8002208 <HAL_RCC_GetPCLK1Freq+0x28>)
 80021f6:	5cd3      	ldrb	r3, [r2, r3]
 80021f8:	40d9      	lsrs	r1, r3
 80021fa:	000b      	movs	r3, r1
}
 80021fc:	0018      	movs	r0, r3
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
 8002202:	46c0      	nop			; (mov r8, r8)
 8002204:	40021000 	.word	0x40021000
 8002208:	08004634 	.word	0x08004634

0800220c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002210:	f7ff ffdc 	bl	80021cc <HAL_RCC_GetHCLKFreq>
 8002214:	0001      	movs	r1, r0
 8002216:	4b06      	ldr	r3, [pc, #24]	; (8002230 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002218:	68db      	ldr	r3, [r3, #12]
 800221a:	0adb      	lsrs	r3, r3, #11
 800221c:	2207      	movs	r2, #7
 800221e:	4013      	ands	r3, r2
 8002220:	4a04      	ldr	r2, [pc, #16]	; (8002234 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002222:	5cd3      	ldrb	r3, [r2, r3]
 8002224:	40d9      	lsrs	r1, r3
 8002226:	000b      	movs	r3, r1
}
 8002228:	0018      	movs	r0, r3
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}
 800222e:	46c0      	nop			; (mov r8, r8)
 8002230:	40021000 	.word	0x40021000
 8002234:	08004634 	.word	0x08004634

08002238 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b086      	sub	sp, #24
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8002240:	2317      	movs	r3, #23
 8002242:	18fb      	adds	r3, r7, r3
 8002244:	2200      	movs	r2, #0
 8002246:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	2220      	movs	r2, #32
 800224e:	4013      	ands	r3, r2
 8002250:	d106      	bne.n	8002260 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	2380      	movs	r3, #128	; 0x80
 8002258:	011b      	lsls	r3, r3, #4
 800225a:	4013      	ands	r3, r2
 800225c:	d100      	bne.n	8002260 <HAL_RCCEx_PeriphCLKConfig+0x28>
 800225e:	e0d9      	b.n	8002414 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002260:	4b9c      	ldr	r3, [pc, #624]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002262:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002264:	2380      	movs	r3, #128	; 0x80
 8002266:	055b      	lsls	r3, r3, #21
 8002268:	4013      	ands	r3, r2
 800226a:	d10a      	bne.n	8002282 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800226c:	4b99      	ldr	r3, [pc, #612]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800226e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002270:	4b98      	ldr	r3, [pc, #608]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002272:	2180      	movs	r1, #128	; 0x80
 8002274:	0549      	lsls	r1, r1, #21
 8002276:	430a      	orrs	r2, r1
 8002278:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800227a:	2317      	movs	r3, #23
 800227c:	18fb      	adds	r3, r7, r3
 800227e:	2201      	movs	r2, #1
 8002280:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002282:	4b95      	ldr	r3, [pc, #596]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	2380      	movs	r3, #128	; 0x80
 8002288:	005b      	lsls	r3, r3, #1
 800228a:	4013      	ands	r3, r2
 800228c:	d11a      	bne.n	80022c4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800228e:	4b92      	ldr	r3, [pc, #584]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	4b91      	ldr	r3, [pc, #580]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8002294:	2180      	movs	r1, #128	; 0x80
 8002296:	0049      	lsls	r1, r1, #1
 8002298:	430a      	orrs	r2, r1
 800229a:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800229c:	f7fe feca 	bl	8001034 <HAL_GetTick>
 80022a0:	0003      	movs	r3, r0
 80022a2:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022a4:	e008      	b.n	80022b8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022a6:	f7fe fec5 	bl	8001034 <HAL_GetTick>
 80022aa:	0002      	movs	r2, r0
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	1ad3      	subs	r3, r2, r3
 80022b0:	2b64      	cmp	r3, #100	; 0x64
 80022b2:	d901      	bls.n	80022b8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80022b4:	2303      	movs	r3, #3
 80022b6:	e108      	b.n	80024ca <HAL_RCCEx_PeriphCLKConfig+0x292>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022b8:	4b87      	ldr	r3, [pc, #540]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	2380      	movs	r3, #128	; 0x80
 80022be:	005b      	lsls	r3, r3, #1
 80022c0:	4013      	ands	r3, r2
 80022c2:	d0f0      	beq.n	80022a6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80022c4:	4b83      	ldr	r3, [pc, #524]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	23c0      	movs	r3, #192	; 0xc0
 80022ca:	039b      	lsls	r3, r3, #14
 80022cc:	4013      	ands	r3, r2
 80022ce:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	685a      	ldr	r2, [r3, #4]
 80022d4:	23c0      	movs	r3, #192	; 0xc0
 80022d6:	039b      	lsls	r3, r3, #14
 80022d8:	4013      	ands	r3, r2
 80022da:	68fa      	ldr	r2, [r7, #12]
 80022dc:	429a      	cmp	r2, r3
 80022de:	d107      	bne.n	80022f0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	689a      	ldr	r2, [r3, #8]
 80022e4:	23c0      	movs	r3, #192	; 0xc0
 80022e6:	039b      	lsls	r3, r3, #14
 80022e8:	4013      	ands	r3, r2
 80022ea:	68fa      	ldr	r2, [r7, #12]
 80022ec:	429a      	cmp	r2, r3
 80022ee:	d013      	beq.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	685a      	ldr	r2, [r3, #4]
 80022f4:	23c0      	movs	r3, #192	; 0xc0
 80022f6:	029b      	lsls	r3, r3, #10
 80022f8:	401a      	ands	r2, r3
 80022fa:	23c0      	movs	r3, #192	; 0xc0
 80022fc:	029b      	lsls	r3, r3, #10
 80022fe:	429a      	cmp	r2, r3
 8002300:	d10a      	bne.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002302:	4b74      	ldr	r3, [pc, #464]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	2380      	movs	r3, #128	; 0x80
 8002308:	029b      	lsls	r3, r3, #10
 800230a:	401a      	ands	r2, r3
 800230c:	2380      	movs	r3, #128	; 0x80
 800230e:	029b      	lsls	r3, r3, #10
 8002310:	429a      	cmp	r2, r3
 8002312:	d101      	bne.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	e0d8      	b.n	80024ca <HAL_RCCEx_PeriphCLKConfig+0x292>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8002318:	4b6e      	ldr	r3, [pc, #440]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800231a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800231c:	23c0      	movs	r3, #192	; 0xc0
 800231e:	029b      	lsls	r3, r3, #10
 8002320:	4013      	ands	r3, r2
 8002322:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d049      	beq.n	80023be <HAL_RCCEx_PeriphCLKConfig+0x186>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	685a      	ldr	r2, [r3, #4]
 800232e:	23c0      	movs	r3, #192	; 0xc0
 8002330:	029b      	lsls	r3, r3, #10
 8002332:	4013      	ands	r3, r2
 8002334:	68fa      	ldr	r2, [r7, #12]
 8002336:	429a      	cmp	r2, r3
 8002338:	d004      	beq.n	8002344 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	2220      	movs	r2, #32
 8002340:	4013      	ands	r3, r2
 8002342:	d10d      	bne.n	8002360 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	689a      	ldr	r2, [r3, #8]
 8002348:	23c0      	movs	r3, #192	; 0xc0
 800234a:	029b      	lsls	r3, r3, #10
 800234c:	4013      	ands	r3, r2
 800234e:	68fa      	ldr	r2, [r7, #12]
 8002350:	429a      	cmp	r2, r3
 8002352:	d034      	beq.n	80023be <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	2380      	movs	r3, #128	; 0x80
 800235a:	011b      	lsls	r3, r3, #4
 800235c:	4013      	ands	r3, r2
 800235e:	d02e      	beq.n	80023be <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002360:	4b5c      	ldr	r3, [pc, #368]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002362:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002364:	4a5d      	ldr	r2, [pc, #372]	; (80024dc <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8002366:	4013      	ands	r3, r2
 8002368:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800236a:	4b5a      	ldr	r3, [pc, #360]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800236c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800236e:	4b59      	ldr	r3, [pc, #356]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002370:	2180      	movs	r1, #128	; 0x80
 8002372:	0309      	lsls	r1, r1, #12
 8002374:	430a      	orrs	r2, r1
 8002376:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002378:	4b56      	ldr	r3, [pc, #344]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800237a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800237c:	4b55      	ldr	r3, [pc, #340]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800237e:	4958      	ldr	r1, [pc, #352]	; (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8002380:	400a      	ands	r2, r1
 8002382:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8002384:	4b53      	ldr	r3, [pc, #332]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002386:	68fa      	ldr	r2, [r7, #12]
 8002388:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800238a:	68fa      	ldr	r2, [r7, #12]
 800238c:	2380      	movs	r3, #128	; 0x80
 800238e:	005b      	lsls	r3, r3, #1
 8002390:	4013      	ands	r3, r2
 8002392:	d014      	beq.n	80023be <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002394:	f7fe fe4e 	bl	8001034 <HAL_GetTick>
 8002398:	0003      	movs	r3, r0
 800239a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800239c:	e009      	b.n	80023b2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800239e:	f7fe fe49 	bl	8001034 <HAL_GetTick>
 80023a2:	0002      	movs	r2, r0
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	1ad3      	subs	r3, r2, r3
 80023a8:	4a4e      	ldr	r2, [pc, #312]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d901      	bls.n	80023b2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 80023ae:	2303      	movs	r3, #3
 80023b0:	e08b      	b.n	80024ca <HAL_RCCEx_PeriphCLKConfig+0x292>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80023b2:	4b48      	ldr	r3, [pc, #288]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80023b4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80023b6:	2380      	movs	r3, #128	; 0x80
 80023b8:	009b      	lsls	r3, r3, #2
 80023ba:	4013      	ands	r3, r2
 80023bc:	d0ef      	beq.n	800239e <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	685a      	ldr	r2, [r3, #4]
 80023c2:	23c0      	movs	r3, #192	; 0xc0
 80023c4:	029b      	lsls	r3, r3, #10
 80023c6:	401a      	ands	r2, r3
 80023c8:	23c0      	movs	r3, #192	; 0xc0
 80023ca:	029b      	lsls	r3, r3, #10
 80023cc:	429a      	cmp	r2, r3
 80023ce:	d10c      	bne.n	80023ea <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 80023d0:	4b40      	ldr	r3, [pc, #256]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a44      	ldr	r2, [pc, #272]	; (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 80023d6:	4013      	ands	r3, r2
 80023d8:	0019      	movs	r1, r3
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	685a      	ldr	r2, [r3, #4]
 80023de:	23c0      	movs	r3, #192	; 0xc0
 80023e0:	039b      	lsls	r3, r3, #14
 80023e2:	401a      	ands	r2, r3
 80023e4:	4b3b      	ldr	r3, [pc, #236]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80023e6:	430a      	orrs	r2, r1
 80023e8:	601a      	str	r2, [r3, #0]
 80023ea:	4b3a      	ldr	r3, [pc, #232]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80023ec:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	685a      	ldr	r2, [r3, #4]
 80023f2:	23c0      	movs	r3, #192	; 0xc0
 80023f4:	029b      	lsls	r3, r3, #10
 80023f6:	401a      	ands	r2, r3
 80023f8:	4b36      	ldr	r3, [pc, #216]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80023fa:	430a      	orrs	r2, r1
 80023fc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80023fe:	2317      	movs	r3, #23
 8002400:	18fb      	adds	r3, r7, r3
 8002402:	781b      	ldrb	r3, [r3, #0]
 8002404:	2b01      	cmp	r3, #1
 8002406:	d105      	bne.n	8002414 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002408:	4b32      	ldr	r3, [pc, #200]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800240a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800240c:	4b31      	ldr	r3, [pc, #196]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800240e:	4937      	ldr	r1, [pc, #220]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8002410:	400a      	ands	r2, r1
 8002412:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	2201      	movs	r2, #1
 800241a:	4013      	ands	r3, r2
 800241c:	d009      	beq.n	8002432 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800241e:	4b2d      	ldr	r3, [pc, #180]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002420:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002422:	2203      	movs	r2, #3
 8002424:	4393      	bics	r3, r2
 8002426:	0019      	movs	r1, r3
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	68da      	ldr	r2, [r3, #12]
 800242c:	4b29      	ldr	r3, [pc, #164]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800242e:	430a      	orrs	r2, r1
 8002430:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	2202      	movs	r2, #2
 8002438:	4013      	ands	r3, r2
 800243a:	d009      	beq.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800243c:	4b25      	ldr	r3, [pc, #148]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800243e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002440:	220c      	movs	r2, #12
 8002442:	4393      	bics	r3, r2
 8002444:	0019      	movs	r1, r3
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	691a      	ldr	r2, [r3, #16]
 800244a:	4b22      	ldr	r3, [pc, #136]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800244c:	430a      	orrs	r2, r1
 800244e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	2204      	movs	r2, #4
 8002456:	4013      	ands	r3, r2
 8002458:	d009      	beq.n	800246e <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800245a:	4b1e      	ldr	r3, [pc, #120]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800245c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800245e:	4a24      	ldr	r2, [pc, #144]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8002460:	4013      	ands	r3, r2
 8002462:	0019      	movs	r1, r3
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	695a      	ldr	r2, [r3, #20]
 8002468:	4b1a      	ldr	r3, [pc, #104]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800246a:	430a      	orrs	r2, r1
 800246c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	2208      	movs	r2, #8
 8002474:	4013      	ands	r3, r2
 8002476:	d009      	beq.n	800248c <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002478:	4b16      	ldr	r3, [pc, #88]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800247a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800247c:	4a1d      	ldr	r2, [pc, #116]	; (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800247e:	4013      	ands	r3, r2
 8002480:	0019      	movs	r1, r3
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	699a      	ldr	r2, [r3, #24]
 8002486:	4b13      	ldr	r3, [pc, #76]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002488:	430a      	orrs	r2, r1
 800248a:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	2240      	movs	r2, #64	; 0x40
 8002492:	4013      	ands	r3, r2
 8002494:	d009      	beq.n	80024aa <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002496:	4b0f      	ldr	r3, [pc, #60]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002498:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800249a:	4a17      	ldr	r2, [pc, #92]	; (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 800249c:	4013      	ands	r3, r2
 800249e:	0019      	movs	r1, r3
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6a1a      	ldr	r2, [r3, #32]
 80024a4:	4b0b      	ldr	r3, [pc, #44]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80024a6:	430a      	orrs	r2, r1
 80024a8:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	2280      	movs	r2, #128	; 0x80
 80024b0:	4013      	ands	r3, r2
 80024b2:	d009      	beq.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0x290>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80024b4:	4b07      	ldr	r3, [pc, #28]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80024b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024b8:	4a10      	ldr	r2, [pc, #64]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80024ba:	4013      	ands	r3, r2
 80024bc:	0019      	movs	r1, r3
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	69da      	ldr	r2, [r3, #28]
 80024c2:	4b04      	ldr	r3, [pc, #16]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80024c4:	430a      	orrs	r2, r1
 80024c6:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80024c8:	2300      	movs	r3, #0
}
 80024ca:	0018      	movs	r0, r3
 80024cc:	46bd      	mov	sp, r7
 80024ce:	b006      	add	sp, #24
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	46c0      	nop			; (mov r8, r8)
 80024d4:	40021000 	.word	0x40021000
 80024d8:	40007000 	.word	0x40007000
 80024dc:	fffcffff 	.word	0xfffcffff
 80024e0:	fff7ffff 	.word	0xfff7ffff
 80024e4:	00001388 	.word	0x00001388
 80024e8:	ffcfffff 	.word	0xffcfffff
 80024ec:	efffffff 	.word	0xefffffff
 80024f0:	fffff3ff 	.word	0xfffff3ff
 80024f4:	ffffcfff 	.word	0xffffcfff
 80024f8:	fbffffff 	.word	0xfbffffff
 80024fc:	fff3ffff 	.word	0xfff3ffff

08002500 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b082      	sub	sp, #8
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d101      	bne.n	8002512 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e01d      	b.n	800254e <HAL_RNG_Init+0x4e>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	795b      	ldrb	r3, [r3, #5]
 8002516:	b2db      	uxtb	r3, r3
 8002518:	2b00      	cmp	r3, #0
 800251a:	d106      	bne.n	800252a <HAL_RNG_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2200      	movs	r2, #0
 8002520:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	0018      	movs	r0, r3
 8002526:	f7fe fbb7 	bl	8000c98 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2202      	movs	r2, #2
 800252e:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	2104      	movs	r1, #4
 800253c:	430a      	orrs	r2, r1
 800253e:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2201      	movs	r2, #1
 8002544:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2200      	movs	r2, #0
 800254a:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 800254c:	2300      	movs	r3, #0
}
 800254e:	0018      	movs	r0, r3
 8002550:	46bd      	mov	sp, r7
 8002552:	b002      	add	sp, #8
 8002554:	bd80      	pop	{r7, pc}

08002556 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8002556:	b580      	push	{r7, lr}
 8002558:	b084      	sub	sp, #16
 800255a:	af00      	add	r7, sp, #0
 800255c:	6078      	str	r0, [r7, #4]
 800255e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;    
  HAL_StatusTypeDef status = HAL_OK;
 8002560:	230f      	movs	r3, #15
 8002562:	18fb      	adds	r3, r7, r3
 8002564:	2200      	movs	r2, #0
 8002566:	701a      	strb	r2, [r3, #0]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	791b      	ldrb	r3, [r3, #4]
 800256c:	2b01      	cmp	r3, #1
 800256e:	d101      	bne.n	8002574 <HAL_RNG_GenerateRandomNumber+0x1e>
 8002570:	2302      	movs	r3, #2
 8002572:	e042      	b.n	80025fa <HAL_RNG_GenerateRandomNumber+0xa4>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2201      	movs	r2, #1
 8002578:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	795b      	ldrb	r3, [r3, #5]
 800257e:	b2db      	uxtb	r3, r3
 8002580:	2b01      	cmp	r3, #1
 8002582:	d130      	bne.n	80025e6 <HAL_RNG_GenerateRandomNumber+0x90>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2202      	movs	r2, #2
 8002588:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 800258a:	f7fe fd53 	bl	8001034 <HAL_GetTick>
 800258e:	0003      	movs	r3, r0
 8002590:	60bb      	str	r3, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8002592:	e014      	b.n	80025be <HAL_RNG_GenerateRandomNumber+0x68>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8002594:	f7fe fd4e 	bl	8001034 <HAL_GetTick>
 8002598:	0002      	movs	r2, r0
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	2b02      	cmp	r3, #2
 80025a0:	d90d      	bls.n	80025be <HAL_RNG_GenerateRandomNumber+0x68>
      {
        hrng->State = HAL_RNG_STATE_READY;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2201      	movs	r2, #1
 80025a6:	715a      	strb	r2, [r3, #5]
        hrng->ErrorCode |= HAL_RNG_ERROR_TIMEOUT;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	2202      	movs	r2, #2
 80025ae:	431a      	orrs	r2, r3
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	609a      	str	r2, [r3, #8]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2200      	movs	r2, #0
 80025b8:	711a      	strb	r2, [r3, #4]
        return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e01d      	b.n	80025fa <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	2201      	movs	r2, #1
 80025c6:	4013      	ands	r3, r2
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	d1e3      	bne.n	8002594 <HAL_RNG_GenerateRandomNumber+0x3e>
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	689a      	ldr	r2, [r3, #8]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	68da      	ldr	r2, [r3, #12]
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2201      	movs	r2, #1
 80025e2:	715a      	strb	r2, [r3, #5]
 80025e4:	e003      	b.n	80025ee <HAL_RNG_GenerateRandomNumber+0x98>
  }
  else
  {
    status = HAL_ERROR;
 80025e6:	230f      	movs	r3, #15
 80025e8:	18fb      	adds	r3, r7, r3
 80025ea:	2201      	movs	r2, #1
 80025ec:	701a      	strb	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2200      	movs	r2, #0
 80025f2:	711a      	strb	r2, [r3, #4]

  return status;
 80025f4:	230f      	movs	r3, #15
 80025f6:	18fb      	adds	r3, r7, r3
 80025f8:	781b      	ldrb	r3, [r3, #0]
}
 80025fa:	0018      	movs	r0, r3
 80025fc:	46bd      	mov	sp, r7
 80025fe:	b004      	add	sp, #16
 8002600:	bd80      	pop	{r7, pc}

08002602 <HAL_RNG_GetRandomNumber>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval Random value
  */
uint32_t HAL_RNG_GetRandomNumber(RNG_HandleTypeDef *hrng)
{
 8002602:	b580      	push	{r7, lr}
 8002604:	b082      	sub	sp, #8
 8002606:	af00      	add	r7, sp, #0
 8002608:	6078      	str	r0, [r7, #4]
  if(HAL_RNG_GenerateRandomNumber(hrng, &(hrng->RandomNumber)) == HAL_OK)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	330c      	adds	r3, #12
 800260e:	001a      	movs	r2, r3
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	0011      	movs	r1, r2
 8002614:	0018      	movs	r0, r3
 8002616:	f7ff ff9e 	bl	8002556 <HAL_RNG_GenerateRandomNumber>
 800261a:	1e03      	subs	r3, r0, #0
 800261c:	d102      	bne.n	8002624 <HAL_RNG_GetRandomNumber+0x22>
  {
    return hrng->RandomNumber; 
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	68db      	ldr	r3, [r3, #12]
 8002622:	e000      	b.n	8002626 <HAL_RNG_GetRandomNumber+0x24>
  }
  else
  {
    return 0U;
 8002624:	2300      	movs	r3, #0
  }
}
 8002626:	0018      	movs	r0, r3
 8002628:	46bd      	mov	sp, r7
 800262a:	b002      	add	sp, #8
 800262c:	bd80      	pop	{r7, pc}
	...

08002630 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b082      	sub	sp, #8
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d101      	bne.n	8002642 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	e083      	b.n	800274a <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002646:	2b00      	cmp	r3, #0
 8002648:	d109      	bne.n	800265e <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	685a      	ldr	r2, [r3, #4]
 800264e:	2382      	movs	r3, #130	; 0x82
 8002650:	005b      	lsls	r3, r3, #1
 8002652:	429a      	cmp	r2, r3
 8002654:	d009      	beq.n	800266a <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2200      	movs	r2, #0
 800265a:	61da      	str	r2, [r3, #28]
 800265c:	e005      	b.n	800266a <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2200      	movs	r2, #0
 8002662:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2200      	movs	r2, #0
 8002668:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2200      	movs	r2, #0
 800266e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2251      	movs	r2, #81	; 0x51
 8002674:	5c9b      	ldrb	r3, [r3, r2]
 8002676:	b2db      	uxtb	r3, r3
 8002678:	2b00      	cmp	r3, #0
 800267a:	d107      	bne.n	800268c <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2250      	movs	r2, #80	; 0x50
 8002680:	2100      	movs	r1, #0
 8002682:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	0018      	movs	r0, r3
 8002688:	f7fe fb26 	bl	8000cd8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2251      	movs	r2, #81	; 0x51
 8002690:	2102      	movs	r1, #2
 8002692:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	2140      	movs	r1, #64	; 0x40
 80026a0:	438a      	bics	r2, r1
 80026a2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	685a      	ldr	r2, [r3, #4]
 80026a8:	2382      	movs	r3, #130	; 0x82
 80026aa:	005b      	lsls	r3, r3, #1
 80026ac:	401a      	ands	r2, r3
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6899      	ldr	r1, [r3, #8]
 80026b2:	2384      	movs	r3, #132	; 0x84
 80026b4:	021b      	lsls	r3, r3, #8
 80026b6:	400b      	ands	r3, r1
 80026b8:	431a      	orrs	r2, r3
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	68d9      	ldr	r1, [r3, #12]
 80026be:	2380      	movs	r3, #128	; 0x80
 80026c0:	011b      	lsls	r3, r3, #4
 80026c2:	400b      	ands	r3, r1
 80026c4:	431a      	orrs	r2, r3
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	691b      	ldr	r3, [r3, #16]
 80026ca:	2102      	movs	r1, #2
 80026cc:	400b      	ands	r3, r1
 80026ce:	431a      	orrs	r2, r3
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	695b      	ldr	r3, [r3, #20]
 80026d4:	2101      	movs	r1, #1
 80026d6:	400b      	ands	r3, r1
 80026d8:	431a      	orrs	r2, r3
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6999      	ldr	r1, [r3, #24]
 80026de:	2380      	movs	r3, #128	; 0x80
 80026e0:	009b      	lsls	r3, r3, #2
 80026e2:	400b      	ands	r3, r1
 80026e4:	431a      	orrs	r2, r3
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	69db      	ldr	r3, [r3, #28]
 80026ea:	2138      	movs	r1, #56	; 0x38
 80026ec:	400b      	ands	r3, r1
 80026ee:	431a      	orrs	r2, r3
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6a1b      	ldr	r3, [r3, #32]
 80026f4:	2180      	movs	r1, #128	; 0x80
 80026f6:	400b      	ands	r3, r1
 80026f8:	431a      	orrs	r2, r3
 80026fa:	0011      	movs	r1, r2
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002700:	2380      	movs	r3, #128	; 0x80
 8002702:	019b      	lsls	r3, r3, #6
 8002704:	401a      	ands	r2, r3
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	430a      	orrs	r2, r1
 800270c:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	699b      	ldr	r3, [r3, #24]
 8002712:	0c1b      	lsrs	r3, r3, #16
 8002714:	2204      	movs	r2, #4
 8002716:	4013      	ands	r3, r2
 8002718:	0019      	movs	r1, r3
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800271e:	2210      	movs	r2, #16
 8002720:	401a      	ands	r2, r3
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	430a      	orrs	r2, r1
 8002728:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	69da      	ldr	r2, [r3, #28]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4907      	ldr	r1, [pc, #28]	; (8002754 <HAL_SPI_Init+0x124>)
 8002736:	400a      	ands	r2, r1
 8002738:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2200      	movs	r2, #0
 800273e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2251      	movs	r2, #81	; 0x51
 8002744:	2101      	movs	r1, #1
 8002746:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002748:	2300      	movs	r3, #0
}
 800274a:	0018      	movs	r0, r3
 800274c:	46bd      	mov	sp, r7
 800274e:	b002      	add	sp, #8
 8002750:	bd80      	pop	{r7, pc}
 8002752:	46c0      	nop			; (mov r8, r8)
 8002754:	fffff7ff 	.word	0xfffff7ff

08002758 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b088      	sub	sp, #32
 800275c:	af00      	add	r7, sp, #0
 800275e:	60f8      	str	r0, [r7, #12]
 8002760:	60b9      	str	r1, [r7, #8]
 8002762:	603b      	str	r3, [r7, #0]
 8002764:	1dbb      	adds	r3, r7, #6
 8002766:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002768:	231f      	movs	r3, #31
 800276a:	18fb      	adds	r3, r7, r3
 800276c:	2200      	movs	r2, #0
 800276e:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	2250      	movs	r2, #80	; 0x50
 8002774:	5c9b      	ldrb	r3, [r3, r2]
 8002776:	2b01      	cmp	r3, #1
 8002778:	d101      	bne.n	800277e <HAL_SPI_Transmit+0x26>
 800277a:	2302      	movs	r3, #2
 800277c:	e13e      	b.n	80029fc <HAL_SPI_Transmit+0x2a4>
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	2250      	movs	r2, #80	; 0x50
 8002782:	2101      	movs	r1, #1
 8002784:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002786:	f7fe fc55 	bl	8001034 <HAL_GetTick>
 800278a:	0003      	movs	r3, r0
 800278c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800278e:	2316      	movs	r3, #22
 8002790:	18fb      	adds	r3, r7, r3
 8002792:	1dba      	adds	r2, r7, #6
 8002794:	8812      	ldrh	r2, [r2, #0]
 8002796:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	2251      	movs	r2, #81	; 0x51
 800279c:	5c9b      	ldrb	r3, [r3, r2]
 800279e:	b2db      	uxtb	r3, r3
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	d004      	beq.n	80027ae <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 80027a4:	231f      	movs	r3, #31
 80027a6:	18fb      	adds	r3, r7, r3
 80027a8:	2202      	movs	r2, #2
 80027aa:	701a      	strb	r2, [r3, #0]
    goto error;
 80027ac:	e11b      	b.n	80029e6 <HAL_SPI_Transmit+0x28e>
  }

  if ((pData == NULL) || (Size == 0U))
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d003      	beq.n	80027bc <HAL_SPI_Transmit+0x64>
 80027b4:	1dbb      	adds	r3, r7, #6
 80027b6:	881b      	ldrh	r3, [r3, #0]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d104      	bne.n	80027c6 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 80027bc:	231f      	movs	r3, #31
 80027be:	18fb      	adds	r3, r7, r3
 80027c0:	2201      	movs	r2, #1
 80027c2:	701a      	strb	r2, [r3, #0]
    goto error;
 80027c4:	e10f      	b.n	80029e6 <HAL_SPI_Transmit+0x28e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	2251      	movs	r2, #81	; 0x51
 80027ca:	2103      	movs	r1, #3
 80027cc:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2200      	movs	r2, #0
 80027d2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	68ba      	ldr	r2, [r7, #8]
 80027d8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	1dba      	adds	r2, r7, #6
 80027de:	8812      	ldrh	r2, [r2, #0]
 80027e0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	1dba      	adds	r2, r7, #6
 80027e6:	8812      	ldrh	r2, [r2, #0]
 80027e8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	2200      	movs	r2, #0
 80027ee:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	2200      	movs	r2, #0
 80027f4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	2200      	movs	r2, #0
 80027fa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	2200      	movs	r2, #0
 8002800:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	2200      	movs	r2, #0
 8002806:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	689a      	ldr	r2, [r3, #8]
 800280c:	2380      	movs	r3, #128	; 0x80
 800280e:	021b      	lsls	r3, r3, #8
 8002810:	429a      	cmp	r2, r3
 8002812:	d110      	bne.n	8002836 <HAL_SPI_Transmit+0xde>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	681a      	ldr	r2, [r3, #0]
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	2140      	movs	r1, #64	; 0x40
 8002820:	438a      	bics	r2, r1
 8002822:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	2180      	movs	r1, #128	; 0x80
 8002830:	01c9      	lsls	r1, r1, #7
 8002832:	430a      	orrs	r2, r1
 8002834:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	2240      	movs	r2, #64	; 0x40
 800283e:	4013      	ands	r3, r2
 8002840:	2b40      	cmp	r3, #64	; 0x40
 8002842:	d007      	beq.n	8002854 <HAL_SPI_Transmit+0xfc>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	2140      	movs	r1, #64	; 0x40
 8002850:	430a      	orrs	r2, r1
 8002852:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	68da      	ldr	r2, [r3, #12]
 8002858:	2380      	movs	r3, #128	; 0x80
 800285a:	011b      	lsls	r3, r3, #4
 800285c:	429a      	cmp	r2, r3
 800285e:	d14e      	bne.n	80028fe <HAL_SPI_Transmit+0x1a6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d004      	beq.n	8002872 <HAL_SPI_Transmit+0x11a>
 8002868:	2316      	movs	r3, #22
 800286a:	18fb      	adds	r3, r7, r3
 800286c:	881b      	ldrh	r3, [r3, #0]
 800286e:	2b01      	cmp	r3, #1
 8002870:	d13f      	bne.n	80028f2 <HAL_SPI_Transmit+0x19a>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002876:	881a      	ldrh	r2, [r3, #0]
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002882:	1c9a      	adds	r2, r3, #2
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800288c:	b29b      	uxth	r3, r3
 800288e:	3b01      	subs	r3, #1
 8002890:	b29a      	uxth	r2, r3
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002896:	e02c      	b.n	80028f2 <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	2202      	movs	r2, #2
 80028a0:	4013      	ands	r3, r2
 80028a2:	2b02      	cmp	r3, #2
 80028a4:	d112      	bne.n	80028cc <HAL_SPI_Transmit+0x174>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028aa:	881a      	ldrh	r2, [r3, #0]
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b6:	1c9a      	adds	r2, r3, #2
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028c0:	b29b      	uxth	r3, r3
 80028c2:	3b01      	subs	r3, #1
 80028c4:	b29a      	uxth	r2, r3
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	86da      	strh	r2, [r3, #54]	; 0x36
 80028ca:	e012      	b.n	80028f2 <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80028cc:	f7fe fbb2 	bl	8001034 <HAL_GetTick>
 80028d0:	0002      	movs	r2, r0
 80028d2:	69bb      	ldr	r3, [r7, #24]
 80028d4:	1ad3      	subs	r3, r2, r3
 80028d6:	683a      	ldr	r2, [r7, #0]
 80028d8:	429a      	cmp	r2, r3
 80028da:	d802      	bhi.n	80028e2 <HAL_SPI_Transmit+0x18a>
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	3301      	adds	r3, #1
 80028e0:	d102      	bne.n	80028e8 <HAL_SPI_Transmit+0x190>
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d104      	bne.n	80028f2 <HAL_SPI_Transmit+0x19a>
        {
          errorcode = HAL_TIMEOUT;
 80028e8:	231f      	movs	r3, #31
 80028ea:	18fb      	adds	r3, r7, r3
 80028ec:	2203      	movs	r2, #3
 80028ee:	701a      	strb	r2, [r3, #0]
          goto error;
 80028f0:	e079      	b.n	80029e6 <HAL_SPI_Transmit+0x28e>
    while (hspi->TxXferCount > 0U)
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028f6:	b29b      	uxth	r3, r3
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d1cd      	bne.n	8002898 <HAL_SPI_Transmit+0x140>
 80028fc:	e04f      	b.n	800299e <HAL_SPI_Transmit+0x246>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d004      	beq.n	8002910 <HAL_SPI_Transmit+0x1b8>
 8002906:	2316      	movs	r3, #22
 8002908:	18fb      	adds	r3, r7, r3
 800290a:	881b      	ldrh	r3, [r3, #0]
 800290c:	2b01      	cmp	r3, #1
 800290e:	d141      	bne.n	8002994 <HAL_SPI_Transmit+0x23c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	330c      	adds	r3, #12
 800291a:	7812      	ldrb	r2, [r2, #0]
 800291c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002922:	1c5a      	adds	r2, r3, #1
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800292c:	b29b      	uxth	r3, r3
 800292e:	3b01      	subs	r3, #1
 8002930:	b29a      	uxth	r2, r3
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002936:	e02d      	b.n	8002994 <HAL_SPI_Transmit+0x23c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	2202      	movs	r2, #2
 8002940:	4013      	ands	r3, r2
 8002942:	2b02      	cmp	r3, #2
 8002944:	d113      	bne.n	800296e <HAL_SPI_Transmit+0x216>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	330c      	adds	r3, #12
 8002950:	7812      	ldrb	r2, [r2, #0]
 8002952:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002958:	1c5a      	adds	r2, r3, #1
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002962:	b29b      	uxth	r3, r3
 8002964:	3b01      	subs	r3, #1
 8002966:	b29a      	uxth	r2, r3
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	86da      	strh	r2, [r3, #54]	; 0x36
 800296c:	e012      	b.n	8002994 <HAL_SPI_Transmit+0x23c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800296e:	f7fe fb61 	bl	8001034 <HAL_GetTick>
 8002972:	0002      	movs	r2, r0
 8002974:	69bb      	ldr	r3, [r7, #24]
 8002976:	1ad3      	subs	r3, r2, r3
 8002978:	683a      	ldr	r2, [r7, #0]
 800297a:	429a      	cmp	r2, r3
 800297c:	d802      	bhi.n	8002984 <HAL_SPI_Transmit+0x22c>
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	3301      	adds	r3, #1
 8002982:	d102      	bne.n	800298a <HAL_SPI_Transmit+0x232>
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d104      	bne.n	8002994 <HAL_SPI_Transmit+0x23c>
        {
          errorcode = HAL_TIMEOUT;
 800298a:	231f      	movs	r3, #31
 800298c:	18fb      	adds	r3, r7, r3
 800298e:	2203      	movs	r2, #3
 8002990:	701a      	strb	r2, [r3, #0]
          goto error;
 8002992:	e028      	b.n	80029e6 <HAL_SPI_Transmit+0x28e>
    while (hspi->TxXferCount > 0U)
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002998:	b29b      	uxth	r3, r3
 800299a:	2b00      	cmp	r3, #0
 800299c:	d1cc      	bne.n	8002938 <HAL_SPI_Transmit+0x1e0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800299e:	69ba      	ldr	r2, [r7, #24]
 80029a0:	6839      	ldr	r1, [r7, #0]
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	0018      	movs	r0, r3
 80029a6:	f000 f8bb 	bl	8002b20 <SPI_EndRxTxTransaction>
 80029aa:	1e03      	subs	r3, r0, #0
 80029ac:	d002      	beq.n	80029b4 <HAL_SPI_Transmit+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	2220      	movs	r2, #32
 80029b2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d10a      	bne.n	80029d2 <HAL_SPI_Transmit+0x27a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80029bc:	2300      	movs	r3, #0
 80029be:	613b      	str	r3, [r7, #16]
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	68db      	ldr	r3, [r3, #12]
 80029c6:	613b      	str	r3, [r7, #16]
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	613b      	str	r3, [r7, #16]
 80029d0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d004      	beq.n	80029e4 <HAL_SPI_Transmit+0x28c>
  {
    errorcode = HAL_ERROR;
 80029da:	231f      	movs	r3, #31
 80029dc:	18fb      	adds	r3, r7, r3
 80029de:	2201      	movs	r2, #1
 80029e0:	701a      	strb	r2, [r3, #0]
 80029e2:	e000      	b.n	80029e6 <HAL_SPI_Transmit+0x28e>
  }

error:
 80029e4:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	2251      	movs	r2, #81	; 0x51
 80029ea:	2101      	movs	r1, #1
 80029ec:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	2250      	movs	r2, #80	; 0x50
 80029f2:	2100      	movs	r1, #0
 80029f4:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80029f6:	231f      	movs	r3, #31
 80029f8:	18fb      	adds	r3, r7, r3
 80029fa:	781b      	ldrb	r3, [r3, #0]
}
 80029fc:	0018      	movs	r0, r3
 80029fe:	46bd      	mov	sp, r7
 8002a00:	b008      	add	sp, #32
 8002a02:	bd80      	pop	{r7, pc}

08002a04 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b088      	sub	sp, #32
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	60f8      	str	r0, [r7, #12]
 8002a0c:	60b9      	str	r1, [r7, #8]
 8002a0e:	603b      	str	r3, [r7, #0]
 8002a10:	1dfb      	adds	r3, r7, #7
 8002a12:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002a14:	f7fe fb0e 	bl	8001034 <HAL_GetTick>
 8002a18:	0002      	movs	r2, r0
 8002a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a1c:	1a9b      	subs	r3, r3, r2
 8002a1e:	683a      	ldr	r2, [r7, #0]
 8002a20:	18d3      	adds	r3, r2, r3
 8002a22:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002a24:	f7fe fb06 	bl	8001034 <HAL_GetTick>
 8002a28:	0003      	movs	r3, r0
 8002a2a:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002a2c:	4b3a      	ldr	r3, [pc, #232]	; (8002b18 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	015b      	lsls	r3, r3, #5
 8002a32:	0d1b      	lsrs	r3, r3, #20
 8002a34:	69fa      	ldr	r2, [r7, #28]
 8002a36:	4353      	muls	r3, r2
 8002a38:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002a3a:	e058      	b.n	8002aee <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	3301      	adds	r3, #1
 8002a40:	d055      	beq.n	8002aee <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002a42:	f7fe faf7 	bl	8001034 <HAL_GetTick>
 8002a46:	0002      	movs	r2, r0
 8002a48:	69bb      	ldr	r3, [r7, #24]
 8002a4a:	1ad3      	subs	r3, r2, r3
 8002a4c:	69fa      	ldr	r2, [r7, #28]
 8002a4e:	429a      	cmp	r2, r3
 8002a50:	d902      	bls.n	8002a58 <SPI_WaitFlagStateUntilTimeout+0x54>
 8002a52:	69fb      	ldr	r3, [r7, #28]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d142      	bne.n	8002ade <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	685a      	ldr	r2, [r3, #4]
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	21e0      	movs	r1, #224	; 0xe0
 8002a64:	438a      	bics	r2, r1
 8002a66:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	685a      	ldr	r2, [r3, #4]
 8002a6c:	2382      	movs	r3, #130	; 0x82
 8002a6e:	005b      	lsls	r3, r3, #1
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d113      	bne.n	8002a9c <SPI_WaitFlagStateUntilTimeout+0x98>
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	689a      	ldr	r2, [r3, #8]
 8002a78:	2380      	movs	r3, #128	; 0x80
 8002a7a:	021b      	lsls	r3, r3, #8
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d005      	beq.n	8002a8c <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	689a      	ldr	r2, [r3, #8]
 8002a84:	2380      	movs	r3, #128	; 0x80
 8002a86:	00db      	lsls	r3, r3, #3
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	d107      	bne.n	8002a9c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	2140      	movs	r1, #64	; 0x40
 8002a98:	438a      	bics	r2, r1
 8002a9a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002aa0:	2380      	movs	r3, #128	; 0x80
 8002aa2:	019b      	lsls	r3, r3, #6
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d110      	bne.n	8002aca <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	681a      	ldr	r2, [r3, #0]
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	491a      	ldr	r1, [pc, #104]	; (8002b1c <SPI_WaitFlagStateUntilTimeout+0x118>)
 8002ab4:	400a      	ands	r2, r1
 8002ab6:	601a      	str	r2, [r3, #0]
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	2180      	movs	r1, #128	; 0x80
 8002ac4:	0189      	lsls	r1, r1, #6
 8002ac6:	430a      	orrs	r2, r1
 8002ac8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2251      	movs	r2, #81	; 0x51
 8002ace:	2101      	movs	r1, #1
 8002ad0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	2250      	movs	r2, #80	; 0x50
 8002ad6:	2100      	movs	r1, #0
 8002ad8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002ada:	2303      	movs	r3, #3
 8002adc:	e017      	b.n	8002b0e <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d101      	bne.n	8002ae8 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	3b01      	subs	r3, #1
 8002aec:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	68ba      	ldr	r2, [r7, #8]
 8002af6:	4013      	ands	r3, r2
 8002af8:	68ba      	ldr	r2, [r7, #8]
 8002afa:	1ad3      	subs	r3, r2, r3
 8002afc:	425a      	negs	r2, r3
 8002afe:	4153      	adcs	r3, r2
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	001a      	movs	r2, r3
 8002b04:	1dfb      	adds	r3, r7, #7
 8002b06:	781b      	ldrb	r3, [r3, #0]
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	d197      	bne.n	8002a3c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002b0c:	2300      	movs	r3, #0
}
 8002b0e:	0018      	movs	r0, r3
 8002b10:	46bd      	mov	sp, r7
 8002b12:	b008      	add	sp, #32
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	46c0      	nop			; (mov r8, r8)
 8002b18:	20000008 	.word	0x20000008
 8002b1c:	ffffdfff 	.word	0xffffdfff

08002b20 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b088      	sub	sp, #32
 8002b24:	af02      	add	r7, sp, #8
 8002b26:	60f8      	str	r0, [r7, #12]
 8002b28:	60b9      	str	r1, [r7, #8]
 8002b2a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002b2c:	4b1d      	ldr	r3, [pc, #116]	; (8002ba4 <SPI_EndRxTxTransaction+0x84>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	491d      	ldr	r1, [pc, #116]	; (8002ba8 <SPI_EndRxTxTransaction+0x88>)
 8002b32:	0018      	movs	r0, r3
 8002b34:	f7fd fae8 	bl	8000108 <__udivsi3>
 8002b38:	0003      	movs	r3, r0
 8002b3a:	001a      	movs	r2, r3
 8002b3c:	0013      	movs	r3, r2
 8002b3e:	015b      	lsls	r3, r3, #5
 8002b40:	1a9b      	subs	r3, r3, r2
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	189b      	adds	r3, r3, r2
 8002b46:	00db      	lsls	r3, r3, #3
 8002b48:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	685a      	ldr	r2, [r3, #4]
 8002b4e:	2382      	movs	r3, #130	; 0x82
 8002b50:	005b      	lsls	r3, r3, #1
 8002b52:	429a      	cmp	r2, r3
 8002b54:	d112      	bne.n	8002b7c <SPI_EndRxTxTransaction+0x5c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002b56:	68ba      	ldr	r2, [r7, #8]
 8002b58:	68f8      	ldr	r0, [r7, #12]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	9300      	str	r3, [sp, #0]
 8002b5e:	0013      	movs	r3, r2
 8002b60:	2200      	movs	r2, #0
 8002b62:	2180      	movs	r1, #128	; 0x80
 8002b64:	f7ff ff4e 	bl	8002a04 <SPI_WaitFlagStateUntilTimeout>
 8002b68:	1e03      	subs	r3, r0, #0
 8002b6a:	d016      	beq.n	8002b9a <SPI_EndRxTxTransaction+0x7a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b70:	2220      	movs	r2, #32
 8002b72:	431a      	orrs	r2, r3
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002b78:	2303      	movs	r3, #3
 8002b7a:	e00f      	b.n	8002b9c <SPI_EndRxTxTransaction+0x7c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d00a      	beq.n	8002b98 <SPI_EndRxTxTransaction+0x78>
      {
        break;
      }
      count--;
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	3b01      	subs	r3, #1
 8002b86:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	2280      	movs	r2, #128	; 0x80
 8002b90:	4013      	ands	r3, r2
 8002b92:	2b80      	cmp	r3, #128	; 0x80
 8002b94:	d0f2      	beq.n	8002b7c <SPI_EndRxTxTransaction+0x5c>
 8002b96:	e000      	b.n	8002b9a <SPI_EndRxTxTransaction+0x7a>
        break;
 8002b98:	46c0      	nop			; (mov r8, r8)
  }

  return HAL_OK;
 8002b9a:	2300      	movs	r3, #0
}
 8002b9c:	0018      	movs	r0, r3
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	b006      	add	sp, #24
 8002ba2:	bd80      	pop	{r7, pc}
 8002ba4:	20000008 	.word	0x20000008
 8002ba8:	016e3600 	.word	0x016e3600

08002bac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b082      	sub	sp, #8
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d101      	bne.n	8002bbe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e032      	b.n	8002c24 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2239      	movs	r2, #57	; 0x39
 8002bc2:	5c9b      	ldrb	r3, [r3, r2]
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d107      	bne.n	8002bda <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2238      	movs	r2, #56	; 0x38
 8002bce:	2100      	movs	r1, #0
 8002bd0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	0018      	movs	r0, r3
 8002bd6:	f7fe f8c3 	bl	8000d60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2239      	movs	r2, #57	; 0x39
 8002bde:	2102      	movs	r1, #2
 8002be0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681a      	ldr	r2, [r3, #0]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	3304      	adds	r3, #4
 8002bea:	0019      	movs	r1, r3
 8002bec:	0010      	movs	r0, r2
 8002bee:	f000 fa43 	bl	8003078 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	223e      	movs	r2, #62	; 0x3e
 8002bf6:	2101      	movs	r1, #1
 8002bf8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	223a      	movs	r2, #58	; 0x3a
 8002bfe:	2101      	movs	r1, #1
 8002c00:	5499      	strb	r1, [r3, r2]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	223b      	movs	r2, #59	; 0x3b
 8002c06:	2101      	movs	r1, #1
 8002c08:	5499      	strb	r1, [r3, r2]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	223c      	movs	r2, #60	; 0x3c
 8002c0e:	2101      	movs	r1, #1
 8002c10:	5499      	strb	r1, [r3, r2]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	223d      	movs	r2, #61	; 0x3d
 8002c16:	2101      	movs	r1, #1
 8002c18:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2239      	movs	r2, #57	; 0x39
 8002c1e:	2101      	movs	r1, #1
 8002c20:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002c22:	2300      	movs	r3, #0
}
 8002c24:	0018      	movs	r0, r3
 8002c26:	46bd      	mov	sp, r7
 8002c28:	b002      	add	sp, #8
 8002c2a:	bd80      	pop	{r7, pc}

08002c2c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b084      	sub	sp, #16
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2239      	movs	r2, #57	; 0x39
 8002c38:	5c9b      	ldrb	r3, [r3, r2]
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	d001      	beq.n	8002c44 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	e036      	b.n	8002cb2 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2239      	movs	r2, #57	; 0x39
 8002c48:	2102      	movs	r1, #2
 8002c4a:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	68da      	ldr	r2, [r3, #12]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	2101      	movs	r1, #1
 8002c58:	430a      	orrs	r2, r1
 8002c5a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	2380      	movs	r3, #128	; 0x80
 8002c62:	05db      	lsls	r3, r3, #23
 8002c64:	429a      	cmp	r2, r3
 8002c66:	d009      	beq.n	8002c7c <HAL_TIM_Base_Start_IT+0x50>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a13      	ldr	r2, [pc, #76]	; (8002cbc <HAL_TIM_Base_Start_IT+0x90>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d004      	beq.n	8002c7c <HAL_TIM_Base_Start_IT+0x50>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a12      	ldr	r2, [pc, #72]	; (8002cc0 <HAL_TIM_Base_Start_IT+0x94>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d111      	bne.n	8002ca0 <HAL_TIM_Base_Start_IT+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	2207      	movs	r2, #7
 8002c84:	4013      	ands	r3, r2
 8002c86:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2b06      	cmp	r3, #6
 8002c8c:	d010      	beq.n	8002cb0 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	681a      	ldr	r2, [r3, #0]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	2101      	movs	r1, #1
 8002c9a:	430a      	orrs	r2, r1
 8002c9c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c9e:	e007      	b.n	8002cb0 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	681a      	ldr	r2, [r3, #0]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	2101      	movs	r1, #1
 8002cac:	430a      	orrs	r2, r1
 8002cae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002cb0:	2300      	movs	r3, #0
}
 8002cb2:	0018      	movs	r0, r3
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	b004      	add	sp, #16
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	46c0      	nop			; (mov r8, r8)
 8002cbc:	40010800 	.word	0x40010800
 8002cc0:	40011400 	.word	0x40011400

08002cc4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b082      	sub	sp, #8
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	691b      	ldr	r3, [r3, #16]
 8002cd2:	2202      	movs	r2, #2
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	2b02      	cmp	r3, #2
 8002cd8:	d124      	bne.n	8002d24 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	68db      	ldr	r3, [r3, #12]
 8002ce0:	2202      	movs	r2, #2
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	2b02      	cmp	r3, #2
 8002ce6:	d11d      	bne.n	8002d24 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	2203      	movs	r2, #3
 8002cee:	4252      	negs	r2, r2
 8002cf0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	699b      	ldr	r3, [r3, #24]
 8002cfe:	2203      	movs	r2, #3
 8002d00:	4013      	ands	r3, r2
 8002d02:	d004      	beq.n	8002d0e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	0018      	movs	r0, r3
 8002d08:	f000 f99e 	bl	8003048 <HAL_TIM_IC_CaptureCallback>
 8002d0c:	e007      	b.n	8002d1e <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	0018      	movs	r0, r3
 8002d12:	f000 f991 	bl	8003038 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	0018      	movs	r0, r3
 8002d1a:	f000 f99d 	bl	8003058 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2200      	movs	r2, #0
 8002d22:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	691b      	ldr	r3, [r3, #16]
 8002d2a:	2204      	movs	r2, #4
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	2b04      	cmp	r3, #4
 8002d30:	d125      	bne.n	8002d7e <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	68db      	ldr	r3, [r3, #12]
 8002d38:	2204      	movs	r2, #4
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	2b04      	cmp	r3, #4
 8002d3e:	d11e      	bne.n	8002d7e <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	2205      	movs	r2, #5
 8002d46:	4252      	negs	r2, r2
 8002d48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2202      	movs	r2, #2
 8002d4e:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	699a      	ldr	r2, [r3, #24]
 8002d56:	23c0      	movs	r3, #192	; 0xc0
 8002d58:	009b      	lsls	r3, r3, #2
 8002d5a:	4013      	ands	r3, r2
 8002d5c:	d004      	beq.n	8002d68 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	0018      	movs	r0, r3
 8002d62:	f000 f971 	bl	8003048 <HAL_TIM_IC_CaptureCallback>
 8002d66:	e007      	b.n	8002d78 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	0018      	movs	r0, r3
 8002d6c:	f000 f964 	bl	8003038 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	0018      	movs	r0, r3
 8002d74:	f000 f970 	bl	8003058 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	691b      	ldr	r3, [r3, #16]
 8002d84:	2208      	movs	r2, #8
 8002d86:	4013      	ands	r3, r2
 8002d88:	2b08      	cmp	r3, #8
 8002d8a:	d124      	bne.n	8002dd6 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	68db      	ldr	r3, [r3, #12]
 8002d92:	2208      	movs	r2, #8
 8002d94:	4013      	ands	r3, r2
 8002d96:	2b08      	cmp	r3, #8
 8002d98:	d11d      	bne.n	8002dd6 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	2209      	movs	r2, #9
 8002da0:	4252      	negs	r2, r2
 8002da2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2204      	movs	r2, #4
 8002da8:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	69db      	ldr	r3, [r3, #28]
 8002db0:	2203      	movs	r2, #3
 8002db2:	4013      	ands	r3, r2
 8002db4:	d004      	beq.n	8002dc0 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	0018      	movs	r0, r3
 8002dba:	f000 f945 	bl	8003048 <HAL_TIM_IC_CaptureCallback>
 8002dbe:	e007      	b.n	8002dd0 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	0018      	movs	r0, r3
 8002dc4:	f000 f938 	bl	8003038 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	0018      	movs	r0, r3
 8002dcc:	f000 f944 	bl	8003058 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	691b      	ldr	r3, [r3, #16]
 8002ddc:	2210      	movs	r2, #16
 8002dde:	4013      	ands	r3, r2
 8002de0:	2b10      	cmp	r3, #16
 8002de2:	d125      	bne.n	8002e30 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	68db      	ldr	r3, [r3, #12]
 8002dea:	2210      	movs	r2, #16
 8002dec:	4013      	ands	r3, r2
 8002dee:	2b10      	cmp	r3, #16
 8002df0:	d11e      	bne.n	8002e30 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	2211      	movs	r2, #17
 8002df8:	4252      	negs	r2, r2
 8002dfa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2208      	movs	r2, #8
 8002e00:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	69da      	ldr	r2, [r3, #28]
 8002e08:	23c0      	movs	r3, #192	; 0xc0
 8002e0a:	009b      	lsls	r3, r3, #2
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	d004      	beq.n	8002e1a <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	0018      	movs	r0, r3
 8002e14:	f000 f918 	bl	8003048 <HAL_TIM_IC_CaptureCallback>
 8002e18:	e007      	b.n	8002e2a <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	0018      	movs	r0, r3
 8002e1e:	f000 f90b 	bl	8003038 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	0018      	movs	r0, r3
 8002e26:	f000 f917 	bl	8003058 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	691b      	ldr	r3, [r3, #16]
 8002e36:	2201      	movs	r2, #1
 8002e38:	4013      	ands	r3, r2
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	d10f      	bne.n	8002e5e <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	68db      	ldr	r3, [r3, #12]
 8002e44:	2201      	movs	r2, #1
 8002e46:	4013      	ands	r3, r2
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	d108      	bne.n	8002e5e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	2202      	movs	r2, #2
 8002e52:	4252      	negs	r2, r2
 8002e54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	0018      	movs	r0, r3
 8002e5a:	f000 f8e5 	bl	8003028 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	691b      	ldr	r3, [r3, #16]
 8002e64:	2240      	movs	r2, #64	; 0x40
 8002e66:	4013      	ands	r3, r2
 8002e68:	2b40      	cmp	r3, #64	; 0x40
 8002e6a:	d10f      	bne.n	8002e8c <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	68db      	ldr	r3, [r3, #12]
 8002e72:	2240      	movs	r2, #64	; 0x40
 8002e74:	4013      	ands	r3, r2
 8002e76:	2b40      	cmp	r3, #64	; 0x40
 8002e78:	d108      	bne.n	8002e8c <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	2241      	movs	r2, #65	; 0x41
 8002e80:	4252      	negs	r2, r2
 8002e82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	0018      	movs	r0, r3
 8002e88:	f000 f8ee 	bl	8003068 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002e8c:	46c0      	nop			; (mov r8, r8)
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	b002      	add	sp, #8
 8002e92:	bd80      	pop	{r7, pc}

08002e94 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b084      	sub	sp, #16
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
 8002e9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2238      	movs	r2, #56	; 0x38
 8002ea2:	5c9b      	ldrb	r3, [r3, r2]
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	d101      	bne.n	8002eac <HAL_TIM_ConfigClockSource+0x18>
 8002ea8:	2302      	movs	r3, #2
 8002eaa:	e0b7      	b.n	800301c <HAL_TIM_ConfigClockSource+0x188>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2238      	movs	r2, #56	; 0x38
 8002eb0:	2101      	movs	r1, #1
 8002eb2:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2239      	movs	r2, #57	; 0x39
 8002eb8:	2102      	movs	r1, #2
 8002eba:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	2277      	movs	r2, #119	; 0x77
 8002ec8:	4393      	bics	r3, r2
 8002eca:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	4a55      	ldr	r2, [pc, #340]	; (8003024 <HAL_TIM_ConfigClockSource+0x190>)
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	68fa      	ldr	r2, [r7, #12]
 8002eda:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	2280      	movs	r2, #128	; 0x80
 8002ee2:	0192      	lsls	r2, r2, #6
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d040      	beq.n	8002f6a <HAL_TIM_ConfigClockSource+0xd6>
 8002ee8:	2280      	movs	r2, #128	; 0x80
 8002eea:	0192      	lsls	r2, r2, #6
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d900      	bls.n	8002ef2 <HAL_TIM_ConfigClockSource+0x5e>
 8002ef0:	e088      	b.n	8003004 <HAL_TIM_ConfigClockSource+0x170>
 8002ef2:	2280      	movs	r2, #128	; 0x80
 8002ef4:	0152      	lsls	r2, r2, #5
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d100      	bne.n	8002efc <HAL_TIM_ConfigClockSource+0x68>
 8002efa:	e085      	b.n	8003008 <HAL_TIM_ConfigClockSource+0x174>
 8002efc:	2280      	movs	r2, #128	; 0x80
 8002efe:	0152      	lsls	r2, r2, #5
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d900      	bls.n	8002f06 <HAL_TIM_ConfigClockSource+0x72>
 8002f04:	e07e      	b.n	8003004 <HAL_TIM_ConfigClockSource+0x170>
 8002f06:	2b70      	cmp	r3, #112	; 0x70
 8002f08:	d018      	beq.n	8002f3c <HAL_TIM_ConfigClockSource+0xa8>
 8002f0a:	d900      	bls.n	8002f0e <HAL_TIM_ConfigClockSource+0x7a>
 8002f0c:	e07a      	b.n	8003004 <HAL_TIM_ConfigClockSource+0x170>
 8002f0e:	2b60      	cmp	r3, #96	; 0x60
 8002f10:	d04f      	beq.n	8002fb2 <HAL_TIM_ConfigClockSource+0x11e>
 8002f12:	d900      	bls.n	8002f16 <HAL_TIM_ConfigClockSource+0x82>
 8002f14:	e076      	b.n	8003004 <HAL_TIM_ConfigClockSource+0x170>
 8002f16:	2b50      	cmp	r3, #80	; 0x50
 8002f18:	d03b      	beq.n	8002f92 <HAL_TIM_ConfigClockSource+0xfe>
 8002f1a:	d900      	bls.n	8002f1e <HAL_TIM_ConfigClockSource+0x8a>
 8002f1c:	e072      	b.n	8003004 <HAL_TIM_ConfigClockSource+0x170>
 8002f1e:	2b40      	cmp	r3, #64	; 0x40
 8002f20:	d057      	beq.n	8002fd2 <HAL_TIM_ConfigClockSource+0x13e>
 8002f22:	d900      	bls.n	8002f26 <HAL_TIM_ConfigClockSource+0x92>
 8002f24:	e06e      	b.n	8003004 <HAL_TIM_ConfigClockSource+0x170>
 8002f26:	2b30      	cmp	r3, #48	; 0x30
 8002f28:	d063      	beq.n	8002ff2 <HAL_TIM_ConfigClockSource+0x15e>
 8002f2a:	d86b      	bhi.n	8003004 <HAL_TIM_ConfigClockSource+0x170>
 8002f2c:	2b20      	cmp	r3, #32
 8002f2e:	d060      	beq.n	8002ff2 <HAL_TIM_ConfigClockSource+0x15e>
 8002f30:	d868      	bhi.n	8003004 <HAL_TIM_ConfigClockSource+0x170>
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d05d      	beq.n	8002ff2 <HAL_TIM_ConfigClockSource+0x15e>
 8002f36:	2b10      	cmp	r3, #16
 8002f38:	d05b      	beq.n	8002ff2 <HAL_TIM_ConfigClockSource+0x15e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002f3a:	e063      	b.n	8003004 <HAL_TIM_ConfigClockSource+0x170>
      TIM_ETR_SetConfig(htim->Instance,
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6818      	ldr	r0, [r3, #0]
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	6899      	ldr	r1, [r3, #8]
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	685a      	ldr	r2, [r3, #4]
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	68db      	ldr	r3, [r3, #12]
 8002f4c:	f000 f962 	bl	8003214 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2277      	movs	r2, #119	; 0x77
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	68fa      	ldr	r2, [r7, #12]
 8002f66:	609a      	str	r2, [r3, #8]
      break;
 8002f68:	e04f      	b.n	800300a <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6818      	ldr	r0, [r3, #0]
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	6899      	ldr	r1, [r3, #8]
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	685a      	ldr	r2, [r3, #4]
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	68db      	ldr	r3, [r3, #12]
 8002f7a:	f000 f94b 	bl	8003214 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	689a      	ldr	r2, [r3, #8]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	2180      	movs	r1, #128	; 0x80
 8002f8a:	01c9      	lsls	r1, r1, #7
 8002f8c:	430a      	orrs	r2, r1
 8002f8e:	609a      	str	r2, [r3, #8]
      break;
 8002f90:	e03b      	b.n	800300a <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6818      	ldr	r0, [r3, #0]
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	6859      	ldr	r1, [r3, #4]
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	68db      	ldr	r3, [r3, #12]
 8002f9e:	001a      	movs	r2, r3
 8002fa0:	f000 f8be 	bl	8003120 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	2150      	movs	r1, #80	; 0x50
 8002faa:	0018      	movs	r0, r3
 8002fac:	f000 f918 	bl	80031e0 <TIM_ITRx_SetConfig>
      break;
 8002fb0:	e02b      	b.n	800300a <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6818      	ldr	r0, [r3, #0]
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	6859      	ldr	r1, [r3, #4]
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	68db      	ldr	r3, [r3, #12]
 8002fbe:	001a      	movs	r2, r3
 8002fc0:	f000 f8dc 	bl	800317c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	2160      	movs	r1, #96	; 0x60
 8002fca:	0018      	movs	r0, r3
 8002fcc:	f000 f908 	bl	80031e0 <TIM_ITRx_SetConfig>
      break;
 8002fd0:	e01b      	b.n	800300a <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6818      	ldr	r0, [r3, #0]
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	6859      	ldr	r1, [r3, #4]
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	68db      	ldr	r3, [r3, #12]
 8002fde:	001a      	movs	r2, r3
 8002fe0:	f000 f89e 	bl	8003120 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	2140      	movs	r1, #64	; 0x40
 8002fea:	0018      	movs	r0, r3
 8002fec:	f000 f8f8 	bl	80031e0 <TIM_ITRx_SetConfig>
      break;
 8002ff0:	e00b      	b.n	800300a <HAL_TIM_ConfigClockSource+0x176>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	0019      	movs	r1, r3
 8002ffc:	0010      	movs	r0, r2
 8002ffe:	f000 f8ef 	bl	80031e0 <TIM_ITRx_SetConfig>
        break;
 8003002:	e002      	b.n	800300a <HAL_TIM_ConfigClockSource+0x176>
      break;
 8003004:	46c0      	nop			; (mov r8, r8)
 8003006:	e000      	b.n	800300a <HAL_TIM_ConfigClockSource+0x176>
      break;
 8003008:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2239      	movs	r2, #57	; 0x39
 800300e:	2101      	movs	r1, #1
 8003010:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2238      	movs	r2, #56	; 0x38
 8003016:	2100      	movs	r1, #0
 8003018:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800301a:	2300      	movs	r3, #0
}
 800301c:	0018      	movs	r0, r3
 800301e:	46bd      	mov	sp, r7
 8003020:	b004      	add	sp, #16
 8003022:	bd80      	pop	{r7, pc}
 8003024:	ffff00ff 	.word	0xffff00ff

08003028 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b082      	sub	sp, #8
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003030:	46c0      	nop			; (mov r8, r8)
 8003032:	46bd      	mov	sp, r7
 8003034:	b002      	add	sp, #8
 8003036:	bd80      	pop	{r7, pc}

08003038 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b082      	sub	sp, #8
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003040:	46c0      	nop			; (mov r8, r8)
 8003042:	46bd      	mov	sp, r7
 8003044:	b002      	add	sp, #8
 8003046:	bd80      	pop	{r7, pc}

08003048 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b082      	sub	sp, #8
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003050:	46c0      	nop			; (mov r8, r8)
 8003052:	46bd      	mov	sp, r7
 8003054:	b002      	add	sp, #8
 8003056:	bd80      	pop	{r7, pc}

08003058 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b082      	sub	sp, #8
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003060:	46c0      	nop			; (mov r8, r8)
 8003062:	46bd      	mov	sp, r7
 8003064:	b002      	add	sp, #8
 8003066:	bd80      	pop	{r7, pc}

08003068 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b082      	sub	sp, #8
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003070:	46c0      	nop			; (mov r8, r8)
 8003072:	46bd      	mov	sp, r7
 8003074:	b002      	add	sp, #8
 8003076:	bd80      	pop	{r7, pc}

08003078 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b084      	sub	sp, #16
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
 8003080:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003088:	687a      	ldr	r2, [r7, #4]
 800308a:	2380      	movs	r3, #128	; 0x80
 800308c:	05db      	lsls	r3, r3, #23
 800308e:	429a      	cmp	r2, r3
 8003090:	d007      	beq.n	80030a2 <TIM_Base_SetConfig+0x2a>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	4a1f      	ldr	r2, [pc, #124]	; (8003114 <TIM_Base_SetConfig+0x9c>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d003      	beq.n	80030a2 <TIM_Base_SetConfig+0x2a>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	4a1e      	ldr	r2, [pc, #120]	; (8003118 <TIM_Base_SetConfig+0xa0>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d108      	bne.n	80030b4 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2270      	movs	r2, #112	; 0x70
 80030a6:	4393      	bics	r3, r2
 80030a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	68fa      	ldr	r2, [r7, #12]
 80030b0:	4313      	orrs	r3, r2
 80030b2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80030b4:	687a      	ldr	r2, [r7, #4]
 80030b6:	2380      	movs	r3, #128	; 0x80
 80030b8:	05db      	lsls	r3, r3, #23
 80030ba:	429a      	cmp	r2, r3
 80030bc:	d007      	beq.n	80030ce <TIM_Base_SetConfig+0x56>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	4a14      	ldr	r2, [pc, #80]	; (8003114 <TIM_Base_SetConfig+0x9c>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d003      	beq.n	80030ce <TIM_Base_SetConfig+0x56>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	4a13      	ldr	r2, [pc, #76]	; (8003118 <TIM_Base_SetConfig+0xa0>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d108      	bne.n	80030e0 <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	4a12      	ldr	r2, [pc, #72]	; (800311c <TIM_Base_SetConfig+0xa4>)
 80030d2:	4013      	ands	r3, r2
 80030d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	68db      	ldr	r3, [r3, #12]
 80030da:	68fa      	ldr	r2, [r7, #12]
 80030dc:	4313      	orrs	r3, r2
 80030de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	2280      	movs	r2, #128	; 0x80
 80030e4:	4393      	bics	r3, r2
 80030e6:	001a      	movs	r2, r3
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	691b      	ldr	r3, [r3, #16]
 80030ec:	4313      	orrs	r3, r2
 80030ee:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	68fa      	ldr	r2, [r7, #12]
 80030f4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	689a      	ldr	r2, [r3, #8]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	681a      	ldr	r2, [r3, #0]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2201      	movs	r2, #1
 800310a:	615a      	str	r2, [r3, #20]
}
 800310c:	46c0      	nop			; (mov r8, r8)
 800310e:	46bd      	mov	sp, r7
 8003110:	b004      	add	sp, #16
 8003112:	bd80      	pop	{r7, pc}
 8003114:	40010800 	.word	0x40010800
 8003118:	40011400 	.word	0x40011400
 800311c:	fffffcff 	.word	0xfffffcff

08003120 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b086      	sub	sp, #24
 8003124:	af00      	add	r7, sp, #0
 8003126:	60f8      	str	r0, [r7, #12]
 8003128:	60b9      	str	r1, [r7, #8]
 800312a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	6a1b      	ldr	r3, [r3, #32]
 8003130:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	6a1b      	ldr	r3, [r3, #32]
 8003136:	2201      	movs	r2, #1
 8003138:	4393      	bics	r3, r2
 800313a:	001a      	movs	r2, r3
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	699b      	ldr	r3, [r3, #24]
 8003144:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	22f0      	movs	r2, #240	; 0xf0
 800314a:	4393      	bics	r3, r2
 800314c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	011b      	lsls	r3, r3, #4
 8003152:	693a      	ldr	r2, [r7, #16]
 8003154:	4313      	orrs	r3, r2
 8003156:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	220a      	movs	r2, #10
 800315c:	4393      	bics	r3, r2
 800315e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003160:	697a      	ldr	r2, [r7, #20]
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	4313      	orrs	r3, r2
 8003166:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	693a      	ldr	r2, [r7, #16]
 800316c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	697a      	ldr	r2, [r7, #20]
 8003172:	621a      	str	r2, [r3, #32]
}
 8003174:	46c0      	nop			; (mov r8, r8)
 8003176:	46bd      	mov	sp, r7
 8003178:	b006      	add	sp, #24
 800317a:	bd80      	pop	{r7, pc}

0800317c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b086      	sub	sp, #24
 8003180:	af00      	add	r7, sp, #0
 8003182:	60f8      	str	r0, [r7, #12]
 8003184:	60b9      	str	r1, [r7, #8]
 8003186:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	6a1b      	ldr	r3, [r3, #32]
 800318c:	2210      	movs	r2, #16
 800318e:	4393      	bics	r3, r2
 8003190:	001a      	movs	r2, r3
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	699b      	ldr	r3, [r3, #24]
 800319a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	6a1b      	ldr	r3, [r3, #32]
 80031a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	4a0d      	ldr	r2, [pc, #52]	; (80031dc <TIM_TI2_ConfigInputStage+0x60>)
 80031a6:	4013      	ands	r3, r2
 80031a8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	031b      	lsls	r3, r3, #12
 80031ae:	697a      	ldr	r2, [r7, #20]
 80031b0:	4313      	orrs	r3, r2
 80031b2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	22a0      	movs	r2, #160	; 0xa0
 80031b8:	4393      	bics	r3, r2
 80031ba:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	011b      	lsls	r3, r3, #4
 80031c0:	693a      	ldr	r2, [r7, #16]
 80031c2:	4313      	orrs	r3, r2
 80031c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	697a      	ldr	r2, [r7, #20]
 80031ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	693a      	ldr	r2, [r7, #16]
 80031d0:	621a      	str	r2, [r3, #32]
}
 80031d2:	46c0      	nop			; (mov r8, r8)
 80031d4:	46bd      	mov	sp, r7
 80031d6:	b006      	add	sp, #24
 80031d8:	bd80      	pop	{r7, pc}
 80031da:	46c0      	nop			; (mov r8, r8)
 80031dc:	ffff0fff 	.word	0xffff0fff

080031e0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b084      	sub	sp, #16
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
 80031e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	2270      	movs	r2, #112	; 0x70
 80031f4:	4393      	bics	r3, r2
 80031f6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80031f8:	683a      	ldr	r2, [r7, #0]
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	4313      	orrs	r3, r2
 80031fe:	2207      	movs	r2, #7
 8003200:	4313      	orrs	r3, r2
 8003202:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	68fa      	ldr	r2, [r7, #12]
 8003208:	609a      	str	r2, [r3, #8]
}
 800320a:	46c0      	nop			; (mov r8, r8)
 800320c:	46bd      	mov	sp, r7
 800320e:	b004      	add	sp, #16
 8003210:	bd80      	pop	{r7, pc}
	...

08003214 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b086      	sub	sp, #24
 8003218:	af00      	add	r7, sp, #0
 800321a:	60f8      	str	r0, [r7, #12]
 800321c:	60b9      	str	r1, [r7, #8]
 800321e:	607a      	str	r2, [r7, #4]
 8003220:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	4a09      	ldr	r2, [pc, #36]	; (8003250 <TIM_ETR_SetConfig+0x3c>)
 800322c:	4013      	ands	r3, r2
 800322e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	021a      	lsls	r2, r3, #8
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	431a      	orrs	r2, r3
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	4313      	orrs	r3, r2
 800323c:	697a      	ldr	r2, [r7, #20]
 800323e:	4313      	orrs	r3, r2
 8003240:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	697a      	ldr	r2, [r7, #20]
 8003246:	609a      	str	r2, [r3, #8]
}
 8003248:	46c0      	nop			; (mov r8, r8)
 800324a:	46bd      	mov	sp, r7
 800324c:	b006      	add	sp, #24
 800324e:	bd80      	pop	{r7, pc}
 8003250:	ffff00ff 	.word	0xffff00ff

08003254 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b084      	sub	sp, #16
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
 800325c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2238      	movs	r2, #56	; 0x38
 8003262:	5c9b      	ldrb	r3, [r3, r2]
 8003264:	2b01      	cmp	r3, #1
 8003266:	d101      	bne.n	800326c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003268:	2302      	movs	r3, #2
 800326a:	e042      	b.n	80032f2 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2238      	movs	r2, #56	; 0x38
 8003270:	2101      	movs	r1, #1
 8003272:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2239      	movs	r2, #57	; 0x39
 8003278:	2102      	movs	r1, #2
 800327a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2270      	movs	r2, #112	; 0x70
 8003290:	4393      	bics	r3, r2
 8003292:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	68fa      	ldr	r2, [r7, #12]
 800329a:	4313      	orrs	r3, r2
 800329c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	68fa      	ldr	r2, [r7, #12]
 80032a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	2380      	movs	r3, #128	; 0x80
 80032ac:	05db      	lsls	r3, r3, #23
 80032ae:	429a      	cmp	r2, r3
 80032b0:	d009      	beq.n	80032c6 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a11      	ldr	r2, [pc, #68]	; (80032fc <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d004      	beq.n	80032c6 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a0f      	ldr	r2, [pc, #60]	; (8003300 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d10c      	bne.n	80032e0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	2280      	movs	r2, #128	; 0x80
 80032ca:	4393      	bics	r3, r2
 80032cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	68ba      	ldr	r2, [r7, #8]
 80032d4:	4313      	orrs	r3, r2
 80032d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	68ba      	ldr	r2, [r7, #8]
 80032de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2239      	movs	r2, #57	; 0x39
 80032e4:	2101      	movs	r1, #1
 80032e6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2238      	movs	r2, #56	; 0x38
 80032ec:	2100      	movs	r1, #0
 80032ee:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80032f0:	2300      	movs	r3, #0
}
 80032f2:	0018      	movs	r0, r3
 80032f4:	46bd      	mov	sp, r7
 80032f6:	b004      	add	sp, #16
 80032f8:	bd80      	pop	{r7, pc}
 80032fa:	46c0      	nop			; (mov r8, r8)
 80032fc:	40010800 	.word	0x40010800
 8003300:	40011400 	.word	0x40011400

08003304 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b082      	sub	sp, #8
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d101      	bne.n	8003316 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	e044      	b.n	80033a0 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800331a:	2b00      	cmp	r3, #0
 800331c:	d107      	bne.n	800332e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2274      	movs	r2, #116	; 0x74
 8003322:	2100      	movs	r1, #0
 8003324:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	0018      	movs	r0, r3
 800332a:	f7fd fd37 	bl	8000d9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2224      	movs	r2, #36	; 0x24
 8003332:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	2101      	movs	r1, #1
 8003340:	438a      	bics	r2, r1
 8003342:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	0018      	movs	r0, r3
 8003348:	f000 faa8 	bl	800389c <UART_SetConfig>
 800334c:	0003      	movs	r3, r0
 800334e:	2b01      	cmp	r3, #1
 8003350:	d101      	bne.n	8003356 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e024      	b.n	80033a0 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800335a:	2b00      	cmp	r3, #0
 800335c:	d003      	beq.n	8003366 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	0018      	movs	r0, r3
 8003362:	f000 fd3b 	bl	8003ddc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	685a      	ldr	r2, [r3, #4]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	490d      	ldr	r1, [pc, #52]	; (80033a8 <HAL_UART_Init+0xa4>)
 8003372:	400a      	ands	r2, r1
 8003374:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	689a      	ldr	r2, [r3, #8]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	212a      	movs	r1, #42	; 0x2a
 8003382:	438a      	bics	r2, r1
 8003384:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	2101      	movs	r1, #1
 8003392:	430a      	orrs	r2, r1
 8003394:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	0018      	movs	r0, r3
 800339a:	f000 fdd3 	bl	8003f44 <UART_CheckIdleState>
 800339e:	0003      	movs	r3, r0
}
 80033a0:	0018      	movs	r0, r3
 80033a2:	46bd      	mov	sp, r7
 80033a4:	b002      	add	sp, #8
 80033a6:	bd80      	pop	{r7, pc}
 80033a8:	ffffb7ff 	.word	0xffffb7ff

080033ac <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b084      	sub	sp, #16
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	60f8      	str	r0, [r7, #12]
 80033b4:	60b9      	str	r1, [r7, #8]
 80033b6:	1dbb      	adds	r3, r7, #6
 80033b8:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033be:	2b20      	cmp	r3, #32
 80033c0:	d144      	bne.n	800344c <HAL_UART_Receive_IT+0xa0>
  {
    if ((pData == NULL) || (Size == 0U))
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d003      	beq.n	80033d0 <HAL_UART_Receive_IT+0x24>
 80033c8:	1dbb      	adds	r3, r7, #6
 80033ca:	881b      	ldrh	r3, [r3, #0]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d101      	bne.n	80033d4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	e03c      	b.n	800344e <HAL_UART_Receive_IT+0xa2>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	689a      	ldr	r2, [r3, #8]
 80033d8:	2380      	movs	r3, #128	; 0x80
 80033da:	015b      	lsls	r3, r3, #5
 80033dc:	429a      	cmp	r2, r3
 80033de:	d109      	bne.n	80033f4 <HAL_UART_Receive_IT+0x48>
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	691b      	ldr	r3, [r3, #16]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d105      	bne.n	80033f4 <HAL_UART_Receive_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	2201      	movs	r2, #1
 80033ec:	4013      	ands	r3, r2
 80033ee:	d001      	beq.n	80033f4 <HAL_UART_Receive_IT+0x48>
      {
        return  HAL_ERROR;
 80033f0:	2301      	movs	r3, #1
 80033f2:	e02c      	b.n	800344e <HAL_UART_Receive_IT+0xa2>
      }
    }

    __HAL_LOCK(huart);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	2274      	movs	r2, #116	; 0x74
 80033f8:	5c9b      	ldrb	r3, [r3, r2]
 80033fa:	2b01      	cmp	r3, #1
 80033fc:	d101      	bne.n	8003402 <HAL_UART_Receive_IT+0x56>
 80033fe:	2302      	movs	r3, #2
 8003400:	e025      	b.n	800344e <HAL_UART_Receive_IT+0xa2>
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	2274      	movs	r2, #116	; 0x74
 8003406:	2101      	movs	r1, #1
 8003408:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	2200      	movs	r2, #0
 800340e:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a10      	ldr	r2, [pc, #64]	; (8003458 <HAL_UART_Receive_IT+0xac>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d00f      	beq.n	800343a <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	685a      	ldr	r2, [r3, #4]
 8003420:	2380      	movs	r3, #128	; 0x80
 8003422:	041b      	lsls	r3, r3, #16
 8003424:	4013      	ands	r3, r2
 8003426:	d008      	beq.n	800343a <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	681a      	ldr	r2, [r3, #0]
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	2180      	movs	r1, #128	; 0x80
 8003434:	04c9      	lsls	r1, r1, #19
 8003436:	430a      	orrs	r2, r1
 8003438:	601a      	str	r2, [r3, #0]
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 800343a:	1dbb      	adds	r3, r7, #6
 800343c:	881a      	ldrh	r2, [r3, #0]
 800343e:	68b9      	ldr	r1, [r7, #8]
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	0018      	movs	r0, r3
 8003444:	f000 fe44 	bl	80040d0 <UART_Start_Receive_IT>
 8003448:	0003      	movs	r3, r0
 800344a:	e000      	b.n	800344e <HAL_UART_Receive_IT+0xa2>
  }
  else
  {
    return HAL_BUSY;
 800344c:	2302      	movs	r3, #2
  }
}
 800344e:	0018      	movs	r0, r3
 8003450:	46bd      	mov	sp, r7
 8003452:	b004      	add	sp, #16
 8003454:	bd80      	pop	{r7, pc}
 8003456:	46c0      	nop			; (mov r8, r8)
 8003458:	40004800 	.word	0x40004800

0800345c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b088      	sub	sp, #32
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	69db      	ldr	r3, [r3, #28]
 800346a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800347c:	69fb      	ldr	r3, [r7, #28]
 800347e:	4ab5      	ldr	r2, [pc, #724]	; (8003754 <HAL_UART_IRQHandler+0x2f8>)
 8003480:	4013      	ands	r3, r2
 8003482:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d112      	bne.n	80034b0 <HAL_UART_IRQHandler+0x54>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800348a:	69fb      	ldr	r3, [r7, #28]
 800348c:	2220      	movs	r2, #32
 800348e:	4013      	ands	r3, r2
 8003490:	d00e      	beq.n	80034b0 <HAL_UART_IRQHandler+0x54>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003492:	69bb      	ldr	r3, [r7, #24]
 8003494:	2220      	movs	r2, #32
 8003496:	4013      	ands	r3, r2
 8003498:	d00a      	beq.n	80034b0 <HAL_UART_IRQHandler+0x54>
    {
      if (huart->RxISR != NULL)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d100      	bne.n	80034a4 <HAL_UART_IRQHandler+0x48>
 80034a2:	e1d1      	b.n	8003848 <HAL_UART_IRQHandler+0x3ec>
      {
        huart->RxISR(huart);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80034a8:	687a      	ldr	r2, [r7, #4]
 80034aa:	0010      	movs	r0, r2
 80034ac:	4798      	blx	r3
      }
      return;
 80034ae:	e1cb      	b.n	8003848 <HAL_UART_IRQHandler+0x3ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d100      	bne.n	80034b8 <HAL_UART_IRQHandler+0x5c>
 80034b6:	e0d9      	b.n	800366c <HAL_UART_IRQHandler+0x210>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	2201      	movs	r2, #1
 80034bc:	4013      	ands	r3, r2
 80034be:	d104      	bne.n	80034ca <HAL_UART_IRQHandler+0x6e>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80034c0:	69bb      	ldr	r3, [r7, #24]
 80034c2:	4aa5      	ldr	r2, [pc, #660]	; (8003758 <HAL_UART_IRQHandler+0x2fc>)
 80034c4:	4013      	ands	r3, r2
 80034c6:	d100      	bne.n	80034ca <HAL_UART_IRQHandler+0x6e>
 80034c8:	e0d0      	b.n	800366c <HAL_UART_IRQHandler+0x210>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80034ca:	69fb      	ldr	r3, [r7, #28]
 80034cc:	2201      	movs	r2, #1
 80034ce:	4013      	ands	r3, r2
 80034d0:	d010      	beq.n	80034f4 <HAL_UART_IRQHandler+0x98>
 80034d2:	69ba      	ldr	r2, [r7, #24]
 80034d4:	2380      	movs	r3, #128	; 0x80
 80034d6:	005b      	lsls	r3, r3, #1
 80034d8:	4013      	ands	r3, r2
 80034da:	d00b      	beq.n	80034f4 <HAL_UART_IRQHandler+0x98>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	2201      	movs	r2, #1
 80034e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2280      	movs	r2, #128	; 0x80
 80034e8:	589b      	ldr	r3, [r3, r2]
 80034ea:	2201      	movs	r2, #1
 80034ec:	431a      	orrs	r2, r3
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2180      	movs	r1, #128	; 0x80
 80034f2:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80034f4:	69fb      	ldr	r3, [r7, #28]
 80034f6:	2202      	movs	r2, #2
 80034f8:	4013      	ands	r3, r2
 80034fa:	d00f      	beq.n	800351c <HAL_UART_IRQHandler+0xc0>
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	2201      	movs	r2, #1
 8003500:	4013      	ands	r3, r2
 8003502:	d00b      	beq.n	800351c <HAL_UART_IRQHandler+0xc0>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	2202      	movs	r2, #2
 800350a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2280      	movs	r2, #128	; 0x80
 8003510:	589b      	ldr	r3, [r3, r2]
 8003512:	2204      	movs	r2, #4
 8003514:	431a      	orrs	r2, r3
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2180      	movs	r1, #128	; 0x80
 800351a:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800351c:	69fb      	ldr	r3, [r7, #28]
 800351e:	2204      	movs	r2, #4
 8003520:	4013      	ands	r3, r2
 8003522:	d00f      	beq.n	8003544 <HAL_UART_IRQHandler+0xe8>
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	2201      	movs	r2, #1
 8003528:	4013      	ands	r3, r2
 800352a:	d00b      	beq.n	8003544 <HAL_UART_IRQHandler+0xe8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	2204      	movs	r2, #4
 8003532:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2280      	movs	r2, #128	; 0x80
 8003538:	589b      	ldr	r3, [r3, r2]
 800353a:	2202      	movs	r2, #2
 800353c:	431a      	orrs	r2, r3
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2180      	movs	r1, #128	; 0x80
 8003542:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003544:	69fb      	ldr	r3, [r7, #28]
 8003546:	2208      	movs	r2, #8
 8003548:	4013      	ands	r3, r2
 800354a:	d013      	beq.n	8003574 <HAL_UART_IRQHandler+0x118>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800354c:	69bb      	ldr	r3, [r7, #24]
 800354e:	2220      	movs	r2, #32
 8003550:	4013      	ands	r3, r2
 8003552:	d103      	bne.n	800355c <HAL_UART_IRQHandler+0x100>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	2201      	movs	r2, #1
 8003558:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800355a:	d00b      	beq.n	8003574 <HAL_UART_IRQHandler+0x118>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	2208      	movs	r2, #8
 8003562:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2280      	movs	r2, #128	; 0x80
 8003568:	589b      	ldr	r3, [r3, r2]
 800356a:	2208      	movs	r2, #8
 800356c:	431a      	orrs	r2, r3
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2180      	movs	r1, #128	; 0x80
 8003572:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003574:	69fa      	ldr	r2, [r7, #28]
 8003576:	2380      	movs	r3, #128	; 0x80
 8003578:	011b      	lsls	r3, r3, #4
 800357a:	4013      	ands	r3, r2
 800357c:	d011      	beq.n	80035a2 <HAL_UART_IRQHandler+0x146>
 800357e:	69ba      	ldr	r2, [r7, #24]
 8003580:	2380      	movs	r3, #128	; 0x80
 8003582:	04db      	lsls	r3, r3, #19
 8003584:	4013      	ands	r3, r2
 8003586:	d00c      	beq.n	80035a2 <HAL_UART_IRQHandler+0x146>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	2280      	movs	r2, #128	; 0x80
 800358e:	0112      	lsls	r2, r2, #4
 8003590:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2280      	movs	r2, #128	; 0x80
 8003596:	589b      	ldr	r3, [r3, r2]
 8003598:	2220      	movs	r2, #32
 800359a:	431a      	orrs	r2, r3
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2180      	movs	r1, #128	; 0x80
 80035a0:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2280      	movs	r2, #128	; 0x80
 80035a6:	589b      	ldr	r3, [r3, r2]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d100      	bne.n	80035ae <HAL_UART_IRQHandler+0x152>
 80035ac:	e14e      	b.n	800384c <HAL_UART_IRQHandler+0x3f0>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80035ae:	69fb      	ldr	r3, [r7, #28]
 80035b0:	2220      	movs	r2, #32
 80035b2:	4013      	ands	r3, r2
 80035b4:	d00c      	beq.n	80035d0 <HAL_UART_IRQHandler+0x174>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80035b6:	69bb      	ldr	r3, [r7, #24]
 80035b8:	2220      	movs	r2, #32
 80035ba:	4013      	ands	r3, r2
 80035bc:	d008      	beq.n	80035d0 <HAL_UART_IRQHandler+0x174>
      {
        if (huart->RxISR != NULL)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d004      	beq.n	80035d0 <HAL_UART_IRQHandler+0x174>
        {
          huart->RxISR(huart);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80035ca:	687a      	ldr	r2, [r7, #4]
 80035cc:	0010      	movs	r0, r2
 80035ce:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2280      	movs	r2, #128	; 0x80
 80035d4:	589b      	ldr	r3, [r3, r2]
 80035d6:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	2240      	movs	r2, #64	; 0x40
 80035e0:	4013      	ands	r3, r2
 80035e2:	2b40      	cmp	r3, #64	; 0x40
 80035e4:	d003      	beq.n	80035ee <HAL_UART_IRQHandler+0x192>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2228      	movs	r2, #40	; 0x28
 80035ea:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80035ec:	d033      	beq.n	8003656 <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	0018      	movs	r0, r3
 80035f2:	f000 fdfb 	bl	80041ec <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	2240      	movs	r2, #64	; 0x40
 80035fe:	4013      	ands	r3, r2
 8003600:	2b40      	cmp	r3, #64	; 0x40
 8003602:	d123      	bne.n	800364c <HAL_UART_IRQHandler+0x1f0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	689a      	ldr	r2, [r3, #8]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	2140      	movs	r1, #64	; 0x40
 8003610:	438a      	bics	r2, r1
 8003612:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003618:	2b00      	cmp	r3, #0
 800361a:	d012      	beq.n	8003642 <HAL_UART_IRQHandler+0x1e6>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003620:	4a4e      	ldr	r2, [pc, #312]	; (800375c <HAL_UART_IRQHandler+0x300>)
 8003622:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003628:	0018      	movs	r0, r3
 800362a:	f7fd fe41 	bl	80012b0 <HAL_DMA_Abort_IT>
 800362e:	1e03      	subs	r3, r0, #0
 8003630:	d01a      	beq.n	8003668 <HAL_UART_IRQHandler+0x20c>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003636:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800363c:	0018      	movs	r0, r3
 800363e:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003640:	e012      	b.n	8003668 <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	0018      	movs	r0, r3
 8003646:	f000 f915 	bl	8003874 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800364a:	e00d      	b.n	8003668 <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	0018      	movs	r0, r3
 8003650:	f000 f910 	bl	8003874 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003654:	e008      	b.n	8003668 <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	0018      	movs	r0, r3
 800365a:	f000 f90b 	bl	8003874 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2280      	movs	r2, #128	; 0x80
 8003662:	2100      	movs	r1, #0
 8003664:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8003666:	e0f1      	b.n	800384c <HAL_UART_IRQHandler+0x3f0>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003668:	46c0      	nop			; (mov r8, r8)
    return;
 800366a:	e0ef      	b.n	800384c <HAL_UART_IRQHandler+0x3f0>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003670:	2b01      	cmp	r3, #1
 8003672:	d000      	beq.n	8003676 <HAL_UART_IRQHandler+0x21a>
 8003674:	e0b5      	b.n	80037e2 <HAL_UART_IRQHandler+0x386>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8003676:	69fb      	ldr	r3, [r7, #28]
 8003678:	2210      	movs	r2, #16
 800367a:	4013      	ands	r3, r2
 800367c:	d100      	bne.n	8003680 <HAL_UART_IRQHandler+0x224>
 800367e:	e0b0      	b.n	80037e2 <HAL_UART_IRQHandler+0x386>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8003680:	69bb      	ldr	r3, [r7, #24]
 8003682:	2210      	movs	r2, #16
 8003684:	4013      	ands	r3, r2
 8003686:	d100      	bne.n	800368a <HAL_UART_IRQHandler+0x22e>
 8003688:	e0ab      	b.n	80037e2 <HAL_UART_IRQHandler+0x386>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	2210      	movs	r2, #16
 8003690:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	2240      	movs	r2, #64	; 0x40
 800369a:	4013      	ands	r3, r2
 800369c:	2b40      	cmp	r3, #64	; 0x40
 800369e:	d161      	bne.n	8003764 <HAL_UART_IRQHandler+0x308>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	685a      	ldr	r2, [r3, #4]
 80036a8:	2108      	movs	r1, #8
 80036aa:	187b      	adds	r3, r7, r1
 80036ac:	801a      	strh	r2, [r3, #0]
      if (  (nb_remaining_rx_data > 0U)
 80036ae:	187b      	adds	r3, r7, r1
 80036b0:	881b      	ldrh	r3, [r3, #0]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d100      	bne.n	80036b8 <HAL_UART_IRQHandler+0x25c>
 80036b6:	e0cb      	b.n	8003850 <HAL_UART_IRQHandler+0x3f4>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2258      	movs	r2, #88	; 0x58
 80036bc:	5a9b      	ldrh	r3, [r3, r2]
 80036be:	187a      	adds	r2, r7, r1
 80036c0:	8812      	ldrh	r2, [r2, #0]
 80036c2:	429a      	cmp	r2, r3
 80036c4:	d300      	bcc.n	80036c8 <HAL_UART_IRQHandler+0x26c>
 80036c6:	e0c3      	b.n	8003850 <HAL_UART_IRQHandler+0x3f4>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	187a      	adds	r2, r7, r1
 80036cc:	215a      	movs	r1, #90	; 0x5a
 80036ce:	8812      	ldrh	r2, [r2, #0]
 80036d0:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	2220      	movs	r2, #32
 80036dc:	4013      	ands	r3, r2
 80036de:	d12a      	bne.n	8003736 <HAL_UART_IRQHandler+0x2da>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	681a      	ldr	r2, [r3, #0]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	491d      	ldr	r1, [pc, #116]	; (8003760 <HAL_UART_IRQHandler+0x304>)
 80036ec:	400a      	ands	r2, r1
 80036ee:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	689a      	ldr	r2, [r3, #8]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	2101      	movs	r1, #1
 80036fc:	438a      	bics	r2, r1
 80036fe:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	689a      	ldr	r2, [r3, #8]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	2140      	movs	r1, #64	; 0x40
 800370c:	438a      	bics	r2, r1
 800370e:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2220      	movs	r2, #32
 8003714:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2200      	movs	r2, #0
 800371a:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	681a      	ldr	r2, [r3, #0]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	2110      	movs	r1, #16
 8003728:	438a      	bics	r2, r1
 800372a:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003730:	0018      	movs	r0, r3
 8003732:	f7fd fd7d 	bl	8001230 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2258      	movs	r2, #88	; 0x58
 800373a:	5a9a      	ldrh	r2, [r3, r2]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	215a      	movs	r1, #90	; 0x5a
 8003740:	5a5b      	ldrh	r3, [r3, r1]
 8003742:	b29b      	uxth	r3, r3
 8003744:	1ad3      	subs	r3, r2, r3
 8003746:	b29a      	uxth	r2, r3
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	0011      	movs	r1, r2
 800374c:	0018      	movs	r0, r3
 800374e:	f000 f899 	bl	8003884 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003752:	e07d      	b.n	8003850 <HAL_UART_IRQHandler+0x3f4>
 8003754:	0000080f 	.word	0x0000080f
 8003758:	04000120 	.word	0x04000120
 800375c:	0800424d 	.word	0x0800424d
 8003760:	fffffeff 	.word	0xfffffeff
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2258      	movs	r2, #88	; 0x58
 8003768:	5a99      	ldrh	r1, [r3, r2]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	225a      	movs	r2, #90	; 0x5a
 800376e:	5a9b      	ldrh	r3, [r3, r2]
 8003770:	b29a      	uxth	r2, r3
 8003772:	200a      	movs	r0, #10
 8003774:	183b      	adds	r3, r7, r0
 8003776:	1a8a      	subs	r2, r1, r2
 8003778:	801a      	strh	r2, [r3, #0]
      if (  (huart->RxXferCount > 0U)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	225a      	movs	r2, #90	; 0x5a
 800377e:	5a9b      	ldrh	r3, [r3, r2]
 8003780:	b29b      	uxth	r3, r3
 8003782:	2b00      	cmp	r3, #0
 8003784:	d100      	bne.n	8003788 <HAL_UART_IRQHandler+0x32c>
 8003786:	e065      	b.n	8003854 <HAL_UART_IRQHandler+0x3f8>
          &&(nb_rx_data > 0U) )
 8003788:	183b      	adds	r3, r7, r0
 800378a:	881b      	ldrh	r3, [r3, #0]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d061      	beq.n	8003854 <HAL_UART_IRQHandler+0x3f8>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	681a      	ldr	r2, [r3, #0]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4931      	ldr	r1, [pc, #196]	; (8003860 <HAL_UART_IRQHandler+0x404>)
 800379c:	400a      	ands	r2, r1
 800379e:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	689a      	ldr	r2, [r3, #8]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	2101      	movs	r1, #1
 80037ac:	438a      	bics	r2, r1
 80037ae:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2220      	movs	r2, #32
 80037b4:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2200      	movs	r2, #0
 80037ba:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2200      	movs	r2, #0
 80037c0:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	681a      	ldr	r2, [r3, #0]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	2110      	movs	r1, #16
 80037ce:	438a      	bics	r2, r1
 80037d0:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80037d2:	183b      	adds	r3, r7, r0
 80037d4:	881a      	ldrh	r2, [r3, #0]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	0011      	movs	r1, r2
 80037da:	0018      	movs	r0, r3
 80037dc:	f000 f852 	bl	8003884 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80037e0:	e038      	b.n	8003854 <HAL_UART_IRQHandler+0x3f8>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80037e2:	69fa      	ldr	r2, [r7, #28]
 80037e4:	2380      	movs	r3, #128	; 0x80
 80037e6:	035b      	lsls	r3, r3, #13
 80037e8:	4013      	ands	r3, r2
 80037ea:	d00e      	beq.n	800380a <HAL_UART_IRQHandler+0x3ae>
 80037ec:	697a      	ldr	r2, [r7, #20]
 80037ee:	2380      	movs	r3, #128	; 0x80
 80037f0:	03db      	lsls	r3, r3, #15
 80037f2:	4013      	ands	r3, r2
 80037f4:	d009      	beq.n	800380a <HAL_UART_IRQHandler+0x3ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	2280      	movs	r2, #128	; 0x80
 80037fc:	0352      	lsls	r2, r2, #13
 80037fe:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	0018      	movs	r0, r3
 8003804:	f000 fe3c 	bl	8004480 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003808:	e027      	b.n	800385a <HAL_UART_IRQHandler+0x3fe>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800380a:	69fb      	ldr	r3, [r7, #28]
 800380c:	2280      	movs	r2, #128	; 0x80
 800380e:	4013      	ands	r3, r2
 8003810:	d00d      	beq.n	800382e <HAL_UART_IRQHandler+0x3d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003812:	69bb      	ldr	r3, [r7, #24]
 8003814:	2280      	movs	r2, #128	; 0x80
 8003816:	4013      	ands	r3, r2
 8003818:	d009      	beq.n	800382e <HAL_UART_IRQHandler+0x3d2>
  {
    if (huart->TxISR != NULL)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800381e:	2b00      	cmp	r3, #0
 8003820:	d01a      	beq.n	8003858 <HAL_UART_IRQHandler+0x3fc>
    {
      huart->TxISR(huart);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003826:	687a      	ldr	r2, [r7, #4]
 8003828:	0010      	movs	r0, r2
 800382a:	4798      	blx	r3
    }
    return;
 800382c:	e014      	b.n	8003858 <HAL_UART_IRQHandler+0x3fc>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800382e:	69fb      	ldr	r3, [r7, #28]
 8003830:	2240      	movs	r2, #64	; 0x40
 8003832:	4013      	ands	r3, r2
 8003834:	d011      	beq.n	800385a <HAL_UART_IRQHandler+0x3fe>
 8003836:	69bb      	ldr	r3, [r7, #24]
 8003838:	2240      	movs	r2, #64	; 0x40
 800383a:	4013      	ands	r3, r2
 800383c:	d00d      	beq.n	800385a <HAL_UART_IRQHandler+0x3fe>
  {
    UART_EndTransmit_IT(huart);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	0018      	movs	r0, r3
 8003842:	f000 fd1a 	bl	800427a <UART_EndTransmit_IT>
    return;
 8003846:	e008      	b.n	800385a <HAL_UART_IRQHandler+0x3fe>
      return;
 8003848:	46c0      	nop			; (mov r8, r8)
 800384a:	e006      	b.n	800385a <HAL_UART_IRQHandler+0x3fe>
    return;
 800384c:	46c0      	nop			; (mov r8, r8)
 800384e:	e004      	b.n	800385a <HAL_UART_IRQHandler+0x3fe>
      return;
 8003850:	46c0      	nop			; (mov r8, r8)
 8003852:	e002      	b.n	800385a <HAL_UART_IRQHandler+0x3fe>
      return;
 8003854:	46c0      	nop			; (mov r8, r8)
 8003856:	e000      	b.n	800385a <HAL_UART_IRQHandler+0x3fe>
    return;
 8003858:	46c0      	nop			; (mov r8, r8)
  }

}
 800385a:	46bd      	mov	sp, r7
 800385c:	b008      	add	sp, #32
 800385e:	bd80      	pop	{r7, pc}
 8003860:	fffffedf 	.word	0xfffffedf

08003864 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b082      	sub	sp, #8
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800386c:	46c0      	nop			; (mov r8, r8)
 800386e:	46bd      	mov	sp, r7
 8003870:	b002      	add	sp, #8
 8003872:	bd80      	pop	{r7, pc}

08003874 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b082      	sub	sp, #8
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800387c:	46c0      	nop			; (mov r8, r8)
 800387e:	46bd      	mov	sp, r7
 8003880:	b002      	add	sp, #8
 8003882:	bd80      	pop	{r7, pc}

08003884 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b082      	sub	sp, #8
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
 800388c:	000a      	movs	r2, r1
 800388e:	1cbb      	adds	r3, r7, #2
 8003890:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003892:	46c0      	nop			; (mov r8, r8)
 8003894:	46bd      	mov	sp, r7
 8003896:	b002      	add	sp, #8
 8003898:	bd80      	pop	{r7, pc}
	...

0800389c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800389c:	b5b0      	push	{r4, r5, r7, lr}
 800389e:	b08e      	sub	sp, #56	; 0x38
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80038a4:	231a      	movs	r3, #26
 80038a6:	2218      	movs	r2, #24
 80038a8:	4694      	mov	ip, r2
 80038aa:	44bc      	add	ip, r7
 80038ac:	4463      	add	r3, ip
 80038ae:	2200      	movs	r2, #0
 80038b0:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80038b2:	69fb      	ldr	r3, [r7, #28]
 80038b4:	689a      	ldr	r2, [r3, #8]
 80038b6:	69fb      	ldr	r3, [r7, #28]
 80038b8:	691b      	ldr	r3, [r3, #16]
 80038ba:	431a      	orrs	r2, r3
 80038bc:	69fb      	ldr	r3, [r7, #28]
 80038be:	695b      	ldr	r3, [r3, #20]
 80038c0:	431a      	orrs	r2, r3
 80038c2:	69fb      	ldr	r3, [r7, #28]
 80038c4:	69db      	ldr	r3, [r3, #28]
 80038c6:	4313      	orrs	r3, r2
 80038c8:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80038ca:	69fb      	ldr	r3, [r7, #28]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4ac1      	ldr	r2, [pc, #772]	; (8003bd8 <UART_SetConfig+0x33c>)
 80038d2:	4013      	ands	r3, r2
 80038d4:	0019      	movs	r1, r3
 80038d6:	69fb      	ldr	r3, [r7, #28]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80038dc:	430a      	orrs	r2, r1
 80038de:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80038e0:	69fb      	ldr	r3, [r7, #28]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	4abd      	ldr	r2, [pc, #756]	; (8003bdc <UART_SetConfig+0x340>)
 80038e8:	4013      	ands	r3, r2
 80038ea:	0019      	movs	r1, r3
 80038ec:	69fb      	ldr	r3, [r7, #28]
 80038ee:	68da      	ldr	r2, [r3, #12]
 80038f0:	69fb      	ldr	r3, [r7, #28]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	430a      	orrs	r2, r1
 80038f6:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80038f8:	69fb      	ldr	r3, [r7, #28]
 80038fa:	699b      	ldr	r3, [r3, #24]
 80038fc:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80038fe:	69fb      	ldr	r3, [r7, #28]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4ab7      	ldr	r2, [pc, #732]	; (8003be0 <UART_SetConfig+0x344>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d004      	beq.n	8003912 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003908:	69fb      	ldr	r3, [r7, #28]
 800390a:	6a1b      	ldr	r3, [r3, #32]
 800390c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800390e:	4313      	orrs	r3, r2
 8003910:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003912:	69fb      	ldr	r3, [r7, #28]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	4ab2      	ldr	r2, [pc, #712]	; (8003be4 <UART_SetConfig+0x348>)
 800391a:	4013      	ands	r3, r2
 800391c:	0019      	movs	r1, r3
 800391e:	69fb      	ldr	r3, [r7, #28]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003924:	430a      	orrs	r2, r1
 8003926:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003928:	69fb      	ldr	r3, [r7, #28]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4aae      	ldr	r2, [pc, #696]	; (8003be8 <UART_SetConfig+0x34c>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d136      	bne.n	80039a0 <UART_SetConfig+0x104>
 8003932:	4bae      	ldr	r3, [pc, #696]	; (8003bec <UART_SetConfig+0x350>)
 8003934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003936:	2203      	movs	r2, #3
 8003938:	4013      	ands	r3, r2
 800393a:	2b03      	cmp	r3, #3
 800393c:	d020      	beq.n	8003980 <UART_SetConfig+0xe4>
 800393e:	d827      	bhi.n	8003990 <UART_SetConfig+0xf4>
 8003940:	2b02      	cmp	r3, #2
 8003942:	d00d      	beq.n	8003960 <UART_SetConfig+0xc4>
 8003944:	d824      	bhi.n	8003990 <UART_SetConfig+0xf4>
 8003946:	2b00      	cmp	r3, #0
 8003948:	d002      	beq.n	8003950 <UART_SetConfig+0xb4>
 800394a:	2b01      	cmp	r3, #1
 800394c:	d010      	beq.n	8003970 <UART_SetConfig+0xd4>
 800394e:	e01f      	b.n	8003990 <UART_SetConfig+0xf4>
 8003950:	231b      	movs	r3, #27
 8003952:	2218      	movs	r2, #24
 8003954:	4694      	mov	ip, r2
 8003956:	44bc      	add	ip, r7
 8003958:	4463      	add	r3, ip
 800395a:	2201      	movs	r2, #1
 800395c:	701a      	strb	r2, [r3, #0]
 800395e:	e0ab      	b.n	8003ab8 <UART_SetConfig+0x21c>
 8003960:	231b      	movs	r3, #27
 8003962:	2218      	movs	r2, #24
 8003964:	4694      	mov	ip, r2
 8003966:	44bc      	add	ip, r7
 8003968:	4463      	add	r3, ip
 800396a:	2202      	movs	r2, #2
 800396c:	701a      	strb	r2, [r3, #0]
 800396e:	e0a3      	b.n	8003ab8 <UART_SetConfig+0x21c>
 8003970:	231b      	movs	r3, #27
 8003972:	2218      	movs	r2, #24
 8003974:	4694      	mov	ip, r2
 8003976:	44bc      	add	ip, r7
 8003978:	4463      	add	r3, ip
 800397a:	2204      	movs	r2, #4
 800397c:	701a      	strb	r2, [r3, #0]
 800397e:	e09b      	b.n	8003ab8 <UART_SetConfig+0x21c>
 8003980:	231b      	movs	r3, #27
 8003982:	2218      	movs	r2, #24
 8003984:	4694      	mov	ip, r2
 8003986:	44bc      	add	ip, r7
 8003988:	4463      	add	r3, ip
 800398a:	2208      	movs	r2, #8
 800398c:	701a      	strb	r2, [r3, #0]
 800398e:	e093      	b.n	8003ab8 <UART_SetConfig+0x21c>
 8003990:	231b      	movs	r3, #27
 8003992:	2218      	movs	r2, #24
 8003994:	4694      	mov	ip, r2
 8003996:	44bc      	add	ip, r7
 8003998:	4463      	add	r3, ip
 800399a:	2210      	movs	r2, #16
 800399c:	701a      	strb	r2, [r3, #0]
 800399e:	e08b      	b.n	8003ab8 <UART_SetConfig+0x21c>
 80039a0:	69fb      	ldr	r3, [r7, #28]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a92      	ldr	r2, [pc, #584]	; (8003bf0 <UART_SetConfig+0x354>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d136      	bne.n	8003a18 <UART_SetConfig+0x17c>
 80039aa:	4b90      	ldr	r3, [pc, #576]	; (8003bec <UART_SetConfig+0x350>)
 80039ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039ae:	220c      	movs	r2, #12
 80039b0:	4013      	ands	r3, r2
 80039b2:	2b0c      	cmp	r3, #12
 80039b4:	d020      	beq.n	80039f8 <UART_SetConfig+0x15c>
 80039b6:	d827      	bhi.n	8003a08 <UART_SetConfig+0x16c>
 80039b8:	2b08      	cmp	r3, #8
 80039ba:	d00d      	beq.n	80039d8 <UART_SetConfig+0x13c>
 80039bc:	d824      	bhi.n	8003a08 <UART_SetConfig+0x16c>
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d002      	beq.n	80039c8 <UART_SetConfig+0x12c>
 80039c2:	2b04      	cmp	r3, #4
 80039c4:	d010      	beq.n	80039e8 <UART_SetConfig+0x14c>
 80039c6:	e01f      	b.n	8003a08 <UART_SetConfig+0x16c>
 80039c8:	231b      	movs	r3, #27
 80039ca:	2218      	movs	r2, #24
 80039cc:	4694      	mov	ip, r2
 80039ce:	44bc      	add	ip, r7
 80039d0:	4463      	add	r3, ip
 80039d2:	2200      	movs	r2, #0
 80039d4:	701a      	strb	r2, [r3, #0]
 80039d6:	e06f      	b.n	8003ab8 <UART_SetConfig+0x21c>
 80039d8:	231b      	movs	r3, #27
 80039da:	2218      	movs	r2, #24
 80039dc:	4694      	mov	ip, r2
 80039de:	44bc      	add	ip, r7
 80039e0:	4463      	add	r3, ip
 80039e2:	2202      	movs	r2, #2
 80039e4:	701a      	strb	r2, [r3, #0]
 80039e6:	e067      	b.n	8003ab8 <UART_SetConfig+0x21c>
 80039e8:	231b      	movs	r3, #27
 80039ea:	2218      	movs	r2, #24
 80039ec:	4694      	mov	ip, r2
 80039ee:	44bc      	add	ip, r7
 80039f0:	4463      	add	r3, ip
 80039f2:	2204      	movs	r2, #4
 80039f4:	701a      	strb	r2, [r3, #0]
 80039f6:	e05f      	b.n	8003ab8 <UART_SetConfig+0x21c>
 80039f8:	231b      	movs	r3, #27
 80039fa:	2218      	movs	r2, #24
 80039fc:	4694      	mov	ip, r2
 80039fe:	44bc      	add	ip, r7
 8003a00:	4463      	add	r3, ip
 8003a02:	2208      	movs	r2, #8
 8003a04:	701a      	strb	r2, [r3, #0]
 8003a06:	e057      	b.n	8003ab8 <UART_SetConfig+0x21c>
 8003a08:	231b      	movs	r3, #27
 8003a0a:	2218      	movs	r2, #24
 8003a0c:	4694      	mov	ip, r2
 8003a0e:	44bc      	add	ip, r7
 8003a10:	4463      	add	r3, ip
 8003a12:	2210      	movs	r2, #16
 8003a14:	701a      	strb	r2, [r3, #0]
 8003a16:	e04f      	b.n	8003ab8 <UART_SetConfig+0x21c>
 8003a18:	69fb      	ldr	r3, [r7, #28]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a70      	ldr	r2, [pc, #448]	; (8003be0 <UART_SetConfig+0x344>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d143      	bne.n	8003aaa <UART_SetConfig+0x20e>
 8003a22:	4b72      	ldr	r3, [pc, #456]	; (8003bec <UART_SetConfig+0x350>)
 8003a24:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003a26:	23c0      	movs	r3, #192	; 0xc0
 8003a28:	011b      	lsls	r3, r3, #4
 8003a2a:	4013      	ands	r3, r2
 8003a2c:	22c0      	movs	r2, #192	; 0xc0
 8003a2e:	0112      	lsls	r2, r2, #4
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d02a      	beq.n	8003a8a <UART_SetConfig+0x1ee>
 8003a34:	22c0      	movs	r2, #192	; 0xc0
 8003a36:	0112      	lsls	r2, r2, #4
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d82e      	bhi.n	8003a9a <UART_SetConfig+0x1fe>
 8003a3c:	2280      	movs	r2, #128	; 0x80
 8003a3e:	0112      	lsls	r2, r2, #4
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d012      	beq.n	8003a6a <UART_SetConfig+0x1ce>
 8003a44:	2280      	movs	r2, #128	; 0x80
 8003a46:	0112      	lsls	r2, r2, #4
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d826      	bhi.n	8003a9a <UART_SetConfig+0x1fe>
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d004      	beq.n	8003a5a <UART_SetConfig+0x1be>
 8003a50:	2280      	movs	r2, #128	; 0x80
 8003a52:	00d2      	lsls	r2, r2, #3
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d010      	beq.n	8003a7a <UART_SetConfig+0x1de>
 8003a58:	e01f      	b.n	8003a9a <UART_SetConfig+0x1fe>
 8003a5a:	231b      	movs	r3, #27
 8003a5c:	2218      	movs	r2, #24
 8003a5e:	4694      	mov	ip, r2
 8003a60:	44bc      	add	ip, r7
 8003a62:	4463      	add	r3, ip
 8003a64:	2200      	movs	r2, #0
 8003a66:	701a      	strb	r2, [r3, #0]
 8003a68:	e026      	b.n	8003ab8 <UART_SetConfig+0x21c>
 8003a6a:	231b      	movs	r3, #27
 8003a6c:	2218      	movs	r2, #24
 8003a6e:	4694      	mov	ip, r2
 8003a70:	44bc      	add	ip, r7
 8003a72:	4463      	add	r3, ip
 8003a74:	2202      	movs	r2, #2
 8003a76:	701a      	strb	r2, [r3, #0]
 8003a78:	e01e      	b.n	8003ab8 <UART_SetConfig+0x21c>
 8003a7a:	231b      	movs	r3, #27
 8003a7c:	2218      	movs	r2, #24
 8003a7e:	4694      	mov	ip, r2
 8003a80:	44bc      	add	ip, r7
 8003a82:	4463      	add	r3, ip
 8003a84:	2204      	movs	r2, #4
 8003a86:	701a      	strb	r2, [r3, #0]
 8003a88:	e016      	b.n	8003ab8 <UART_SetConfig+0x21c>
 8003a8a:	231b      	movs	r3, #27
 8003a8c:	2218      	movs	r2, #24
 8003a8e:	4694      	mov	ip, r2
 8003a90:	44bc      	add	ip, r7
 8003a92:	4463      	add	r3, ip
 8003a94:	2208      	movs	r2, #8
 8003a96:	701a      	strb	r2, [r3, #0]
 8003a98:	e00e      	b.n	8003ab8 <UART_SetConfig+0x21c>
 8003a9a:	231b      	movs	r3, #27
 8003a9c:	2218      	movs	r2, #24
 8003a9e:	4694      	mov	ip, r2
 8003aa0:	44bc      	add	ip, r7
 8003aa2:	4463      	add	r3, ip
 8003aa4:	2210      	movs	r2, #16
 8003aa6:	701a      	strb	r2, [r3, #0]
 8003aa8:	e006      	b.n	8003ab8 <UART_SetConfig+0x21c>
 8003aaa:	231b      	movs	r3, #27
 8003aac:	2218      	movs	r2, #24
 8003aae:	4694      	mov	ip, r2
 8003ab0:	44bc      	add	ip, r7
 8003ab2:	4463      	add	r3, ip
 8003ab4:	2210      	movs	r2, #16
 8003ab6:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003ab8:	69fb      	ldr	r3, [r7, #28]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a48      	ldr	r2, [pc, #288]	; (8003be0 <UART_SetConfig+0x344>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d000      	beq.n	8003ac4 <UART_SetConfig+0x228>
 8003ac2:	e09b      	b.n	8003bfc <UART_SetConfig+0x360>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003ac4:	231b      	movs	r3, #27
 8003ac6:	2218      	movs	r2, #24
 8003ac8:	4694      	mov	ip, r2
 8003aca:	44bc      	add	ip, r7
 8003acc:	4463      	add	r3, ip
 8003ace:	781b      	ldrb	r3, [r3, #0]
 8003ad0:	2b08      	cmp	r3, #8
 8003ad2:	d01d      	beq.n	8003b10 <UART_SetConfig+0x274>
 8003ad4:	dc20      	bgt.n	8003b18 <UART_SetConfig+0x27c>
 8003ad6:	2b04      	cmp	r3, #4
 8003ad8:	d015      	beq.n	8003b06 <UART_SetConfig+0x26a>
 8003ada:	dc1d      	bgt.n	8003b18 <UART_SetConfig+0x27c>
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d002      	beq.n	8003ae6 <UART_SetConfig+0x24a>
 8003ae0:	2b02      	cmp	r3, #2
 8003ae2:	d005      	beq.n	8003af0 <UART_SetConfig+0x254>
 8003ae4:	e018      	b.n	8003b18 <UART_SetConfig+0x27c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ae6:	f7fe fb7b 	bl	80021e0 <HAL_RCC_GetPCLK1Freq>
 8003aea:	0003      	movs	r3, r0
 8003aec:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003aee:	e01d      	b.n	8003b2c <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003af0:	4b3e      	ldr	r3, [pc, #248]	; (8003bec <UART_SetConfig+0x350>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	2210      	movs	r2, #16
 8003af6:	4013      	ands	r3, r2
 8003af8:	d002      	beq.n	8003b00 <UART_SetConfig+0x264>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003afa:	4b3e      	ldr	r3, [pc, #248]	; (8003bf4 <UART_SetConfig+0x358>)
 8003afc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003afe:	e015      	b.n	8003b2c <UART_SetConfig+0x290>
          pclk = (uint32_t) HSI_VALUE;
 8003b00:	4b3d      	ldr	r3, [pc, #244]	; (8003bf8 <UART_SetConfig+0x35c>)
 8003b02:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003b04:	e012      	b.n	8003b2c <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b06:	f7fe fabb 	bl	8002080 <HAL_RCC_GetSysClockFreq>
 8003b0a:	0003      	movs	r3, r0
 8003b0c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003b0e:	e00d      	b.n	8003b2c <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b10:	2380      	movs	r3, #128	; 0x80
 8003b12:	021b      	lsls	r3, r3, #8
 8003b14:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003b16:	e009      	b.n	8003b2c <UART_SetConfig+0x290>
      default:
        pclk = 0U;
 8003b18:	2300      	movs	r3, #0
 8003b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8003b1c:	231a      	movs	r3, #26
 8003b1e:	2218      	movs	r2, #24
 8003b20:	4694      	mov	ip, r2
 8003b22:	44bc      	add	ip, r7
 8003b24:	4463      	add	r3, ip
 8003b26:	2201      	movs	r2, #1
 8003b28:	701a      	strb	r2, [r3, #0]
        break;
 8003b2a:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003b2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d100      	bne.n	8003b34 <UART_SetConfig+0x298>
 8003b32:	e139      	b.n	8003da8 <UART_SetConfig+0x50c>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003b34:	69fb      	ldr	r3, [r7, #28]
 8003b36:	685a      	ldr	r2, [r3, #4]
 8003b38:	0013      	movs	r3, r2
 8003b3a:	005b      	lsls	r3, r3, #1
 8003b3c:	189b      	adds	r3, r3, r2
 8003b3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b40:	429a      	cmp	r2, r3
 8003b42:	d305      	bcc.n	8003b50 <UART_SetConfig+0x2b4>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003b44:	69fb      	ldr	r3, [r7, #28]
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003b4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	d907      	bls.n	8003b60 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8003b50:	231a      	movs	r3, #26
 8003b52:	2218      	movs	r2, #24
 8003b54:	4694      	mov	ip, r2
 8003b56:	44bc      	add	ip, r7
 8003b58:	4463      	add	r3, ip
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	701a      	strb	r2, [r3, #0]
 8003b5e:	e123      	b.n	8003da8 <UART_SetConfig+0x50c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003b60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b62:	613b      	str	r3, [r7, #16]
 8003b64:	2300      	movs	r3, #0
 8003b66:	617b      	str	r3, [r7, #20]
 8003b68:	6939      	ldr	r1, [r7, #16]
 8003b6a:	697a      	ldr	r2, [r7, #20]
 8003b6c:	000b      	movs	r3, r1
 8003b6e:	0e1b      	lsrs	r3, r3, #24
 8003b70:	0010      	movs	r0, r2
 8003b72:	0205      	lsls	r5, r0, #8
 8003b74:	431d      	orrs	r5, r3
 8003b76:	000b      	movs	r3, r1
 8003b78:	021c      	lsls	r4, r3, #8
 8003b7a:	69fb      	ldr	r3, [r7, #28]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	085b      	lsrs	r3, r3, #1
 8003b80:	60bb      	str	r3, [r7, #8]
 8003b82:	2300      	movs	r3, #0
 8003b84:	60fb      	str	r3, [r7, #12]
 8003b86:	68b8      	ldr	r0, [r7, #8]
 8003b88:	68f9      	ldr	r1, [r7, #12]
 8003b8a:	1900      	adds	r0, r0, r4
 8003b8c:	4169      	adcs	r1, r5
 8003b8e:	69fb      	ldr	r3, [r7, #28]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	603b      	str	r3, [r7, #0]
 8003b94:	2300      	movs	r3, #0
 8003b96:	607b      	str	r3, [r7, #4]
 8003b98:	683a      	ldr	r2, [r7, #0]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	f7fc fb40 	bl	8000220 <__aeabi_uldivmod>
 8003ba0:	0002      	movs	r2, r0
 8003ba2:	000b      	movs	r3, r1
 8003ba4:	0013      	movs	r3, r2
 8003ba6:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003ba8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003baa:	23c0      	movs	r3, #192	; 0xc0
 8003bac:	009b      	lsls	r3, r3, #2
 8003bae:	429a      	cmp	r2, r3
 8003bb0:	d309      	bcc.n	8003bc6 <UART_SetConfig+0x32a>
 8003bb2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003bb4:	2380      	movs	r3, #128	; 0x80
 8003bb6:	035b      	lsls	r3, r3, #13
 8003bb8:	429a      	cmp	r2, r3
 8003bba:	d204      	bcs.n	8003bc6 <UART_SetConfig+0x32a>
        {
          huart->Instance->BRR = usartdiv;
 8003bbc:	69fb      	ldr	r3, [r7, #28]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003bc2:	60da      	str	r2, [r3, #12]
 8003bc4:	e0f0      	b.n	8003da8 <UART_SetConfig+0x50c>
        }
        else
        {
          ret = HAL_ERROR;
 8003bc6:	231a      	movs	r3, #26
 8003bc8:	2218      	movs	r2, #24
 8003bca:	4694      	mov	ip, r2
 8003bcc:	44bc      	add	ip, r7
 8003bce:	4463      	add	r3, ip
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	701a      	strb	r2, [r3, #0]
 8003bd4:	e0e8      	b.n	8003da8 <UART_SetConfig+0x50c>
 8003bd6:	46c0      	nop			; (mov r8, r8)
 8003bd8:	efff69f3 	.word	0xefff69f3
 8003bdc:	ffffcfff 	.word	0xffffcfff
 8003be0:	40004800 	.word	0x40004800
 8003be4:	fffff4ff 	.word	0xfffff4ff
 8003be8:	40013800 	.word	0x40013800
 8003bec:	40021000 	.word	0x40021000
 8003bf0:	40004400 	.word	0x40004400
 8003bf4:	003d0900 	.word	0x003d0900
 8003bf8:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003bfc:	69fb      	ldr	r3, [r7, #28]
 8003bfe:	69da      	ldr	r2, [r3, #28]
 8003c00:	2380      	movs	r3, #128	; 0x80
 8003c02:	021b      	lsls	r3, r3, #8
 8003c04:	429a      	cmp	r2, r3
 8003c06:	d000      	beq.n	8003c0a <UART_SetConfig+0x36e>
 8003c08:	e074      	b.n	8003cf4 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8003c0a:	231b      	movs	r3, #27
 8003c0c:	2218      	movs	r2, #24
 8003c0e:	4694      	mov	ip, r2
 8003c10:	44bc      	add	ip, r7
 8003c12:	4463      	add	r3, ip
 8003c14:	781b      	ldrb	r3, [r3, #0]
 8003c16:	2b08      	cmp	r3, #8
 8003c18:	d822      	bhi.n	8003c60 <UART_SetConfig+0x3c4>
 8003c1a:	009a      	lsls	r2, r3, #2
 8003c1c:	4b6a      	ldr	r3, [pc, #424]	; (8003dc8 <UART_SetConfig+0x52c>)
 8003c1e:	18d3      	adds	r3, r2, r3
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c24:	f7fe fadc 	bl	80021e0 <HAL_RCC_GetPCLK1Freq>
 8003c28:	0003      	movs	r3, r0
 8003c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003c2c:	e022      	b.n	8003c74 <UART_SetConfig+0x3d8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c2e:	f7fe faed 	bl	800220c <HAL_RCC_GetPCLK2Freq>
 8003c32:	0003      	movs	r3, r0
 8003c34:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003c36:	e01d      	b.n	8003c74 <UART_SetConfig+0x3d8>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003c38:	4b64      	ldr	r3, [pc, #400]	; (8003dcc <UART_SetConfig+0x530>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	2210      	movs	r2, #16
 8003c3e:	4013      	ands	r3, r2
 8003c40:	d002      	beq.n	8003c48 <UART_SetConfig+0x3ac>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003c42:	4b63      	ldr	r3, [pc, #396]	; (8003dd0 <UART_SetConfig+0x534>)
 8003c44:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003c46:	e015      	b.n	8003c74 <UART_SetConfig+0x3d8>
          pclk = (uint32_t) HSI_VALUE;
 8003c48:	4b62      	ldr	r3, [pc, #392]	; (8003dd4 <UART_SetConfig+0x538>)
 8003c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003c4c:	e012      	b.n	8003c74 <UART_SetConfig+0x3d8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c4e:	f7fe fa17 	bl	8002080 <HAL_RCC_GetSysClockFreq>
 8003c52:	0003      	movs	r3, r0
 8003c54:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003c56:	e00d      	b.n	8003c74 <UART_SetConfig+0x3d8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c58:	2380      	movs	r3, #128	; 0x80
 8003c5a:	021b      	lsls	r3, r3, #8
 8003c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003c5e:	e009      	b.n	8003c74 <UART_SetConfig+0x3d8>
      default:
        pclk = 0U;
 8003c60:	2300      	movs	r3, #0
 8003c62:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8003c64:	231a      	movs	r3, #26
 8003c66:	2218      	movs	r2, #24
 8003c68:	4694      	mov	ip, r2
 8003c6a:	44bc      	add	ip, r7
 8003c6c:	4463      	add	r3, ip
 8003c6e:	2201      	movs	r2, #1
 8003c70:	701a      	strb	r2, [r3, #0]
        break;
 8003c72:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003c74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d100      	bne.n	8003c7c <UART_SetConfig+0x3e0>
 8003c7a:	e095      	b.n	8003da8 <UART_SetConfig+0x50c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003c7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c7e:	005a      	lsls	r2, r3, #1
 8003c80:	69fb      	ldr	r3, [r7, #28]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	085b      	lsrs	r3, r3, #1
 8003c86:	18d2      	adds	r2, r2, r3
 8003c88:	69fb      	ldr	r3, [r7, #28]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	0019      	movs	r1, r3
 8003c8e:	0010      	movs	r0, r2
 8003c90:	f7fc fa3a 	bl	8000108 <__udivsi3>
 8003c94:	0003      	movs	r3, r0
 8003c96:	b29b      	uxth	r3, r3
 8003c98:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c9c:	2b0f      	cmp	r3, #15
 8003c9e:	d921      	bls.n	8003ce4 <UART_SetConfig+0x448>
 8003ca0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ca2:	2380      	movs	r3, #128	; 0x80
 8003ca4:	025b      	lsls	r3, r3, #9
 8003ca6:	429a      	cmp	r2, r3
 8003ca8:	d21c      	bcs.n	8003ce4 <UART_SetConfig+0x448>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cac:	b29a      	uxth	r2, r3
 8003cae:	200e      	movs	r0, #14
 8003cb0:	2418      	movs	r4, #24
 8003cb2:	193b      	adds	r3, r7, r4
 8003cb4:	181b      	adds	r3, r3, r0
 8003cb6:	210f      	movs	r1, #15
 8003cb8:	438a      	bics	r2, r1
 8003cba:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cbe:	085b      	lsrs	r3, r3, #1
 8003cc0:	b29b      	uxth	r3, r3
 8003cc2:	2207      	movs	r2, #7
 8003cc4:	4013      	ands	r3, r2
 8003cc6:	b299      	uxth	r1, r3
 8003cc8:	193b      	adds	r3, r7, r4
 8003cca:	181b      	adds	r3, r3, r0
 8003ccc:	193a      	adds	r2, r7, r4
 8003cce:	1812      	adds	r2, r2, r0
 8003cd0:	8812      	ldrh	r2, [r2, #0]
 8003cd2:	430a      	orrs	r2, r1
 8003cd4:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003cd6:	69fb      	ldr	r3, [r7, #28]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	193a      	adds	r2, r7, r4
 8003cdc:	1812      	adds	r2, r2, r0
 8003cde:	8812      	ldrh	r2, [r2, #0]
 8003ce0:	60da      	str	r2, [r3, #12]
 8003ce2:	e061      	b.n	8003da8 <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 8003ce4:	231a      	movs	r3, #26
 8003ce6:	2218      	movs	r2, #24
 8003ce8:	4694      	mov	ip, r2
 8003cea:	44bc      	add	ip, r7
 8003cec:	4463      	add	r3, ip
 8003cee:	2201      	movs	r2, #1
 8003cf0:	701a      	strb	r2, [r3, #0]
 8003cf2:	e059      	b.n	8003da8 <UART_SetConfig+0x50c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003cf4:	231b      	movs	r3, #27
 8003cf6:	2218      	movs	r2, #24
 8003cf8:	4694      	mov	ip, r2
 8003cfa:	44bc      	add	ip, r7
 8003cfc:	4463      	add	r3, ip
 8003cfe:	781b      	ldrb	r3, [r3, #0]
 8003d00:	2b08      	cmp	r3, #8
 8003d02:	d822      	bhi.n	8003d4a <UART_SetConfig+0x4ae>
 8003d04:	009a      	lsls	r2, r3, #2
 8003d06:	4b34      	ldr	r3, [pc, #208]	; (8003dd8 <UART_SetConfig+0x53c>)
 8003d08:	18d3      	adds	r3, r2, r3
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d0e:	f7fe fa67 	bl	80021e0 <HAL_RCC_GetPCLK1Freq>
 8003d12:	0003      	movs	r3, r0
 8003d14:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003d16:	e022      	b.n	8003d5e <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d18:	f7fe fa78 	bl	800220c <HAL_RCC_GetPCLK2Freq>
 8003d1c:	0003      	movs	r3, r0
 8003d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003d20:	e01d      	b.n	8003d5e <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003d22:	4b2a      	ldr	r3, [pc, #168]	; (8003dcc <UART_SetConfig+0x530>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	2210      	movs	r2, #16
 8003d28:	4013      	ands	r3, r2
 8003d2a:	d002      	beq.n	8003d32 <UART_SetConfig+0x496>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003d2c:	4b28      	ldr	r3, [pc, #160]	; (8003dd0 <UART_SetConfig+0x534>)
 8003d2e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003d30:	e015      	b.n	8003d5e <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 8003d32:	4b28      	ldr	r3, [pc, #160]	; (8003dd4 <UART_SetConfig+0x538>)
 8003d34:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003d36:	e012      	b.n	8003d5e <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d38:	f7fe f9a2 	bl	8002080 <HAL_RCC_GetSysClockFreq>
 8003d3c:	0003      	movs	r3, r0
 8003d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003d40:	e00d      	b.n	8003d5e <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d42:	2380      	movs	r3, #128	; 0x80
 8003d44:	021b      	lsls	r3, r3, #8
 8003d46:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003d48:	e009      	b.n	8003d5e <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8003d4e:	231a      	movs	r3, #26
 8003d50:	2218      	movs	r2, #24
 8003d52:	4694      	mov	ip, r2
 8003d54:	44bc      	add	ip, r7
 8003d56:	4463      	add	r3, ip
 8003d58:	2201      	movs	r2, #1
 8003d5a:	701a      	strb	r2, [r3, #0]
        break;
 8003d5c:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d021      	beq.n	8003da8 <UART_SetConfig+0x50c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003d64:	69fb      	ldr	r3, [r7, #28]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	085a      	lsrs	r2, r3, #1
 8003d6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d6c:	18d2      	adds	r2, r2, r3
 8003d6e:	69fb      	ldr	r3, [r7, #28]
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	0019      	movs	r1, r3
 8003d74:	0010      	movs	r0, r2
 8003d76:	f7fc f9c7 	bl	8000108 <__udivsi3>
 8003d7a:	0003      	movs	r3, r0
 8003d7c:	b29b      	uxth	r3, r3
 8003d7e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d82:	2b0f      	cmp	r3, #15
 8003d84:	d909      	bls.n	8003d9a <UART_SetConfig+0x4fe>
 8003d86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d88:	2380      	movs	r3, #128	; 0x80
 8003d8a:	025b      	lsls	r3, r3, #9
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	d204      	bcs.n	8003d9a <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = usartdiv;
 8003d90:	69fb      	ldr	r3, [r7, #28]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d96:	60da      	str	r2, [r3, #12]
 8003d98:	e006      	b.n	8003da8 <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 8003d9a:	231a      	movs	r3, #26
 8003d9c:	2218      	movs	r2, #24
 8003d9e:	4694      	mov	ip, r2
 8003da0:	44bc      	add	ip, r7
 8003da2:	4463      	add	r3, ip
 8003da4:	2201      	movs	r2, #1
 8003da6:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003da8:	69fb      	ldr	r3, [r7, #28]
 8003daa:	2200      	movs	r2, #0
 8003dac:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003dae:	69fb      	ldr	r3, [r7, #28]
 8003db0:	2200      	movs	r2, #0
 8003db2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003db4:	231a      	movs	r3, #26
 8003db6:	2218      	movs	r2, #24
 8003db8:	4694      	mov	ip, r2
 8003dba:	44bc      	add	ip, r7
 8003dbc:	4463      	add	r3, ip
 8003dbe:	781b      	ldrb	r3, [r3, #0]
}
 8003dc0:	0018      	movs	r0, r3
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	b00e      	add	sp, #56	; 0x38
 8003dc6:	bdb0      	pop	{r4, r5, r7, pc}
 8003dc8:	08004648 	.word	0x08004648
 8003dcc:	40021000 	.word	0x40021000
 8003dd0:	003d0900 	.word	0x003d0900
 8003dd4:	00f42400 	.word	0x00f42400
 8003dd8:	0800466c 	.word	0x0800466c

08003ddc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b082      	sub	sp, #8
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de8:	2201      	movs	r2, #1
 8003dea:	4013      	ands	r3, r2
 8003dec:	d00b      	beq.n	8003e06 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	4a4a      	ldr	r2, [pc, #296]	; (8003f20 <UART_AdvFeatureConfig+0x144>)
 8003df6:	4013      	ands	r3, r2
 8003df8:	0019      	movs	r1, r3
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	430a      	orrs	r2, r1
 8003e04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e0a:	2202      	movs	r2, #2
 8003e0c:	4013      	ands	r3, r2
 8003e0e:	d00b      	beq.n	8003e28 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	4a43      	ldr	r2, [pc, #268]	; (8003f24 <UART_AdvFeatureConfig+0x148>)
 8003e18:	4013      	ands	r3, r2
 8003e1a:	0019      	movs	r1, r3
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	430a      	orrs	r2, r1
 8003e26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e2c:	2204      	movs	r2, #4
 8003e2e:	4013      	ands	r3, r2
 8003e30:	d00b      	beq.n	8003e4a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	4a3b      	ldr	r2, [pc, #236]	; (8003f28 <UART_AdvFeatureConfig+0x14c>)
 8003e3a:	4013      	ands	r3, r2
 8003e3c:	0019      	movs	r1, r3
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	430a      	orrs	r2, r1
 8003e48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e4e:	2208      	movs	r2, #8
 8003e50:	4013      	ands	r3, r2
 8003e52:	d00b      	beq.n	8003e6c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	4a34      	ldr	r2, [pc, #208]	; (8003f2c <UART_AdvFeatureConfig+0x150>)
 8003e5c:	4013      	ands	r3, r2
 8003e5e:	0019      	movs	r1, r3
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	430a      	orrs	r2, r1
 8003e6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e70:	2210      	movs	r2, #16
 8003e72:	4013      	ands	r3, r2
 8003e74:	d00b      	beq.n	8003e8e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	4a2c      	ldr	r2, [pc, #176]	; (8003f30 <UART_AdvFeatureConfig+0x154>)
 8003e7e:	4013      	ands	r3, r2
 8003e80:	0019      	movs	r1, r3
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	430a      	orrs	r2, r1
 8003e8c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e92:	2220      	movs	r2, #32
 8003e94:	4013      	ands	r3, r2
 8003e96:	d00b      	beq.n	8003eb0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	689b      	ldr	r3, [r3, #8]
 8003e9e:	4a25      	ldr	r2, [pc, #148]	; (8003f34 <UART_AdvFeatureConfig+0x158>)
 8003ea0:	4013      	ands	r3, r2
 8003ea2:	0019      	movs	r1, r3
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	430a      	orrs	r2, r1
 8003eae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb4:	2240      	movs	r2, #64	; 0x40
 8003eb6:	4013      	ands	r3, r2
 8003eb8:	d01d      	beq.n	8003ef6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	4a1d      	ldr	r2, [pc, #116]	; (8003f38 <UART_AdvFeatureConfig+0x15c>)
 8003ec2:	4013      	ands	r3, r2
 8003ec4:	0019      	movs	r1, r3
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	430a      	orrs	r2, r1
 8003ed0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ed6:	2380      	movs	r3, #128	; 0x80
 8003ed8:	035b      	lsls	r3, r3, #13
 8003eda:	429a      	cmp	r2, r3
 8003edc:	d10b      	bne.n	8003ef6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	4a15      	ldr	r2, [pc, #84]	; (8003f3c <UART_AdvFeatureConfig+0x160>)
 8003ee6:	4013      	ands	r3, r2
 8003ee8:	0019      	movs	r1, r3
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	430a      	orrs	r2, r1
 8003ef4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003efa:	2280      	movs	r2, #128	; 0x80
 8003efc:	4013      	ands	r3, r2
 8003efe:	d00b      	beq.n	8003f18 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	4a0e      	ldr	r2, [pc, #56]	; (8003f40 <UART_AdvFeatureConfig+0x164>)
 8003f08:	4013      	ands	r3, r2
 8003f0a:	0019      	movs	r1, r3
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	430a      	orrs	r2, r1
 8003f16:	605a      	str	r2, [r3, #4]
  }
}
 8003f18:	46c0      	nop			; (mov r8, r8)
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	b002      	add	sp, #8
 8003f1e:	bd80      	pop	{r7, pc}
 8003f20:	fffdffff 	.word	0xfffdffff
 8003f24:	fffeffff 	.word	0xfffeffff
 8003f28:	fffbffff 	.word	0xfffbffff
 8003f2c:	ffff7fff 	.word	0xffff7fff
 8003f30:	ffffefff 	.word	0xffffefff
 8003f34:	ffffdfff 	.word	0xffffdfff
 8003f38:	ffefffff 	.word	0xffefffff
 8003f3c:	ff9fffff 	.word	0xff9fffff
 8003f40:	fff7ffff 	.word	0xfff7ffff

08003f44 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b086      	sub	sp, #24
 8003f48:	af02      	add	r7, sp, #8
 8003f4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2280      	movs	r2, #128	; 0x80
 8003f50:	2100      	movs	r1, #0
 8003f52:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003f54:	f7fd f86e 	bl	8001034 <HAL_GetTick>
 8003f58:	0003      	movs	r3, r0
 8003f5a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	2208      	movs	r2, #8
 8003f64:	4013      	ands	r3, r2
 8003f66:	2b08      	cmp	r3, #8
 8003f68:	d10c      	bne.n	8003f84 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	2280      	movs	r2, #128	; 0x80
 8003f6e:	0391      	lsls	r1, r2, #14
 8003f70:	6878      	ldr	r0, [r7, #4]
 8003f72:	4a17      	ldr	r2, [pc, #92]	; (8003fd0 <UART_CheckIdleState+0x8c>)
 8003f74:	9200      	str	r2, [sp, #0]
 8003f76:	2200      	movs	r2, #0
 8003f78:	f000 f82c 	bl	8003fd4 <UART_WaitOnFlagUntilTimeout>
 8003f7c:	1e03      	subs	r3, r0, #0
 8003f7e:	d001      	beq.n	8003f84 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f80:	2303      	movs	r3, #3
 8003f82:	e021      	b.n	8003fc8 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	2204      	movs	r2, #4
 8003f8c:	4013      	ands	r3, r2
 8003f8e:	2b04      	cmp	r3, #4
 8003f90:	d10c      	bne.n	8003fac <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	2280      	movs	r2, #128	; 0x80
 8003f96:	03d1      	lsls	r1, r2, #15
 8003f98:	6878      	ldr	r0, [r7, #4]
 8003f9a:	4a0d      	ldr	r2, [pc, #52]	; (8003fd0 <UART_CheckIdleState+0x8c>)
 8003f9c:	9200      	str	r2, [sp, #0]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	f000 f818 	bl	8003fd4 <UART_WaitOnFlagUntilTimeout>
 8003fa4:	1e03      	subs	r3, r0, #0
 8003fa6:	d001      	beq.n	8003fac <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003fa8:	2303      	movs	r3, #3
 8003faa:	e00d      	b.n	8003fc8 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2220      	movs	r2, #32
 8003fb0:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2220      	movs	r2, #32
 8003fb6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2274      	movs	r2, #116	; 0x74
 8003fc2:	2100      	movs	r1, #0
 8003fc4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003fc6:	2300      	movs	r3, #0
}
 8003fc8:	0018      	movs	r0, r3
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	b004      	add	sp, #16
 8003fce:	bd80      	pop	{r7, pc}
 8003fd0:	01ffffff 	.word	0x01ffffff

08003fd4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b084      	sub	sp, #16
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	60f8      	str	r0, [r7, #12]
 8003fdc:	60b9      	str	r1, [r7, #8]
 8003fde:	603b      	str	r3, [r7, #0]
 8003fe0:	1dfb      	adds	r3, r7, #7
 8003fe2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fe4:	e05e      	b.n	80040a4 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fe6:	69bb      	ldr	r3, [r7, #24]
 8003fe8:	3301      	adds	r3, #1
 8003fea:	d05b      	beq.n	80040a4 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fec:	f7fd f822 	bl	8001034 <HAL_GetTick>
 8003ff0:	0002      	movs	r2, r0
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	1ad3      	subs	r3, r2, r3
 8003ff6:	69ba      	ldr	r2, [r7, #24]
 8003ff8:	429a      	cmp	r2, r3
 8003ffa:	d302      	bcc.n	8004002 <UART_WaitOnFlagUntilTimeout+0x2e>
 8003ffc:	69bb      	ldr	r3, [r7, #24]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d11b      	bne.n	800403a <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	681a      	ldr	r2, [r3, #0]
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	492f      	ldr	r1, [pc, #188]	; (80040cc <UART_WaitOnFlagUntilTimeout+0xf8>)
 800400e:	400a      	ands	r2, r1
 8004010:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	689a      	ldr	r2, [r3, #8]
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	2101      	movs	r1, #1
 800401e:	438a      	bics	r2, r1
 8004020:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	2220      	movs	r2, #32
 8004026:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2220      	movs	r2, #32
 800402c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2274      	movs	r2, #116	; 0x74
 8004032:	2100      	movs	r1, #0
 8004034:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004036:	2303      	movs	r3, #3
 8004038:	e044      	b.n	80040c4 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	2204      	movs	r2, #4
 8004042:	4013      	ands	r3, r2
 8004044:	d02e      	beq.n	80040a4 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	69da      	ldr	r2, [r3, #28]
 800404c:	2380      	movs	r3, #128	; 0x80
 800404e:	011b      	lsls	r3, r3, #4
 8004050:	401a      	ands	r2, r3
 8004052:	2380      	movs	r3, #128	; 0x80
 8004054:	011b      	lsls	r3, r3, #4
 8004056:	429a      	cmp	r2, r3
 8004058:	d124      	bne.n	80040a4 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	2280      	movs	r2, #128	; 0x80
 8004060:	0112      	lsls	r2, r2, #4
 8004062:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	681a      	ldr	r2, [r3, #0]
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4917      	ldr	r1, [pc, #92]	; (80040cc <UART_WaitOnFlagUntilTimeout+0xf8>)
 8004070:	400a      	ands	r2, r1
 8004072:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	689a      	ldr	r2, [r3, #8]
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	2101      	movs	r1, #1
 8004080:	438a      	bics	r2, r1
 8004082:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2220      	movs	r2, #32
 8004088:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	2220      	movs	r2, #32
 800408e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2280      	movs	r2, #128	; 0x80
 8004094:	2120      	movs	r1, #32
 8004096:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	2274      	movs	r2, #116	; 0x74
 800409c:	2100      	movs	r1, #0
 800409e:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80040a0:	2303      	movs	r3, #3
 80040a2:	e00f      	b.n	80040c4 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	69db      	ldr	r3, [r3, #28]
 80040aa:	68ba      	ldr	r2, [r7, #8]
 80040ac:	4013      	ands	r3, r2
 80040ae:	68ba      	ldr	r2, [r7, #8]
 80040b0:	1ad3      	subs	r3, r2, r3
 80040b2:	425a      	negs	r2, r3
 80040b4:	4153      	adcs	r3, r2
 80040b6:	b2db      	uxtb	r3, r3
 80040b8:	001a      	movs	r2, r3
 80040ba:	1dfb      	adds	r3, r7, #7
 80040bc:	781b      	ldrb	r3, [r3, #0]
 80040be:	429a      	cmp	r2, r3
 80040c0:	d091      	beq.n	8003fe6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80040c2:	2300      	movs	r3, #0
}
 80040c4:	0018      	movs	r0, r3
 80040c6:	46bd      	mov	sp, r7
 80040c8:	b004      	add	sp, #16
 80040ca:	bd80      	pop	{r7, pc}
 80040cc:	fffffe5f 	.word	0xfffffe5f

080040d0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b084      	sub	sp, #16
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	60f8      	str	r0, [r7, #12]
 80040d8:	60b9      	str	r1, [r7, #8]
 80040da:	1dbb      	adds	r3, r7, #6
 80040dc:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	68ba      	ldr	r2, [r7, #8]
 80040e2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	1dba      	adds	r2, r7, #6
 80040e8:	2158      	movs	r1, #88	; 0x58
 80040ea:	8812      	ldrh	r2, [r2, #0]
 80040ec:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	1dba      	adds	r2, r7, #6
 80040f2:	215a      	movs	r1, #90	; 0x5a
 80040f4:	8812      	ldrh	r2, [r2, #0]
 80040f6:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	2200      	movs	r2, #0
 80040fc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	689a      	ldr	r2, [r3, #8]
 8004102:	2380      	movs	r3, #128	; 0x80
 8004104:	015b      	lsls	r3, r3, #5
 8004106:	429a      	cmp	r2, r3
 8004108:	d10d      	bne.n	8004126 <UART_Start_Receive_IT+0x56>
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	691b      	ldr	r3, [r3, #16]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d104      	bne.n	800411c <UART_Start_Receive_IT+0x4c>
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	225c      	movs	r2, #92	; 0x5c
 8004116:	4932      	ldr	r1, [pc, #200]	; (80041e0 <UART_Start_Receive_IT+0x110>)
 8004118:	5299      	strh	r1, [r3, r2]
 800411a:	e02e      	b.n	800417a <UART_Start_Receive_IT+0xaa>
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	225c      	movs	r2, #92	; 0x5c
 8004120:	21ff      	movs	r1, #255	; 0xff
 8004122:	5299      	strh	r1, [r3, r2]
 8004124:	e029      	b.n	800417a <UART_Start_Receive_IT+0xaa>
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d10d      	bne.n	800414a <UART_Start_Receive_IT+0x7a>
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	691b      	ldr	r3, [r3, #16]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d104      	bne.n	8004140 <UART_Start_Receive_IT+0x70>
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	225c      	movs	r2, #92	; 0x5c
 800413a:	21ff      	movs	r1, #255	; 0xff
 800413c:	5299      	strh	r1, [r3, r2]
 800413e:	e01c      	b.n	800417a <UART_Start_Receive_IT+0xaa>
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	225c      	movs	r2, #92	; 0x5c
 8004144:	217f      	movs	r1, #127	; 0x7f
 8004146:	5299      	strh	r1, [r3, r2]
 8004148:	e017      	b.n	800417a <UART_Start_Receive_IT+0xaa>
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	689a      	ldr	r2, [r3, #8]
 800414e:	2380      	movs	r3, #128	; 0x80
 8004150:	055b      	lsls	r3, r3, #21
 8004152:	429a      	cmp	r2, r3
 8004154:	d10d      	bne.n	8004172 <UART_Start_Receive_IT+0xa2>
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	691b      	ldr	r3, [r3, #16]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d104      	bne.n	8004168 <UART_Start_Receive_IT+0x98>
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	225c      	movs	r2, #92	; 0x5c
 8004162:	217f      	movs	r1, #127	; 0x7f
 8004164:	5299      	strh	r1, [r3, r2]
 8004166:	e008      	b.n	800417a <UART_Start_Receive_IT+0xaa>
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	225c      	movs	r2, #92	; 0x5c
 800416c:	213f      	movs	r1, #63	; 0x3f
 800416e:	5299      	strh	r1, [r3, r2]
 8004170:	e003      	b.n	800417a <UART_Start_Receive_IT+0xaa>
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	225c      	movs	r2, #92	; 0x5c
 8004176:	2100      	movs	r1, #0
 8004178:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	2280      	movs	r2, #128	; 0x80
 800417e:	2100      	movs	r1, #0
 8004180:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	2222      	movs	r2, #34	; 0x22
 8004186:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	689a      	ldr	r2, [r3, #8]
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	2101      	movs	r1, #1
 8004194:	430a      	orrs	r2, r1
 8004196:	609a      	str	r2, [r3, #8]

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	689a      	ldr	r2, [r3, #8]
 800419c:	2380      	movs	r3, #128	; 0x80
 800419e:	015b      	lsls	r3, r3, #5
 80041a0:	429a      	cmp	r2, r3
 80041a2:	d107      	bne.n	80041b4 <UART_Start_Receive_IT+0xe4>
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	691b      	ldr	r3, [r3, #16]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d103      	bne.n	80041b4 <UART_Start_Receive_IT+0xe4>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	4a0d      	ldr	r2, [pc, #52]	; (80041e4 <UART_Start_Receive_IT+0x114>)
 80041b0:	665a      	str	r2, [r3, #100]	; 0x64
 80041b2:	e002      	b.n	80041ba <UART_Start_Receive_IT+0xea>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	4a0c      	ldr	r2, [pc, #48]	; (80041e8 <UART_Start_Receive_IT+0x118>)
 80041b8:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	2274      	movs	r2, #116	; 0x74
 80041be:	2100      	movs	r1, #0
 80041c0:	5499      	strb	r1, [r3, r2]

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	681a      	ldr	r2, [r3, #0]
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	2190      	movs	r1, #144	; 0x90
 80041ce:	0049      	lsls	r1, r1, #1
 80041d0:	430a      	orrs	r2, r1
 80041d2:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80041d4:	2300      	movs	r3, #0
}
 80041d6:	0018      	movs	r0, r3
 80041d8:	46bd      	mov	sp, r7
 80041da:	b004      	add	sp, #16
 80041dc:	bd80      	pop	{r7, pc}
 80041de:	46c0      	nop			; (mov r8, r8)
 80041e0:	000001ff 	.word	0x000001ff
 80041e4:	08004399 	.word	0x08004399
 80041e8:	080042b1 	.word	0x080042b1

080041ec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b082      	sub	sp, #8
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	681a      	ldr	r2, [r3, #0]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4912      	ldr	r1, [pc, #72]	; (8004248 <UART_EndRxTransfer+0x5c>)
 8004200:	400a      	ands	r2, r1
 8004202:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	689a      	ldr	r2, [r3, #8]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	2101      	movs	r1, #1
 8004210:	438a      	bics	r2, r1
 8004212:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004218:	2b01      	cmp	r3, #1
 800421a:	d107      	bne.n	800422c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	681a      	ldr	r2, [r3, #0]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	2110      	movs	r1, #16
 8004228:	438a      	bics	r2, r1
 800422a:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2220      	movs	r2, #32
 8004230:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2200      	movs	r2, #0
 8004236:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2200      	movs	r2, #0
 800423c:	665a      	str	r2, [r3, #100]	; 0x64
}
 800423e:	46c0      	nop			; (mov r8, r8)
 8004240:	46bd      	mov	sp, r7
 8004242:	b002      	add	sp, #8
 8004244:	bd80      	pop	{r7, pc}
 8004246:	46c0      	nop			; (mov r8, r8)
 8004248:	fffffedf 	.word	0xfffffedf

0800424c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b084      	sub	sp, #16
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004258:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	225a      	movs	r2, #90	; 0x5a
 800425e:	2100      	movs	r1, #0
 8004260:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	2252      	movs	r2, #82	; 0x52
 8004266:	2100      	movs	r1, #0
 8004268:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	0018      	movs	r0, r3
 800426e:	f7ff fb01 	bl	8003874 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004272:	46c0      	nop			; (mov r8, r8)
 8004274:	46bd      	mov	sp, r7
 8004276:	b004      	add	sp, #16
 8004278:	bd80      	pop	{r7, pc}

0800427a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800427a:	b580      	push	{r7, lr}
 800427c:	b082      	sub	sp, #8
 800427e:	af00      	add	r7, sp, #0
 8004280:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	2140      	movs	r1, #64	; 0x40
 800428e:	438a      	bics	r2, r1
 8004290:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2220      	movs	r2, #32
 8004296:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2200      	movs	r2, #0
 800429c:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	0018      	movs	r0, r3
 80042a2:	f7ff fadf 	bl	8003864 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80042a6:	46c0      	nop			; (mov r8, r8)
 80042a8:	46bd      	mov	sp, r7
 80042aa:	b002      	add	sp, #8
 80042ac:	bd80      	pop	{r7, pc}
	...

080042b0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b084      	sub	sp, #16
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80042b8:	200e      	movs	r0, #14
 80042ba:	183b      	adds	r3, r7, r0
 80042bc:	687a      	ldr	r2, [r7, #4]
 80042be:	215c      	movs	r1, #92	; 0x5c
 80042c0:	5a52      	ldrh	r2, [r2, r1]
 80042c2:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042c8:	2b22      	cmp	r3, #34	; 0x22
 80042ca:	d157      	bne.n	800437c <UART_RxISR_8BIT+0xcc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80042d2:	210c      	movs	r1, #12
 80042d4:	187b      	adds	r3, r7, r1
 80042d6:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80042d8:	187b      	adds	r3, r7, r1
 80042da:	881b      	ldrh	r3, [r3, #0]
 80042dc:	b2da      	uxtb	r2, r3
 80042de:	183b      	adds	r3, r7, r0
 80042e0:	881b      	ldrh	r3, [r3, #0]
 80042e2:	b2d9      	uxtb	r1, r3
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042e8:	400a      	ands	r2, r1
 80042ea:	b2d2      	uxtb	r2, r2
 80042ec:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042f2:	1c5a      	adds	r2, r3, #1
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	225a      	movs	r2, #90	; 0x5a
 80042fc:	5a9b      	ldrh	r3, [r3, r2]
 80042fe:	b29b      	uxth	r3, r3
 8004300:	3b01      	subs	r3, #1
 8004302:	b299      	uxth	r1, r3
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	225a      	movs	r2, #90	; 0x5a
 8004308:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	225a      	movs	r2, #90	; 0x5a
 800430e:	5a9b      	ldrh	r3, [r3, r2]
 8004310:	b29b      	uxth	r3, r3
 8004312:	2b00      	cmp	r3, #0
 8004314:	d13a      	bne.n	800438c <UART_RxISR_8BIT+0xdc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	681a      	ldr	r2, [r3, #0]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	491c      	ldr	r1, [pc, #112]	; (8004394 <UART_RxISR_8BIT+0xe4>)
 8004322:	400a      	ands	r2, r1
 8004324:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	689a      	ldr	r2, [r3, #8]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	2101      	movs	r1, #1
 8004332:	438a      	bics	r2, r1
 8004334:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2220      	movs	r2, #32
 800433a:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2200      	movs	r2, #0
 8004340:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004346:	2b01      	cmp	r3, #1
 8004348:	d110      	bne.n	800436c <UART_RxISR_8BIT+0xbc>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	681a      	ldr	r2, [r3, #0]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	2110      	movs	r1, #16
 8004356:	438a      	bics	r2, r1
 8004358:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2258      	movs	r2, #88	; 0x58
 800435e:	5a9a      	ldrh	r2, [r3, r2]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	0011      	movs	r1, r2
 8004364:	0018      	movs	r0, r3
 8004366:	f7ff fa8d 	bl	8003884 <HAL_UARTEx_RxEventCallback>
 800436a:	e003      	b.n	8004374 <UART_RxISR_8BIT+0xc4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	0018      	movs	r0, r3
 8004370:	f7fc fc22 	bl	8000bb8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2200      	movs	r2, #0
 8004378:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800437a:	e007      	b.n	800438c <UART_RxISR_8BIT+0xdc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	699a      	ldr	r2, [r3, #24]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	2108      	movs	r1, #8
 8004388:	430a      	orrs	r2, r1
 800438a:	619a      	str	r2, [r3, #24]
}
 800438c:	46c0      	nop			; (mov r8, r8)
 800438e:	46bd      	mov	sp, r7
 8004390:	b004      	add	sp, #16
 8004392:	bd80      	pop	{r7, pc}
 8004394:	fffffedf 	.word	0xfffffedf

08004398 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b084      	sub	sp, #16
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80043a0:	200e      	movs	r0, #14
 80043a2:	183b      	adds	r3, r7, r0
 80043a4:	687a      	ldr	r2, [r7, #4]
 80043a6:	215c      	movs	r1, #92	; 0x5c
 80043a8:	5a52      	ldrh	r2, [r2, r1]
 80043aa:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80043b0:	2b22      	cmp	r3, #34	; 0x22
 80043b2:	d157      	bne.n	8004464 <UART_RxISR_16BIT+0xcc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80043ba:	210c      	movs	r1, #12
 80043bc:	187b      	adds	r3, r7, r1
 80043be:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043c4:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 80043c6:	187b      	adds	r3, r7, r1
 80043c8:	183a      	adds	r2, r7, r0
 80043ca:	881b      	ldrh	r3, [r3, #0]
 80043cc:	8812      	ldrh	r2, [r2, #0]
 80043ce:	4013      	ands	r3, r2
 80043d0:	b29a      	uxth	r2, r3
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043da:	1c9a      	adds	r2, r3, #2
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	225a      	movs	r2, #90	; 0x5a
 80043e4:	5a9b      	ldrh	r3, [r3, r2]
 80043e6:	b29b      	uxth	r3, r3
 80043e8:	3b01      	subs	r3, #1
 80043ea:	b299      	uxth	r1, r3
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	225a      	movs	r2, #90	; 0x5a
 80043f0:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	225a      	movs	r2, #90	; 0x5a
 80043f6:	5a9b      	ldrh	r3, [r3, r2]
 80043f8:	b29b      	uxth	r3, r3
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d13a      	bne.n	8004474 <UART_RxISR_16BIT+0xdc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	681a      	ldr	r2, [r3, #0]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	491c      	ldr	r1, [pc, #112]	; (800447c <UART_RxISR_16BIT+0xe4>)
 800440a:	400a      	ands	r2, r1
 800440c:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	689a      	ldr	r2, [r3, #8]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	2101      	movs	r1, #1
 800441a:	438a      	bics	r2, r1
 800441c:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2220      	movs	r2, #32
 8004422:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2200      	movs	r2, #0
 8004428:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800442e:	2b01      	cmp	r3, #1
 8004430:	d110      	bne.n	8004454 <UART_RxISR_16BIT+0xbc>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	681a      	ldr	r2, [r3, #0]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	2110      	movs	r1, #16
 800443e:	438a      	bics	r2, r1
 8004440:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2258      	movs	r2, #88	; 0x58
 8004446:	5a9a      	ldrh	r2, [r3, r2]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	0011      	movs	r1, r2
 800444c:	0018      	movs	r0, r3
 800444e:	f7ff fa19 	bl	8003884 <HAL_UARTEx_RxEventCallback>
 8004452:	e003      	b.n	800445c <UART_RxISR_16BIT+0xc4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	0018      	movs	r0, r3
 8004458:	f7fc fbae 	bl	8000bb8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2200      	movs	r2, #0
 8004460:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004462:	e007      	b.n	8004474 <UART_RxISR_16BIT+0xdc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	699a      	ldr	r2, [r3, #24]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	2108      	movs	r1, #8
 8004470:	430a      	orrs	r2, r1
 8004472:	619a      	str	r2, [r3, #24]
}
 8004474:	46c0      	nop			; (mov r8, r8)
 8004476:	46bd      	mov	sp, r7
 8004478:	b004      	add	sp, #16
 800447a:	bd80      	pop	{r7, pc}
 800447c:	fffffedf 	.word	0xfffffedf

08004480 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b082      	sub	sp, #8
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004488:	46c0      	nop			; (mov r8, r8)
 800448a:	46bd      	mov	sp, r7
 800448c:	b002      	add	sp, #8
 800448e:	bd80      	pop	{r7, pc}

08004490 <__errno>:
 8004490:	4b01      	ldr	r3, [pc, #4]	; (8004498 <__errno+0x8>)
 8004492:	6818      	ldr	r0, [r3, #0]
 8004494:	4770      	bx	lr
 8004496:	46c0      	nop			; (mov r8, r8)
 8004498:	20000014 	.word	0x20000014

0800449c <__libc_init_array>:
 800449c:	b570      	push	{r4, r5, r6, lr}
 800449e:	2600      	movs	r6, #0
 80044a0:	4d0c      	ldr	r5, [pc, #48]	; (80044d4 <__libc_init_array+0x38>)
 80044a2:	4c0d      	ldr	r4, [pc, #52]	; (80044d8 <__libc_init_array+0x3c>)
 80044a4:	1b64      	subs	r4, r4, r5
 80044a6:	10a4      	asrs	r4, r4, #2
 80044a8:	42a6      	cmp	r6, r4
 80044aa:	d109      	bne.n	80044c0 <__libc_init_array+0x24>
 80044ac:	2600      	movs	r6, #0
 80044ae:	f000 f8ad 	bl	800460c <_init>
 80044b2:	4d0a      	ldr	r5, [pc, #40]	; (80044dc <__libc_init_array+0x40>)
 80044b4:	4c0a      	ldr	r4, [pc, #40]	; (80044e0 <__libc_init_array+0x44>)
 80044b6:	1b64      	subs	r4, r4, r5
 80044b8:	10a4      	asrs	r4, r4, #2
 80044ba:	42a6      	cmp	r6, r4
 80044bc:	d105      	bne.n	80044ca <__libc_init_array+0x2e>
 80044be:	bd70      	pop	{r4, r5, r6, pc}
 80044c0:	00b3      	lsls	r3, r6, #2
 80044c2:	58eb      	ldr	r3, [r5, r3]
 80044c4:	4798      	blx	r3
 80044c6:	3601      	adds	r6, #1
 80044c8:	e7ee      	b.n	80044a8 <__libc_init_array+0xc>
 80044ca:	00b3      	lsls	r3, r6, #2
 80044cc:	58eb      	ldr	r3, [r5, r3]
 80044ce:	4798      	blx	r3
 80044d0:	3601      	adds	r6, #1
 80044d2:	e7f2      	b.n	80044ba <__libc_init_array+0x1e>
 80044d4:	08004698 	.word	0x08004698
 80044d8:	08004698 	.word	0x08004698
 80044dc:	08004698 	.word	0x08004698
 80044e0:	0800469c 	.word	0x0800469c

080044e4 <malloc>:
 80044e4:	b510      	push	{r4, lr}
 80044e6:	4b03      	ldr	r3, [pc, #12]	; (80044f4 <malloc+0x10>)
 80044e8:	0001      	movs	r1, r0
 80044ea:	6818      	ldr	r0, [r3, #0]
 80044ec:	f000 f80c 	bl	8004508 <_malloc_r>
 80044f0:	bd10      	pop	{r4, pc}
 80044f2:	46c0      	nop			; (mov r8, r8)
 80044f4:	20000014 	.word	0x20000014

080044f8 <memset>:
 80044f8:	0003      	movs	r3, r0
 80044fa:	1882      	adds	r2, r0, r2
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d100      	bne.n	8004502 <memset+0xa>
 8004500:	4770      	bx	lr
 8004502:	7019      	strb	r1, [r3, #0]
 8004504:	3301      	adds	r3, #1
 8004506:	e7f9      	b.n	80044fc <memset+0x4>

08004508 <_malloc_r>:
 8004508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800450a:	2303      	movs	r3, #3
 800450c:	1ccd      	adds	r5, r1, #3
 800450e:	439d      	bics	r5, r3
 8004510:	3508      	adds	r5, #8
 8004512:	0006      	movs	r6, r0
 8004514:	2d0c      	cmp	r5, #12
 8004516:	d21f      	bcs.n	8004558 <_malloc_r+0x50>
 8004518:	250c      	movs	r5, #12
 800451a:	42a9      	cmp	r1, r5
 800451c:	d81e      	bhi.n	800455c <_malloc_r+0x54>
 800451e:	0030      	movs	r0, r6
 8004520:	f000 f862 	bl	80045e8 <__malloc_lock>
 8004524:	4925      	ldr	r1, [pc, #148]	; (80045bc <_malloc_r+0xb4>)
 8004526:	680a      	ldr	r2, [r1, #0]
 8004528:	0014      	movs	r4, r2
 800452a:	2c00      	cmp	r4, #0
 800452c:	d11a      	bne.n	8004564 <_malloc_r+0x5c>
 800452e:	4f24      	ldr	r7, [pc, #144]	; (80045c0 <_malloc_r+0xb8>)
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d104      	bne.n	8004540 <_malloc_r+0x38>
 8004536:	0021      	movs	r1, r4
 8004538:	0030      	movs	r0, r6
 800453a:	f000 f843 	bl	80045c4 <_sbrk_r>
 800453e:	6038      	str	r0, [r7, #0]
 8004540:	0029      	movs	r1, r5
 8004542:	0030      	movs	r0, r6
 8004544:	f000 f83e 	bl	80045c4 <_sbrk_r>
 8004548:	1c43      	adds	r3, r0, #1
 800454a:	d12b      	bne.n	80045a4 <_malloc_r+0x9c>
 800454c:	230c      	movs	r3, #12
 800454e:	0030      	movs	r0, r6
 8004550:	6033      	str	r3, [r6, #0]
 8004552:	f000 f851 	bl	80045f8 <__malloc_unlock>
 8004556:	e003      	b.n	8004560 <_malloc_r+0x58>
 8004558:	2d00      	cmp	r5, #0
 800455a:	dade      	bge.n	800451a <_malloc_r+0x12>
 800455c:	230c      	movs	r3, #12
 800455e:	6033      	str	r3, [r6, #0]
 8004560:	2000      	movs	r0, #0
 8004562:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004564:	6823      	ldr	r3, [r4, #0]
 8004566:	1b5b      	subs	r3, r3, r5
 8004568:	d419      	bmi.n	800459e <_malloc_r+0x96>
 800456a:	2b0b      	cmp	r3, #11
 800456c:	d903      	bls.n	8004576 <_malloc_r+0x6e>
 800456e:	6023      	str	r3, [r4, #0]
 8004570:	18e4      	adds	r4, r4, r3
 8004572:	6025      	str	r5, [r4, #0]
 8004574:	e003      	b.n	800457e <_malloc_r+0x76>
 8004576:	6863      	ldr	r3, [r4, #4]
 8004578:	42a2      	cmp	r2, r4
 800457a:	d10e      	bne.n	800459a <_malloc_r+0x92>
 800457c:	600b      	str	r3, [r1, #0]
 800457e:	0030      	movs	r0, r6
 8004580:	f000 f83a 	bl	80045f8 <__malloc_unlock>
 8004584:	0020      	movs	r0, r4
 8004586:	2207      	movs	r2, #7
 8004588:	300b      	adds	r0, #11
 800458a:	1d23      	adds	r3, r4, #4
 800458c:	4390      	bics	r0, r2
 800458e:	1ac2      	subs	r2, r0, r3
 8004590:	4298      	cmp	r0, r3
 8004592:	d0e6      	beq.n	8004562 <_malloc_r+0x5a>
 8004594:	1a1b      	subs	r3, r3, r0
 8004596:	50a3      	str	r3, [r4, r2]
 8004598:	e7e3      	b.n	8004562 <_malloc_r+0x5a>
 800459a:	6053      	str	r3, [r2, #4]
 800459c:	e7ef      	b.n	800457e <_malloc_r+0x76>
 800459e:	0022      	movs	r2, r4
 80045a0:	6864      	ldr	r4, [r4, #4]
 80045a2:	e7c2      	b.n	800452a <_malloc_r+0x22>
 80045a4:	2303      	movs	r3, #3
 80045a6:	1cc4      	adds	r4, r0, #3
 80045a8:	439c      	bics	r4, r3
 80045aa:	42a0      	cmp	r0, r4
 80045ac:	d0e1      	beq.n	8004572 <_malloc_r+0x6a>
 80045ae:	1a21      	subs	r1, r4, r0
 80045b0:	0030      	movs	r0, r6
 80045b2:	f000 f807 	bl	80045c4 <_sbrk_r>
 80045b6:	1c43      	adds	r3, r0, #1
 80045b8:	d1db      	bne.n	8004572 <_malloc_r+0x6a>
 80045ba:	e7c7      	b.n	800454c <_malloc_r+0x44>
 80045bc:	2000009c 	.word	0x2000009c
 80045c0:	200000a0 	.word	0x200000a0

080045c4 <_sbrk_r>:
 80045c4:	2300      	movs	r3, #0
 80045c6:	b570      	push	{r4, r5, r6, lr}
 80045c8:	4d06      	ldr	r5, [pc, #24]	; (80045e4 <_sbrk_r+0x20>)
 80045ca:	0004      	movs	r4, r0
 80045cc:	0008      	movs	r0, r1
 80045ce:	602b      	str	r3, [r5, #0]
 80045d0:	f7fc fc64 	bl	8000e9c <_sbrk>
 80045d4:	1c43      	adds	r3, r0, #1
 80045d6:	d103      	bne.n	80045e0 <_sbrk_r+0x1c>
 80045d8:	682b      	ldr	r3, [r5, #0]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d000      	beq.n	80045e0 <_sbrk_r+0x1c>
 80045de:	6023      	str	r3, [r4, #0]
 80045e0:	bd70      	pop	{r4, r5, r6, pc}
 80045e2:	46c0      	nop			; (mov r8, r8)
 80045e4:	200001e8 	.word	0x200001e8

080045e8 <__malloc_lock>:
 80045e8:	b510      	push	{r4, lr}
 80045ea:	4802      	ldr	r0, [pc, #8]	; (80045f4 <__malloc_lock+0xc>)
 80045ec:	f000 f80c 	bl	8004608 <__retarget_lock_acquire_recursive>
 80045f0:	bd10      	pop	{r4, pc}
 80045f2:	46c0      	nop			; (mov r8, r8)
 80045f4:	200001f0 	.word	0x200001f0

080045f8 <__malloc_unlock>:
 80045f8:	b510      	push	{r4, lr}
 80045fa:	4802      	ldr	r0, [pc, #8]	; (8004604 <__malloc_unlock+0xc>)
 80045fc:	f000 f805 	bl	800460a <__retarget_lock_release_recursive>
 8004600:	bd10      	pop	{r4, pc}
 8004602:	46c0      	nop			; (mov r8, r8)
 8004604:	200001f0 	.word	0x200001f0

08004608 <__retarget_lock_acquire_recursive>:
 8004608:	4770      	bx	lr

0800460a <__retarget_lock_release_recursive>:
 800460a:	4770      	bx	lr

0800460c <_init>:
 800460c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800460e:	46c0      	nop			; (mov r8, r8)
 8004610:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004612:	bc08      	pop	{r3}
 8004614:	469e      	mov	lr, r3
 8004616:	4770      	bx	lr

08004618 <_fini>:
 8004618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800461a:	46c0      	nop			; (mov r8, r8)
 800461c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800461e:	bc08      	pop	{r3}
 8004620:	469e      	mov	lr, r3
 8004622:	4770      	bx	lr
